
stm32wle5-at42qt1070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005990  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005ad0  08005ad0  00015ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005be0  08005be0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010cc  20000010  08005bf8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010dc  08005bf8  000210dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b183  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005334  00000000  00000000  0003b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018e8  00000000  00000000  00040538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124b  00000000  00000000  00041e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ded3  00000000  00000000  0004306b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002083d  00000000  00000000  00060f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac4bd  00000000  00000000  0008177b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e60  00000000  00000000  0012dc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000109  00000000  00000000  00133a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005ab8 	.word	0x08005ab8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005ab8 	.word	0x08005ab8

08000180 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000180:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000182:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000186:	4919      	ldr	r1, [pc, #100]	; (80001ec <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000188:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800018e:	4917      	ldr	r1, [pc, #92]	; (80001ec <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000190:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000192:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000194:	4817      	ldr	r0, [pc, #92]	; (80001f4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000196:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000198:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800019c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800019e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80001a2:	4915      	ldr	r1, [pc, #84]	; (80001f8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 80001a4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 80001a6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 80001aa:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 80001ac:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 80001b0:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 80001b4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 80001b8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001bc:	490f      	ldr	r1, [pc, #60]	; (80001fc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 80001be:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 80001c2:	4770      	bx	lr

080001c4 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 80001c4:	f7ff bffe 	b.w	80001c4 <__tx_BadHandler>

080001c8 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 80001c8:	f7ff bffe 	b.w	80001c8 <__tx_HardfaultHandler>

080001cc <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 80001cc:	f7ff bffe 	b.w	80001cc <__tx_SVCallHandler>

080001d0 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 80001d0:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 80001d8:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80001da:	f000 f881 	bl	80002e0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001e2:	4770      	bx	lr

080001e4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80001e4:	f7ff bffe 	b.w	80001e4 <__tx_NMIHandler>

080001e8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80001e8:	f7ff bffe 	b.w	80001e8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ec:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f0:	20000ad0 	.word	0x20000ad0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80001f8:	000752ff 	.word	0x000752ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001fc:	40ff0000 	.word	0x40ff0000

08000200 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000200:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000204:	4a22      	ldr	r2, [pc, #136]	; (8000290 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000206:	6010      	str	r0, [r2, #0]
    BIC     r0, r0, #4                              // Clear the FPCA bit
    MSR     CONTROL, r0                             // Setup new CONTROL register
#endif

    /* Enable interrupts */
    CPSIE   i
 8000208:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800020a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800020e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000212:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000216:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800021a:	f3bf 8f6f 	isb	sy

0800021e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800021e:	e7fe      	b.n	800021e <__tx_wait_here>

08000220 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  // Build NULL value
 8000224:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000228:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800022a:	b169      	cbz	r1, 8000248 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800022c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800022e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000232:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000236:	4c19      	ldr	r4, [pc, #100]	; (800029c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000238:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800023c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800023e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000242:	b10d      	cbz	r5, 8000248 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000244:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000246:	6023      	str	r3, [r4, #0]

08000248 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000248:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800024a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800024c:	b189      	cbz	r1, 8000272 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800024e:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000250:	b662      	cpsie	i

08000252 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000252:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000254:	4c11      	ldr	r4, [pc, #68]	; (800029c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000256:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000258:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800025c:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800025e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000260:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000264:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000268:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800026c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000270:	4770      	bx	lr

08000272 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000272:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000274:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000276:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000278:	b909      	cbnz	r1, 800027e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800027a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800027c:	e7f9      	b.n	8000272 <__tx_ts_wait>

0800027e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800027e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000282:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000286:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800028a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800028c:	e7e1      	b.n	8000252 <__tx_ts_restore>
 800028e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000290:	20000b6c 	.word	0x20000b6c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000294:	20000ad4 	.word	0x20000ad4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000298:	20000ad8 	.word	0x20000ad8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800029c:	200010d8 	.word	0x200010d8

080002a0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80002a0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80002a2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80002a6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80002aa:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80002ae:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80002b0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80002b4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80002b6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80002b8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80002ba:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80002bc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80002be:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80002c0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80002c2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80002c4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80002c6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80002c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80002cc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80002d2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80002d4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80002d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80002dc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80002de:	4770      	bx	lr

080002e0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80002e0:	4922      	ldr	r1, [pc, #136]	; (800036c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80002e2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80002e4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80002e8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80002ec:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80002ee:	b13a      	cbz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80002f4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80002f6:	b91a      	cbnz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80002fa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80002fe:	6018      	str	r0, [r3, #0]

08000300 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000300:	491d      	ldr	r1, [pc, #116]	; (8000378 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000302:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000304:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000306:	b122      	cbz	r2, 8000312 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800030a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800030e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000310:	e008      	b.n	8000324 <__tx_timer_done>

08000312 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000312:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000318:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800031a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800031c:	d101      	bne.n	8000322 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000320:	6818      	ldr	r0, [r3, #0]

08000322 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000322:	6008      	str	r0, [r1, #0]

08000324 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000326:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000328:	b912      	cbnz	r2, 8000330 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800032c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800032e:	b1d0      	cbz	r0, 8000366 <__tx_timer_nothing_expired>

08000330 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000330:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000334:	4911      	ldr	r1, [pc, #68]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000336:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000338:	b108      	cbz	r0, 800033e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800033a:	f004 fee7 	bl	800510c <_tx_timer_expiration_process>

0800033e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000340:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000342:	b172      	cbz	r2, 8000362 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000344:	f004 fe56 	bl	8004ff4 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800034a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800034c:	b949      	cbnz	r1, 8000362 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000350:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000354:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800035c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800035e:	d000      	beq.n	8000362 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000360:	6002      	str	r2, [r0, #0]

08000362 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000366 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000366:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800036a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800036c:	20000b78 	.word	0x20000b78
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000370:	200010d8 	.word	0x200010d8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000374:	20000b7c 	.word	0x20000b7c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000378:	20000c08 	.word	0x20000c08
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800037c:	20000c0c 	.word	0x20000c0c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000380:	20000c04 	.word	0x20000c04
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000384:	20000c00 	.word	0x20000c00
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000388:	20000b6c 	.word	0x20000b6c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	20000ad4 	.word	0x20000ad4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000390:	20000ad8 	.word	0x20000ad8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000394:	e000ed04 	.word	0xe000ed04

08000398 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80003a4:	2334      	movs	r3, #52	; 0x34
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <tx_application_define+0x40>)
 80003ae:	490b      	ldr	r1, [pc, #44]	; (80003dc <tx_application_define+0x44>)
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <tx_application_define+0x48>)
 80003b2:	f005 f8dd 	bl	8005570 <_txe_byte_pool_create>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <tx_application_define+0x48>)
 80003be:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80003c0:	68b8      	ldr	r0, [r7, #8]
 80003c2:	f000 f80f 	bl	80003e4 <App_ThreadX_Init>
 80003c6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d000      	beq.n	80003d0 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80003ce:	e7fe      	b.n	80003ce <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	08005ad0 	.word	0x08005ad0
 80003e0:	2000042c 	.word	0x2000042c

080003e4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af08      	add	r7, sp, #32
 80003ea:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */
	/* Allocate the stack for thread 0.  */

	/* Create the main thread.  */
	tx_thread_create(&thread_0, 			// Thread Pointer: This is a pointer to the TX_THREAD structure that represents the thread being created. This structure holds information about the thread, such as its stack, entry function, priority, and state.
 80003f0:	23b0      	movs	r3, #176	; 0xb0
 80003f2:	9306      	str	r3, [sp, #24]
 80003f4:	2301      	movs	r3, #1
 80003f6:	9305      	str	r3, [sp, #20]
 80003f8:	2300      	movs	r3, #0
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	2301      	movs	r3, #1
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <App_ThreadX_Init+0x40>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <App_ThreadX_Init+0x44>)
 8000412:	4906      	ldr	r1, [pc, #24]	; (800042c <App_ThreadX_Init+0x48>)
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <App_ThreadX_Init+0x4c>)
 8000416:	f005 fa23 	bl	8005860 <_txe_thread_create>
					TX_AUTO_START);			// Auto Start: Specifies whether the thread should start automatically after creation (TX_AUTO_START) or if it should be manually started later.


  /* USER CODE END App_ThreadX_Init */

  return ret;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000460 	.word	0x20000460
 8000428:	08000441 	.word	0x08000441
 800042c:	08005ae4 	.word	0x08005ae4
 8000430:	20000860 	.word	0x20000860

08000434 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000438:	f004 f892 	bl	8004560 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <thread_ui_control>:

/* USER CODE BEGIN 1 */
/* Azure RTOS thread entry function */
static void thread_ui_control(ULONG thread_input)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    /* Your thread code here */
	uint8_t key = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

    // Create semaphore
    tx_semaphore_create(&external_gpio_semaphore, "gpio interrupt", 0);
 800044c:	231c      	movs	r3, #28
 800044e:	2200      	movs	r2, #0
 8000450:	4908      	ldr	r1, [pc, #32]	; (8000474 <thread_ui_control+0x34>)
 8000452:	4809      	ldr	r0, [pc, #36]	; (8000478 <thread_ui_control+0x38>)
 8000454:	f005 f92c 	bl	80056b0 <_txe_semaphore_create>

    while (1)
    {
        // Wait for semaphore
    	if (tx_semaphore_get(&external_gpio_semaphore, TX_WAIT_FOREVER) == TX_SUCCESS)
 8000458:	f04f 31ff 	mov.w	r1, #4294967295
 800045c:	4806      	ldr	r0, [pc, #24]	; (8000478 <thread_ui_control+0x38>)
 800045e:	f005 f9bd 	bl	80057dc <_txe_semaphore_get>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d1f7      	bne.n	8000458 <thread_ui_control+0x18>
    	{
    		key = main_key_status_read();
 8000468:	f000 f90a 	bl	8000680 <main_key_status_read>
 800046c:	4603      	mov	r3, r0
 800046e:	73fb      	strb	r3, [r7, #15]
    	if (tx_semaphore_get(&external_gpio_semaphore, TX_WAIT_FOREVER) == TX_SUCCESS)
 8000470:	e7f2      	b.n	8000458 <thread_ui_control+0x18>
 8000472:	bf00      	nop
 8000474:	08005af0 	.word	0x08005af0
 8000478:	20000910 	.word	0x20000910

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b0:	f000 fc02 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b4:	f000 f812 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b8:	f000 f8a2 	bl	8000600 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004bc:	f000 f860 	bl	8000580 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80004c0:	f7ff ffb8 	bl	8000434 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  at42qt1070_init(main_i2c_transmit,
 80004c4:	4a02      	ldr	r2, [pc, #8]	; (80004d0 <main+0x24>)
 80004c6:	4903      	ldr	r1, [pc, #12]	; (80004d4 <main+0x28>)
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <main+0x2c>)
 80004ca:	f000 fa8d 	bl	80009e8 <at42qt1070_init>
		  	  	  main_i2c_receive,
				  main_change_pin_read);

  while (1)
 80004ce:	e7fe      	b.n	80004ce <main+0x22>
 80004d0:	08000709 	.word	0x08000709
 80004d4:	080006d9 	.word	0x080006d9
 80004d8:	080006a9 	.word	0x080006a9

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b09a      	sub	sp, #104	; 0x68
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2248      	movs	r2, #72	; 0x48
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f005 faaa 	bl	8005a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 0308 	add.w	r3, r7, #8
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <SystemClock_Config+0xa0>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <SystemClock_Config+0xa0>)
 800050c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000510:	6013      	str	r3, [r2, #0]
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <SystemClock_Config+0xa0>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800051e:	2320      	movs	r3, #32
 8000520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000522:	2301      	movs	r3, #1
 8000524:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000526:	2300      	movs	r3, #0
 8000528:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800052a:	23b0      	movs	r3, #176	; 0xb0
 800052c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fc60 	bl	8002dfc <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000542:	f000 f8ff 	bl	8000744 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000546:	234f      	movs	r3, #79	; 0x4f
 8000548:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2102      	movs	r1, #2
 8000564:	4618      	mov	r0, r3
 8000566:	f002 ffcb 	bl	8003500 <HAL_RCC_ClockConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000570:	f000 f8e8 	bl	8000744 <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3768      	adds	r7, #104	; 0x68
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	58000400 	.word	0x58000400

08000580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000586:	4a1c      	ldr	r2, [pc, #112]	; (80005f8 <MX_I2C1_Init+0x78>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303EFD;
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_I2C1_Init+0x74>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_I2C1_Init+0x7c>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_I2C1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800059c:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005bc:	f000 feb2 	bl	8001324 <HAL_I2C_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005c6:	f000 f8bd 	bl	8000744 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005ce:	f002 f8e0 	bl	8002792 <HAL_I2CEx_ConfigAnalogFilter>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005d8:	f000 f8b4 	bl	8000744 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005dc:	2100      	movs	r1, #0
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_I2C1_Init+0x74>)
 80005e0:	f002 f921 	bl	8002826 <HAL_I2CEx_ConfigDigitalFilter>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ea:	f000 f8ab 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000092c 	.word	0x2000092c
 80005f8:	40005400 	.word	0x40005400
 80005fc:	20303efd 	.word	0x20303efd

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	2001      	movs	r0, #1
 8000616:	f7ff ff31 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2002      	movs	r0, #2
 800061c:	f7ff ff2e 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2101      	movs	r1, #1
 8000624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000628:	f000 fe43 	bl	80012b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000644:	f000 fcbe 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800064e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000652:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <MX_GPIO_Init+0x7c>)
 800065e:	f000 fcb1 	bl	8000fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2029      	movs	r0, #41	; 0x29
 8000668:	f000 fc17 	bl	8000e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800066c:	2029      	movs	r0, #41	; 0x29
 800066e:	f000 fc2e 	bl	8000ece <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000672:	bf00      	nop
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	48000400 	.word	0x48000400

08000680 <main_key_status_read>:

/* USER CODE BEGIN 4 */
uint8_t main_key_status_read(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint8_t key_status = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	71fb      	strb	r3, [r7, #7]

	if(at42qt1070_callback())
 800068a:	f000 fa05 	bl	8000a98 <at42qt1070_callback>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d003      	beq.n	800069c <main_key_status_read+0x1c>
	{
		key_status = at42qt1070_key_stete_get();
 8000694:	f000 fa1c 	bl	8000ad0 <at42qt1070_key_stete_get>
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
//
//	HAL_I2C_Master_Transmit(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status_address, 1, 1000);
//
//	HAL_I2C_Master_Receive(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status, 1, 1000);

	return key_status;
 800069c:	79fb      	ldrb	r3, [r7, #7]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <main_i2c_transmit>:


HAL_StatusTypeDef main_i2c_transmit(uint16_t slave_address, uint8_t *data_buffer, uint16_t size)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	80fb      	strh	r3, [r7, #6]
 80006b4:	4613      	mov	r3, r2
 80006b6:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, slave_address, data_buffer, size, 1000);
 80006b8:	88bb      	ldrh	r3, [r7, #4]
 80006ba:	88f9      	ldrh	r1, [r7, #6]
 80006bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <main_i2c_transmit+0x2c>)
 80006c6:	f000 febd 	bl	8001444 <HAL_I2C_Master_Transmit>
 80006ca:	4603      	mov	r3, r0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000092c 	.word	0x2000092c

080006d8 <main_i2c_receive>:

HAL_StatusTypeDef main_i2c_receive(uint16_t slave_address, uint8_t *data_buffer, uint16_t size)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, slave_address, data_buffer, size, 1000);
 80006e8:	88bb      	ldrh	r3, [r7, #4]
 80006ea:	88f9      	ldrh	r1, [r7, #6]
 80006ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	683a      	ldr	r2, [r7, #0]
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <main_i2c_receive+0x2c>)
 80006f6:	f000 ff99 	bl	800162c <HAL_I2C_Master_Receive>
 80006fa:	4603      	mov	r3, r0
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000092c 	.word	0x2000092c

08000708 <main_change_pin_read>:

GPIO_PinState main_change_pin_read(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 800070c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <main_change_pin_read+0x14>)
 8000712:	f000 fdb7 	bl	8001284 <HAL_GPIO_ReadPin>
 8000716:	4603      	mov	r3, r0
}
 8000718:	4618      	mov	r0, r3
 800071a:	bd80      	pop	{r7, pc}
 800071c:	48000400 	.word	0x48000400

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000732:	f000 fae1 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40014800 	.word	0x40014800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>

0800074e <LL_AHB2_GRP1_EnableClock>:
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4313      	orrs	r3, r2
 8000764:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr

0800077e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800077e:	b480      	push	{r7}
 8000780:	b085      	sub	sp, #20
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800078c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	4313      	orrs	r3, r2
 8000794:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4013      	ands	r3, r2
 80007a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bc80      	pop	{r7}
 80007b8:	4770      	bx	lr
	...

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2238      	movs	r2, #56	; 0x38
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f005 f931 	bl	8005a44 <memset>
  if(hi2c->Instance==I2C1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <HAL_I2C_MspInit+0xa8>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d137      	bne.n	800085c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80007f4:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fa4e 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000806:	f7ff ff9d 	bl	8000744 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff9f 	bl	800074e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000810:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000814:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000822:	2304      	movs	r3, #4
 8000824:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800082a:	4619      	mov	r1, r3
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f000 fbc8 	bl	8000fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000834:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000838:	f7ff ffa1 	bl	800077e <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	201e      	movs	r0, #30
 8000842:	f000 fb2a 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000846:	201e      	movs	r0, #30
 8000848:	f000 fb41 	bl	8000ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	201f      	movs	r0, #31
 8000852:	f000 fb22 	bl	8000e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000856:	201f      	movs	r0, #31
 8000858:	f000 fb39 	bl	8000ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3758      	adds	r7, #88	; 0x58
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40005400 	.word	0x40005400

08000868 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000874:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000884:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4013      	ands	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088c:	68fb      	ldr	r3, [r7, #12]
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	; 0x30
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80008ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008b2:	f7ff ffd9 	bl	8000868 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008b6:	f107 0208 	add.w	r2, r7, #8
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f003 f807 	bl	80038d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008c6:	f002 fff3 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 80008ca:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <HAL_InitTick+0xbc>)
 80008d0:	fba2 2303 	umull	r2, r3, r2, r3
 80008d4:	0c9b      	lsrs	r3, r3, #18
 80008d6:	3b01      	subs	r3, #1
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <HAL_InitTick+0xc0>)
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <HAL_InitTick+0xc4>)
 80008de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <HAL_InitTick+0xc0>)
 80008e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008e6:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <HAL_InitTick+0xc0>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_InitTick+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_InitTick+0xc0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <HAL_InitTick+0xc0>)
 80008fc:	f003 fae8 	bl	8003ed0 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800090a:	2b00      	cmp	r3, #0
 800090c:	d11b      	bne.n	8000946 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800090e:	4812      	ldr	r0, [pc, #72]	; (8000958 <HAL_InitTick+0xc0>)
 8000910:	f003 fb3e 	bl	8003f90 <HAL_TIM_Base_Start_IT>
 8000914:	4603      	mov	r3, r0
 8000916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800091a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800091e:	2b00      	cmp	r3, #0
 8000920:	d111      	bne.n	8000946 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000922:	201d      	movs	r0, #29
 8000924:	f000 fad3 	bl	8000ece <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2b0f      	cmp	r3, #15
 800092c:	d808      	bhi.n	8000940 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 800092e:	2200      	movs	r2, #0
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	201d      	movs	r0, #29
 8000934:	f000 fab1 	bl	8000e9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000938:	4a09      	ldr	r2, [pc, #36]	; (8000960 <HAL_InitTick+0xc8>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e002      	b.n	8000946 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800094a:	4618      	mov	r0, r3
 800094c:	3730      	adds	r7, #48	; 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	431bde83 	.word	0x431bde83
 8000958:	20000980 	.word	0x20000980
 800095c:	40014800 	.word	0x40014800
 8000960:	20000004 	.word	0x20000004

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
	...

08000990 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <TIM17_IRQHandler+0x10>)
 8000996:	f003 fb47 	bl	8004028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000980 	.word	0x20000980

080009a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <I2C1_EV_IRQHandler+0x10>)
 80009aa:	f000 ff35 	bl	8001818 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000092c 	.word	0x2000092c

080009b8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <I2C1_ER_IRQHandler+0x10>)
 80009be:	f000 ff45 	bl	800184c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000092c 	.word	0x2000092c

080009cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80009d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80009d4:	f000 fc84 	bl	80012e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <at42qt1070_init>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/

/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void at42qt1070_init(void* send_function, void* receive_fucntion, void* change_state_read)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
	at42qt1070_handler.i2c_send 		= send_function;
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <at42qt1070_init+0x34>)
 80009f8:	6013      	str	r3, [r2, #0]

	at42qt1070_handler.i2c_receive	 	= receive_fucntion;
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <at42qt1070_init+0x34>)
 80009fe:	6053      	str	r3, [r2, #4]

	at42qt1070_handler.change_pin_read	= change_state_read;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <at42qt1070_init+0x34>)
 8000a04:	6093      	str	r3, [r2, #8]

	at42qt1070_handler.state.all 		= 0;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <at42qt1070_init+0x34>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	751a      	strb	r2, [r3, #20]

	at42qt1070_handler.register_address = &register_set;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <at42qt1070_init+0x34>)
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <at42qt1070_init+0x38>)
 8000a10:	611a      	str	r2, [r3, #16]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	200009cc 	.word	0x200009cc
 8000a20:	08005bd0 	.word	0x08005bd0

08000a24 <at42qt1070_key_stete_read>:
{
	return at42qt1070_handler.state.flag.unread_event;
}

bool at42qt1070_key_stete_read(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	if(at42qt1070_handler.i2c_send != NULL)
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d029      	beq.n	8000a84 <at42qt1070_key_stete_read+0x60>
	{
		at42qt1070_handler.i2c_send(AT42QT1070_SLAVE_ADDRESS,
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
									&at42qt1070_handler.register_address->at42qt1070_keystatus,
 8000a34:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a36:	6912      	ldr	r2, [r2, #16]
 8000a38:	1cd1      	adds	r1, r2, #3
		at42qt1070_handler.i2c_send(AT42QT1070_SLAVE_ADDRESS,
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2036      	movs	r0, #54	; 0x36
 8000a3e:	4798      	blx	r3
									AT42QT1070_REGISTER_WEDTH);

		at42qt1070_handler.i2c_receive(AT42QT1070_SLAVE_ADDRESS,
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	2201      	movs	r2, #1
 8000a46:	4912      	ldr	r1, [pc, #72]	; (8000a90 <at42qt1070_key_stete_read+0x6c>)
 8000a48:	2036      	movs	r0, #54	; 0x36
 8000a4a:	4798      	blx	r3
										&at42qt1070_handler.key_buffer,
										AT42QT1070_REGISTER_WEDTH);

		if(at42qt1070_handler.key_buffer)
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a4e:	7b1b      	ldrb	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d009      	beq.n	8000a68 <at42qt1070_key_stete_read+0x44>
		{
			circ_buffer_enqueue(&at42qt1070_handler.circ_buffer,
 8000a54:	2201      	movs	r2, #1
 8000a56:	490e      	ldr	r1, [pc, #56]	; (8000a90 <at42qt1070_key_stete_read+0x6c>)
 8000a58:	480e      	ldr	r0, [pc, #56]	; (8000a94 <at42qt1070_key_stete_read+0x70>)
 8000a5a:	f000 f859 	bl	8000b10 <circ_buffer_enqueue>
								&at42qt1070_handler.key_buffer,
								AT42QT1070_REGISTER_WEDTH);

			at42qt1070_handler.state.flag.unread_event  = true;
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a60:	7d13      	ldrb	r3, [r2, #20]
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	7513      	strb	r3, [r2, #20]
		}



		//Clear the buffer content
		at42qt1070_handler.key_buffer = 0;
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	731a      	strb	r2, [r3, #12]

		return at42qt1070_handler.state.flag.unread_event;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <at42qt1070_key_stete_read+0x68>)
 8000a70:	7d1b      	ldrb	r3, [r3, #20]
 8000a72:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	bf14      	ite	ne
 8000a7c:	2301      	movne	r3, #1
 8000a7e:	2300      	moveq	r3, #0
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	e000      	b.n	8000a86 <at42qt1070_key_stete_read+0x62>
	}
	return 0;
 8000a84:	2300      	movs	r3, #0

}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200009cc 	.word	0x200009cc
 8000a90:	200009d8 	.word	0x200009d8
 8000a94:	200009e1 	.word	0x200009e1

08000a98 <at42qt1070_callback>:

bool at42qt1070_callback(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
	if(at42qt1070_handler.change_pin_read != NULL)
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <at42qt1070_callback+0x34>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00d      	beq.n	8000ac2 <at42qt1070_callback+0x2a>
	{
		bool new_event = false;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]

		if(!at42qt1070_handler.change_pin_read())
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <at42qt1070_callback+0x34>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	4798      	blx	r3
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <at42qt1070_callback+0x26>
		{
			new_event = at42qt1070_key_stete_read();
 8000ab6:	f7ff ffb5 	bl	8000a24 <at42qt1070_key_stete_read>
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
		}

		return new_event;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	e000      	b.n	8000ac4 <at42qt1070_callback+0x2c>
	}
	return 0;
 8000ac2:	2300      	movs	r3, #0
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200009cc 	.word	0x200009cc

08000ad0 <at42qt1070_key_stete_get>:


uint8_t at42qt1070_key_stete_get(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

	uint8_t* key_number  = circ_buffer_dequeue(&at42qt1070_handler.circ_buffer,
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <at42qt1070_key_stete_get+0x38>)
 8000ada:	f000 f867 	bl	8000bac <circ_buffer_dequeue>
 8000ade:	6078      	str	r0, [r7, #4]
												NULL);
	//Update the unread event flag
	at42qt1070_handler.state.flag.unread_event = circ_buffer_getNumArrays(&at42qt1070_handler.circ_buffer) ? 1 : 0;
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <at42qt1070_key_stete_get+0x38>)
 8000ae2:	f000 f89b 	bl	8000c1c <circ_buffer_getNumArrays>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	bf14      	ite	ne
 8000aec:	2301      	movne	r3, #1
 8000aee:	2300      	moveq	r3, #0
 8000af0:	b2d9      	uxtb	r1, r3
 8000af2:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <at42qt1070_key_stete_get+0x3c>)
 8000af4:	7d13      	ldrb	r3, [r2, #20]
 8000af6:	f361 0341 	bfi	r3, r1, #1, #1
 8000afa:	7513      	strb	r3, [r2, #20]



	return *key_number;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	781b      	ldrb	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200009e1 	.word	0x200009e1
 8000b0c:	200009cc 	.word	0x200009cc

08000b10 <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000b24:	1c5a      	adds	r2, r3, #1
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <circ_buffer_enqueue+0x98>)
 8000b28:	fb83 1302 	smull	r1, r3, r3, r2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	1119      	asrs	r1, r3, #4
 8000b30:	17d3      	asrs	r3, r2, #31
 8000b32:	1ac9      	subs	r1, r1, r3
 8000b34:	460b      	mov	r3, r1
 8000b36:	011b      	lsls	r3, r3, #4
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	1ad1      	subs	r1, r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000b44:	4299      	cmp	r1, r3
 8000b46:	d02b      	beq.n	8000ba0 <circ_buffer_enqueue+0x90>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4613      	mov	r3, r2
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4413      	add	r3, r2
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	79fa      	ldrb	r2, [r7, #7]
 8000b5c:	68b9      	ldr	r1, [r7, #8]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f004 ff9c 	bl	8005a9c <memcpy>
	cb->elementSizes[cb->end] = size;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000b7c:	1c5a      	adds	r2, r3, #1
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <circ_buffer_enqueue+0x98>)
 8000b80:	fb83 1302 	smull	r1, r3, r3, r2
 8000b84:	4413      	add	r3, r2
 8000b86:	1119      	asrs	r1, r3, #4
 8000b88:	17d3      	asrs	r3, r2, #31
 8000b8a:	1ac9      	subs	r1, r1, r3
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	1a5b      	subs	r3, r3, r1
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	1ad1      	subs	r1, r2, r3
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8000b9e:	e000      	b.n	8000ba2 <circ_buffer_enqueue+0x92>
		return;
 8000ba0:	bf00      	nop
}
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	88888889 	.word	0x88888889

08000bac <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
	if (size)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d009      	beq.n	8000be4 <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <circ_buffer_dequeue+0x6c>)
 8000bee:	fb83 1302 	smull	r1, r3, r3, r2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	1119      	asrs	r1, r3, #4
 8000bf6:	17d3      	asrs	r3, r2, #31
 8000bf8:	1ac9      	subs	r1, r1, r3
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	1a5b      	subs	r3, r3, r1
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1ad1      	subs	r1, r2, r3
 8000c04:	b2ca      	uxtb	r2, r1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	return element;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	88888889 	.word	0x88888889

08000c1c <circ_buffer_getNumArrays>:
 * @param 	cb		:	 Pointer to the circular buffer
 *
 * @return 	Size 	:	of the next block of data to read, or 0 if the buffer is empty
 */
uint8_t circ_buffer_getNumArrays(circ_buffer_t *cb)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (cb->end >= cb->start)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d308      	bcc.n	8000c46 <circ_buffer_getNumArrays+0x2a>
	{
		return cb->end - cb->start;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	e009      	b.n	8000c5a <circ_buffer_getNumArrays+0x3e>
	}
	return BUFFER_SIZE - cb->start + cb->end;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	331e      	adds	r3, #30
 8000c58:	b2db      	uxtb	r3, r3
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f7ff feb8 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <LoopForever+0xe>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	; (8000cb0 <LoopForever+0x16>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c92:	f004 fedf 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c96:	f7ff fc09 	bl	80004ac <main>

08000c9a <LoopForever>:

LoopForever:
    b LoopForever
 8000c9a:	e7fe      	b.n	8000c9a <LoopForever>
  ldr   r0, =_estack
 8000c9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ca8:	08005be8 	.word	0x08005be8
  ldr r2, =_sbss
 8000cac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cb0:	200010dc 	.word	0x200010dc

08000cb4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f8de 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000cc8:	f002 fdde 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <HAL_Init+0x3c>)
 8000cd0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cd2:	200f      	movs	r0, #15
 8000cd4:	f7ff fde0 	bl	8000898 <HAL_InitTick>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	e001      	b.n	8000ce8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce4:	f7ff fd63 	bl	80007ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_IncTick+0x20>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a03      	ldr	r2, [pc, #12]	; (8000d18 <HAL_IncTick+0x20>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	20000008 	.word	0x20000008
 8000d18:	20000a98 	.word	0x20000a98

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b02      	ldr	r3, [pc, #8]	; (8000d2c <HAL_GetTick+0x10>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr
 8000d2c:	20000a98 	.word	0x20000a98

08000d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <__NVIC_SetPriorityGrouping+0x44>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	60d3      	str	r3, [r2, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__NVIC_GetPriorityGrouping+0x18>)
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	0a1b      	lsrs	r3, r3, #8
 8000d82:	f003 0307 	and.w	r3, r3, #7
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	db0b      	blt.n	8000dbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f003 021f 	and.w	r2, r3, #31
 8000dac:	4906      	ldr	r1, [pc, #24]	; (8000dc8 <__NVIC_EnableIRQ+0x34>)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	095b      	lsrs	r3, r3, #5
 8000db4:	2001      	movs	r0, #1
 8000db6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff4f 	bl	8000d30 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea8:	f7ff ff66 	bl	8000d78 <__NVIC_GetPriorityGrouping>
 8000eac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	68b9      	ldr	r1, [r7, #8]
 8000eb2:	6978      	ldr	r0, [r7, #20]
 8000eb4:	f7ff ffb4 	bl	8000e20 <NVIC_EncodePriority>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff83 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ec6:	bf00      	nop
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff59 	bl	8000d94 <__NVIC_EnableIRQ>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d005      	beq.n	8000f0e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2204      	movs	r2, #4
 8000f06:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e047      	b.n	8000f9e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 020e 	bic.w	r2, r2, #14
 8000f1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0201 	bic.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	f003 021c 	and.w	r2, r3, #28
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00c      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    }
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb6:	b2db      	uxtb	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e140      	b.n	8001256 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f000 8132 	beq.w	8001250 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d005      	beq.n	8001004 <HAL_GPIO_Init+0x40>
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d130      	bne.n	8001066 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800103a:	2201      	movs	r2, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	f003 0201 	and.w	r2, r3, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	2b03      	cmp	r3, #3
 8001070:	d017      	beq.n	80010a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d123      	bne.n	80010f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	08da      	lsrs	r2, r3, #3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3208      	adds	r2, #8
 80010b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	220f      	movs	r2, #15
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691a      	ldr	r2, [r3, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	6939      	ldr	r1, [r7, #16]
 80010f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	2203      	movs	r2, #3
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0203 	and.w	r2, r3, #3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 808c 	beq.w	8001250 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001138:	4a4e      	ldr	r2, [pc, #312]	; (8001274 <HAL_GPIO_Init+0x2b0>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1bc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a44      	ldr	r2, [pc, #272]	; (8001278 <HAL_GPIO_Init+0x2b4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1b8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a43      	ldr	r2, [pc, #268]	; (800127c <HAL_GPIO_Init+0x2b8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1b4>
 8001174:	2302      	movs	r3, #2
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x1be>
 8001178:	2307      	movs	r3, #7
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x1be>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x1be>
 8001180:	2300      	movs	r3, #0
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001192:	4938      	ldr	r1, [pc, #224]	; (8001274 <HAL_GPIO_Init+0x2b0>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a0:	4b37      	ldr	r3, [pc, #220]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 80011f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 8001224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001228:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <HAL_GPIO_Init+0x2bc>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa22 f303 	lsr.w	r3, r2, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	f47f aeb7 	bne.w	8000fd4 <HAL_GPIO_Init+0x10>
  }
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40010000 	.word	0x40010000
 8001278:	48000400 	.word	0x48000400
 800127c:	48000800 	.word	0x48000800
 8001280:	58000800 	.word	0x58000800

08001284 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
 80012a0:	e001      	b.n	80012a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr

080012b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012c2:	787b      	ldrb	r3, [r7, #1]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c8:	887a      	ldrh	r2, [r7, #2]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012ce:	e002      	b.n	80012d6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012d0:	887a      	ldrh	r2, [r7, #2]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012f6:	4a05      	ldr	r2, [pc, #20]	; (800130c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f806 	bl	8001310 <HAL_GPIO_EXTI_Callback>
  }
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	58000800 	.word	0x58000800

08001310 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e081      	b.n	800143a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fa36 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0201 	bic.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e006      	b.n	80013ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d104      	bne.n	80013be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	69d9      	ldr	r1, [r3, #28]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f042 0201 	orr.w	r2, r2, #1
 800141a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2220      	movs	r2, #32
 8001426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	817b      	strh	r3, [r7, #10]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b20      	cmp	r3, #32
 8001462:	f040 80da 	bne.w	800161a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800146c:	2b01      	cmp	r3, #1
 800146e:	d101      	bne.n	8001474 <HAL_I2C_Master_Transmit+0x30>
 8001470:	2302      	movs	r3, #2
 8001472:	e0d3      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800147c:	f7ff fc4e 	bl	8000d1c <HAL_GetTick>
 8001480:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2319      	movs	r3, #25
 8001488:	2201      	movs	r2, #1
 800148a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148e:	68f8      	ldr	r0, [r7, #12]
 8001490:	f000 fedc 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0be      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2221      	movs	r2, #33	; 0x21
 80014a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2210      	movs	r2, #16
 80014aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	893a      	ldrh	r2, [r7, #8]
 80014be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2bff      	cmp	r3, #255	; 0xff
 80014ce:	d90e      	bls.n	80014ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	22ff      	movs	r2, #255	; 0xff
 80014d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	8979      	ldrh	r1, [r7, #10]
 80014de:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_I2C_Master_Transmit+0x1e0>)
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f001 f8c6 	bl	8002678 <I2C_TransferConfig>
 80014ec:	e06c      	b.n	80015c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	8979      	ldrh	r1, [r7, #10]
 8001500:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_I2C_Master_Transmit+0x1e0>)
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 f8b5 	bl	8002678 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800150e:	e05b      	b.n	80015c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	6a39      	ldr	r1, [r7, #32]
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fed9 	bl	80022cc <I2C_WaitOnTXISFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e07b      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	781a      	ldrb	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	3b01      	subs	r3, #1
 8001542:	b29a      	uxth	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d034      	beq.n	80015c8 <HAL_I2C_Master_Transmit+0x184>
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d130      	bne.n	80015c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	2200      	movs	r2, #0
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fe6b 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e04d      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001584:	b29b      	uxth	r3, r3
 8001586:	2bff      	cmp	r3, #255	; 0xff
 8001588:	d90e      	bls.n	80015a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f001 f869 	bl	8002678 <I2C_TransferConfig>
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	8979      	ldrh	r1, [r7, #10]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 f858 	bl	8002678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d19e      	bne.n	8001510 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	6a39      	ldr	r1, [r7, #32]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 feb8 	bl	800234c <I2C_WaitOnSTOPFlagUntilTimeout>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e01a      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2220      	movs	r2, #32
 80015ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_I2C_Master_Transmit+0x1e4>)
 80015fa:	400b      	ands	r3, r1
 80015fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2220      	movs	r2, #32
 8001602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800161a:	2302      	movs	r3, #2
  }
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	80002000 	.word	0x80002000
 8001628:	fe00e800 	.word	0xfe00e800

0800162c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	461a      	mov	r2, r3
 8001638:	460b      	mov	r3, r1
 800163a:	817b      	strh	r3, [r7, #10]
 800163c:	4613      	mov	r3, r2
 800163e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b20      	cmp	r3, #32
 800164a:	f040 80db 	bne.w	8001804 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_I2C_Master_Receive+0x30>
 8001658:	2302      	movs	r3, #2
 800165a:	e0d4      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001664:	f7ff fb5a 	bl	8000d1c <HAL_GetTick>
 8001668:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2319      	movs	r3, #25
 8001670:	2201      	movs	r2, #1
 8001672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fde8 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0bf      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2222      	movs	r2, #34	; 0x22
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2210      	movs	r2, #16
 8001692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	893a      	ldrh	r2, [r7, #8]
 80016a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2bff      	cmp	r3, #255	; 0xff
 80016b6:	d90e      	bls.n	80016d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	8979      	ldrh	r1, [r7, #10]
 80016c6:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_I2C_Master_Receive+0x1e4>)
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 ffd2 	bl	8002678 <I2C_TransferConfig>
 80016d4:	e06d      	b.n	80017b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	8979      	ldrh	r1, [r7, #10]
 80016e8:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_I2C_Master_Receive+0x1e4>)
 80016ea:	9300      	str	r3, [sp, #0]
 80016ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 ffc1 	bl	8002678 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80016f6:	e05c      	b.n	80017b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	6a39      	ldr	r1, [r7, #32]
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fe61 	bl	80023c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e07c      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	3b01      	subs	r3, #1
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001742:	b29b      	uxth	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d034      	beq.n	80017b2 <HAL_I2C_Master_Receive+0x186>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	2b00      	cmp	r3, #0
 800174e:	d130      	bne.n	80017b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	2200      	movs	r2, #0
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 fd76 	bl	800224c <I2C_WaitOnFlagUntilTimeout>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e04d      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800176e:	b29b      	uxth	r3, r3
 8001770:	2bff      	cmp	r3, #255	; 0xff
 8001772:	d90e      	bls.n	8001792 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	22ff      	movs	r2, #255	; 0xff
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	b2da      	uxtb	r2, r3
 8001780:	8979      	ldrh	r1, [r7, #10]
 8001782:	2300      	movs	r3, #0
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 ff74 	bl	8002678 <I2C_TransferConfig>
 8001790:	e00f      	b.n	80017b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001796:	b29a      	uxth	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	8979      	ldrh	r1, [r7, #10]
 80017a4:	2300      	movs	r3, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 ff63 	bl	8002678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d19d      	bne.n	80016f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fdc3 	bl	800234c <I2C_WaitOnSTOPFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e01a      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2220      	movs	r2, #32
 80017d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_I2C_Master_Receive+0x1e8>)
 80017e4:	400b      	ands	r3, r1
 80017e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	e000      	b.n	8001806 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001804:	2302      	movs	r3, #2
  }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	80002400 	.word	0x80002400
 8001814:	fe00e800 	.word	0xfe00e800

08001818 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	68ba      	ldr	r2, [r7, #8]
 800183e:	68f9      	ldr	r1, [r7, #12]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	4798      	blx	r3
  }
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00f      	beq.n	800188e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00a      	beq.n	800188e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800188c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00f      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00a      	beq.n	80018b8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f043 0208 	orr.w	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00f      	beq.n	80018e2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00a      	beq.n	80018e2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f043 0202 	orr.w	r2, r3, #2
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 030b 	and.w	r3, r3, #11
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80018f2:	68f9      	ldr	r1, [r7, #12]
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fb71 	bl	8001fdc <I2C_ITError>
  }
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	460b      	mov	r3, r1
 8001930:	70fb      	strb	r3, [r7, #3]
 8001932:	4613      	mov	r3, r2
 8001934:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <I2C_Slave_ISR_IT+0x24>
 8001996:	2302      	movs	r3, #2
 8001998:	e0e1      	b.n	8001b5e <I2C_Slave_ISR_IT+0x1e8>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f9b5 	bl	8001d28 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d04b      	beq.n	8001a60 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d046      	beq.n	8001a60 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d128      	bne.n	8001a2e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b28      	cmp	r3, #40	; 0x28
 80019e6:	d108      	bne.n	80019fa <I2C_Slave_ISR_IT+0x84>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ee:	d104      	bne.n	80019fa <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019f0:	6939      	ldr	r1, [r7, #16]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 fa9e 	bl	8001f34 <I2C_ITListenCplt>
 80019f8:	e031      	b.n	8001a5e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b29      	cmp	r3, #41	; 0x29
 8001a04:	d10e      	bne.n	8001a24 <I2C_Slave_ISR_IT+0xae>
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a0c:	d00a      	beq.n	8001a24 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fbd7 	bl	80021ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f926 	bl	8001c6e <I2C_ITSlaveSeqCplt>
 8001a22:	e01c      	b.n	8001a5e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a2c:	e08f      	b.n	8001b4e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2210      	movs	r2, #16
 8001a34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	f043 0204 	orr.w	r2, r3, #4
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <I2C_Slave_ISR_IT+0xda>
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4e:	d17e      	bne.n	8001b4e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	4619      	mov	r1, r3
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 fac0 	bl	8001fdc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a5c:	e077      	b.n	8001b4e <I2C_Slave_ISR_IT+0x1d8>
 8001a5e:	e076      	b.n	8001b4e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02f      	beq.n	8001aca <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d02a      	beq.n	8001aca <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d018      	beq.n	8001ab0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d14b      	bne.n	8001b52 <I2C_Slave_ISR_IT+0x1dc>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ac0:	d047      	beq.n	8001b52 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f8d3 	bl	8001c6e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ac8:	e043      	b.n	8001b52 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ade:	6939      	ldr	r1, [r7, #16]
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 f840 	bl	8001b66 <I2C_ITAddrCplt>
 8001ae6:	e035      	b.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d030      	beq.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02b      	beq.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d018      	beq.n	8001b38 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b36:	e00d      	b.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3e:	d002      	beq.n	8001b46 <I2C_Slave_ISR_IT+0x1d0>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f891 	bl	8001c6e <I2C_ITSlaveSeqCplt>
 8001b4c:	e002      	b.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001b4e:	bf00      	nop
 8001b50:	e000      	b.n	8001b54 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001b52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b7c:	2b28      	cmp	r3, #40	; 0x28
 8001b7e:	d16a      	bne.n	8001c56 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0c1b      	lsrs	r3, r3, #16
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	0c1b      	lsrs	r3, r3, #16
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001b9e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001bba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d138      	bne.n	8001c36 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001bc4:	897b      	ldrh	r3, [r7, #10]
 8001bc6:	09db      	lsrs	r3, r3, #7
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	89bb      	ldrh	r3, [r7, #12]
 8001bcc:	4053      	eors	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f003 0306 	and.w	r3, r3, #6
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d11c      	bne.n	8001c12 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001bd8:	897b      	ldrh	r3, [r7, #10]
 8001bda:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d13b      	bne.n	8001c66 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c04:	89ba      	ldrh	r2, [r7, #12]
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fe8b 	bl	8001926 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c10:	e029      	b.n	8001c66 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c12:	893b      	ldrh	r3, [r7, #8]
 8001c14:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fd5c 	bl	80026d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c28:	89ba      	ldrh	r2, [r7, #12]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fe79 	bl	8001926 <HAL_I2C_AddrCallback>
}
 8001c34:	e017      	b.n	8001c66 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fd4c 	bl	80026d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c48:	89ba      	ldrh	r2, [r7, #12]
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fe69 	bl	8001926 <HAL_I2C_AddrCallback>
}
 8001c54:	e007      	b.n	8001c66 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d008      	beq.n	8001ca2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e00c      	b.n	8001cbc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d007      	beq.n	8001cbc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b29      	cmp	r3, #41	; 0x29
 8001cc6:	d112      	bne.n	8001cee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2228      	movs	r2, #40	; 0x28
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2221      	movs	r2, #33	; 0x21
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fcfd 	bl	80026d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe0b 	bl	8001902 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001cec:	e017      	b.n	8001d1e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8001cf8:	d111      	bne.n	8001d1e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2228      	movs	r2, #40	; 0x28
 8001cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2222      	movs	r2, #34	; 0x22
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d08:	2102      	movs	r1, #2
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fce4 	bl	80026d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff fdfb 	bl	8001914 <HAL_I2C_SlaveRxCpltCallback>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d44:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	2b21      	cmp	r3, #33	; 0x21
 8001d52:	d002      	beq.n	8001d5a <I2C_ITSlaveCplt+0x32>
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b29      	cmp	r3, #41	; 0x29
 8001d58:	d108      	bne.n	8001d6c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001d5a:	f248 0101 	movw	r1, #32769	; 0x8001
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fcba 	bl	80026d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2221      	movs	r2, #33	; 0x21
 8001d68:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6a:	e00d      	b.n	8001d88 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b22      	cmp	r3, #34	; 0x22
 8001d70:	d002      	beq.n	8001d78 <I2C_ITSlaveCplt+0x50>
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b2a      	cmp	r3, #42	; 0x2a
 8001d76:	d107      	bne.n	8001d88 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001d78:	f248 0102 	movw	r1, #32770	; 0x8002
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fcab 	bl	80026d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2222      	movs	r2, #34	; 0x22
 8001d86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <I2C_ITSlaveCplt+0x204>)
 8001da4:	400b      	ands	r3, r1
 8001da6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 fa0e 	bl	80021ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d013      	beq.n	8001de0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d01f      	beq.n	8001e10 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dde:	e017      	b.n	8001e10 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d012      	beq.n	8001e10 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d020      	beq.n	8001e5c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00c      	beq.n	8001e5c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	3b01      	subs	r3, #1
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	f043 0204 	orr.w	r2, r3, #4
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f8a4 	bl	8001fdc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b28      	cmp	r3, #40	; 0x28
 8001e9e:	d141      	bne.n	8001f24 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ea0:	6979      	ldr	r1, [r7, #20]
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f846 	bl	8001f34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ea8:	e03c      	b.n	8001f24 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eb2:	d014      	beq.n	8001ede <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff feda 	bl	8001c6e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <I2C_ITSlaveCplt+0x208>)
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fd32 	bl	8001940 <HAL_I2C_ListenCpltCallback>
}
 8001edc:	e022      	b.n	8001f24 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	d10e      	bne.n	8001f08 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fd07 	bl	8001914 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f06:	e00d      	b.n	8001f24 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fcef 	bl	8001902 <HAL_I2C_SlaveTxCpltCallback>
}
 8001f24:	bf00      	nop
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	fe00e800 	.word	0xfe00e800
 8001f30:	ffff0000 	.word	0xffff0000

08001f34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <I2C_ITListenCplt+0xa4>)
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d022      	beq.n	8001fb0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001fb0:	f248 0103 	movw	r1, #32771	; 0x8003
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fb8f 	bl	80026d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fcb8 	bl	8001940 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	ffff0000 	.word	0xffff0000

08001fdc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a5d      	ldr	r2, [pc, #372]	; (8002170 <I2C_ITError+0x194>)
 8001ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	2b28      	cmp	r3, #40	; 0x28
 8002012:	d005      	beq.n	8002020 <I2C_ITError+0x44>
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	2b29      	cmp	r3, #41	; 0x29
 8002018:	d002      	beq.n	8002020 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b2a      	cmp	r3, #42	; 0x2a
 800201e:	d10b      	bne.n	8002038 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002020:	2103      	movs	r1, #3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fb58 	bl	80026d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2228      	movs	r2, #40	; 0x28
 800202c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a50      	ldr	r2, [pc, #320]	; (8002174 <I2C_ITError+0x198>)
 8002034:	635a      	str	r2, [r3, #52]	; 0x34
 8002036:	e011      	b.n	800205c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002038:	f248 0103 	movw	r1, #32771	; 0x8003
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 fb4b 	bl	80026d8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b60      	cmp	r3, #96	; 0x60
 800204c:	d003      	beq.n	8002056 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	2b00      	cmp	r3, #0
 8002068:	d039      	beq.n	80020de <I2C_ITError+0x102>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	2b11      	cmp	r3, #17
 800206e:	d002      	beq.n	8002076 <I2C_ITError+0x9a>
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b21      	cmp	r3, #33	; 0x21
 8002074:	d133      	bne.n	80020de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002084:	d107      	bne.n	8002096 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002094:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ff84 	bl	8000fa8 <HAL_DMA_GetState>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d017      	beq.n	80020d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <I2C_ITError+0x19c>)
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe ff15 	bl	8000eea <HAL_DMA_Abort_IT>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d04d      	beq.n	8002162 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020d0:	4610      	mov	r0, r2
 80020d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020d4:	e045      	b.n	8002162 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f850 	bl	800217c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80020dc:	e041      	b.n	8002162 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d039      	beq.n	800215a <I2C_ITError+0x17e>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d002      	beq.n	80020f2 <I2C_ITError+0x116>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b22      	cmp	r3, #34	; 0x22
 80020f0:	d133      	bne.n	800215a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002100:	d107      	bne.n	8002112 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002110:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff46 	bl	8000fa8 <HAL_DMA_GetState>
 800211c:	4603      	mov	r3, r0
 800211e:	2b01      	cmp	r3, #1
 8002120:	d017      	beq.n	8002152 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	4a14      	ldr	r2, [pc, #80]	; (8002178 <I2C_ITError+0x19c>)
 8002128:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fed7 	bl	8000eea <HAL_DMA_Abort_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d011      	beq.n	8002166 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800214c:	4610      	mov	r0, r2
 800214e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002150:	e009      	b.n	8002166 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f812 	bl	800217c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002158:	e005      	b.n	8002166 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f80e 	bl	800217c <I2C_TreatErrorCallback>
  }
}
 8002160:	e002      	b.n	8002168 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002166:	bf00      	nop
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	ffff0000 	.word	0xffff0000
 8002174:	08001977 	.word	0x08001977
 8002178:	08002211 	.word	0x08002211

0800217c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b60      	cmp	r3, #96	; 0x60
 800218e:	d10e      	bne.n	80021ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fbdc 	bl	8001964 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80021ac:	e009      	b.n	80021c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fbc8 	bl	8001952 <HAL_I2C_ErrorCallback>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d103      	bne.n	80021e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d007      	beq.n	8002206 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	619a      	str	r2, [r3, #24]
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	2200      	movs	r2, #0
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2200      	movs	r2, #0
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff ff9c 	bl	800217c <I2C_TreatErrorCallback>
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800225c:	e022      	b.n	80022a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d01e      	beq.n	80022a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002266:	f7fe fd59 	bl	8000d1c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d113      	bne.n	80022a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2220      	movs	r2, #32
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e00f      	b.n	80022c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4013      	ands	r3, r2
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d0cd      	beq.n	800225e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d8:	e02c      	b.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8ea 	bl	80024b8 <I2C_IsErrorOccurred>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e02a      	b.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f4:	d01e      	beq.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f6:	f7fe fd11 	bl	8000d1c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	429a      	cmp	r2, r3
 8002304:	d302      	bcc.n	800230c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d113      	bne.n	8002334 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0220 	orr.w	r2, r3, #32
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e007      	b.n	8002344 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b02      	cmp	r3, #2
 8002340:	d1cb      	bne.n	80022da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002358:	e028      	b.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f8aa 	bl	80024b8 <I2C_IsErrorOccurred>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e026      	b.n	80023bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7fe fcd5 	bl	8000d1c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d113      	bne.n	80023ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0320 	and.w	r3, r3, #32
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d1cf      	bne.n	800235a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023d0:	e064      	b.n	800249c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f86e 	bl	80024b8 <I2C_IsErrorOccurred>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e062      	b.n	80024ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0320 	and.w	r3, r3, #32
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d138      	bne.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d105      	bne.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	e04e      	b.n	80024ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d107      	bne.n	800242c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2204      	movs	r2, #4
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
 800242a:	e002      	b.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002446:	400b      	ands	r3, r1
 8002448:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e022      	b.n	80024ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7fe fc59 	bl	8000d1c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10f      	bne.n	800249c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0220 	orr.w	r2, r3, #32
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2220      	movs	r2, #32
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e007      	b.n	80024ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d193      	bne.n	80023d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	fe00e800 	.word	0xfe00e800

080024b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d068      	beq.n	80025b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2210      	movs	r2, #16
 80024ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ec:	e049      	b.n	8002582 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f4:	d045      	beq.n	8002582 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024f6:	f7fe fc11 	bl	8000d1c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	d302      	bcc.n	800250c <I2C_IsErrorOccurred+0x54>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d13a      	bne.n	8002582 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800251e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800252a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252e:	d121      	bne.n	8002574 <I2C_IsErrorOccurred+0xbc>
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002536:	d01d      	beq.n	8002574 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b20      	cmp	r3, #32
 800253c:	d01a      	beq.n	8002574 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800254e:	f7fe fbe5 	bl	8000d1c <HAL_GetTick>
 8002552:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002554:	e00e      	b.n	8002574 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002556:	f7fe fbe1 	bl	8000d1c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b19      	cmp	r3, #25
 8002562:	d907      	bls.n	8002574 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f043 0320 	orr.w	r3, r3, #32
 800256a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002572:	e006      	b.n	8002582 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b20      	cmp	r3, #32
 8002580:	d1e9      	bne.n	8002556 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b20      	cmp	r3, #32
 800258e:	d003      	beq.n	8002598 <I2C_IsErrorOccurred+0xe0>
 8002590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0aa      	beq.n	80024ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800259c:	2b00      	cmp	r3, #0
 800259e:	d103      	bne.n	80025a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2220      	movs	r2, #32
 80025a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f043 0304 	orr.w	r3, r3, #4
 80025ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01c      	beq.n	8002666 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fdcc 	bl	80021ca <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <I2C_IsErrorOccurred+0x1bc>)
 800263e:	400b      	ands	r3, r1
 8002640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2220      	movs	r2, #32
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800266a:	4618      	mov	r0, r3
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	fe00e800 	.word	0xfe00e800

08002678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	817b      	strh	r3, [r7, #10]
 8002686:	4613      	mov	r3, r2
 8002688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800268a:	897b      	ldrh	r3, [r7, #10]
 800268c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002690:	7a7b      	ldrb	r3, [r7, #9]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002698:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	0d5b      	lsrs	r3, r3, #21
 80026b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <I2C_TransferConfig+0x5c>)
 80026b8:	430b      	orrs	r3, r1
 80026ba:	43db      	mvns	r3, r3
 80026bc:	ea02 0103 	and.w	r1, r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	03ff63ff 	.word	0x03ff63ff

080026d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00f      	beq.n	8002712 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80026f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002706:	2b28      	cmp	r3, #40	; 0x28
 8002708:	d003      	beq.n	8002712 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002710:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00f      	beq.n	800273c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002722:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002730:	2b28      	cmp	r3, #40	; 0x28
 8002732:	d003      	beq.n	800273c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800273a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800273c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002740:	2b00      	cmp	r3, #0
 8002742:	da03      	bge.n	800274c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800274a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	2b10      	cmp	r3, #16
 8002750:	d103      	bne.n	800275a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	2b20      	cmp	r3, #32
 800275e:	d103      	bne.n	8002768 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f043 0320 	orr.w	r3, r3, #32
 8002766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002768:	887b      	ldrh	r3, [r7, #2]
 800276a:	2b40      	cmp	r3, #64	; 0x40
 800276c:	d103      	bne.n	8002776 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002774:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d138      	bne.n	800281a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e032      	b.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2224      	movs	r2, #36	; 0x24
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	d139      	bne.n	80028b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002846:	2302      	movs	r3, #2
 8002848:	e033      	b.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2224      	movs	r2, #36	; 0x24
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002878:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4313      	orrs	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	e000      	b.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b0:	2302      	movs	r3, #2
  }
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80028c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	58000400 	.word	0x58000400

080028d8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_PWREx_GetVoltageRange+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	58000400 	.word	0x58000400

080028f0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002900:	d101      	bne.n	8002906 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	58000400 	.word	0x58000400

08002914 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800293e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800295e:	d101      	bne.n	8002964 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029b8:	d101      	bne.n	80029be <LL_RCC_HSE_IsReady+0x18>
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <LL_RCC_HSE_IsReady+0x1a>
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d101      	bne.n	8002a18 <LL_RCC_HSI_IsReady+0x18>
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <LL_RCC_HSI_IsReady+0x1a>
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d101      	bne.n	8002a62 <LL_RCC_LSE_IsReady+0x18>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <LL_RCC_LSE_IsReady+0x1a>
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d101      	bne.n	8002ac4 <LL_RCC_LSI_IsReady+0x18>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <LL_RCC_LSI_IsReady+0x1a>
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6013      	str	r3, [r2, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d101      	bne.n	8002b1c <LL_RCC_MSI_IsReady+0x16>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <LL_RCC_MSI_IsReady+0x18>
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d101      	bne.n	8002b3c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 030c 	and.w	r3, r3, #12
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	608b      	str	r3, [r1, #8]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d06:	d101      	bne.n	8002d0c <LL_RCC_PLL_IsReady+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_RCC_PLL_IsReady+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0303 	and.w	r3, r3, #3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d101      	bne.n	8002d88 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e000      	b.n	8002d8a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d101      	bne.n	8002dac <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002dc8:	d101      	bne.n	8002dce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dea:	d101      	bne.n	8002df0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e36f      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e0e:	f7ff fed8 	bl	8002bc2 <LL_RCC_GetSysClkSource>
 8002e12:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e14:	f7ff ffa1 	bl	8002d5a <LL_RCC_PLL_GetMainSource>
 8002e18:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80c4 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_RCC_OscConfig+0x3e>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d176      	bne.n	8002f22 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d173      	bne.n	8002f22 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e353      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x68>
 8002e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e62:	e006      	b.n	8002e72 <HAL_RCC_OscConfig+0x76>
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d222      	bcs.n	8002ebc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fd68 	bl	8003950 <RCC_SetFlashLatencyFromMSIRange>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e331      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fe5d 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>
 8002eba:	e021      	b.n	8002f00 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fe44 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fd2d 	bl	8003950 <RCC_SetFlashLatencyFromMSIRange>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e2f6      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f00:	f000 fcc2 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4aa7      	ldr	r2, [pc, #668]	; (80031a4 <HAL_RCC_OscConfig+0x3a8>)
 8002f08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002f0a:	4ba7      	ldr	r3, [pc, #668]	; (80031a8 <HAL_RCC_OscConfig+0x3ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fcc2 	bl	8000898 <HAL_InitTick>
 8002f14:	4603      	mov	r3, r0
 8002f16:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002f18:	7cfb      	ldrb	r3, [r7, #19]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d047      	beq.n	8002fae <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	e2e5      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f2a:	f7ff fdd0 	bl	8002ace <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2e:	f7fd fef5 	bl	8000d1c <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f36:	f7fd fef1 	bl	8000d1c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e2d2      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002f48:	f7ff fddd 	bl	8002b06 <LL_RCC_MSI_IsReady>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f1      	beq.n	8002f36 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fdf9 	bl	8002b74 <LL_RCC_MSI_SetCalibTrimming>
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f84:	f7ff fdb1 	bl	8002aea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f88:	f7fd fec8 	bl	8000d1c <HAL_GetTick>
 8002f8c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f90:	f7fd fec4 	bl	8000d1c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e2a5      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002fa2:	f7ff fdb0 	bl	8002b06 <LL_RCC_MSI_IsReady>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f1      	bne.n	8002f90 <HAL_RCC_OscConfig+0x194>
 8002fac:	e000      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fae:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d058      	beq.n	800306e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x1d2>
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d108      	bne.n	8002fda <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d105      	bne.n	8002fda <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d14b      	bne.n	800306e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e289      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff8:	d102      	bne.n	8003000 <HAL_RCC_OscConfig+0x204>
 8002ffa:	f7ff fcb8 	bl	800296e <LL_RCC_HSE_Enable>
 8002ffe:	e00d      	b.n	800301c <HAL_RCC_OscConfig+0x220>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003008:	d104      	bne.n	8003014 <HAL_RCC_OscConfig+0x218>
 800300a:	f7ff fc83 	bl	8002914 <LL_RCC_HSE_EnableTcxo>
 800300e:	f7ff fcae 	bl	800296e <LL_RCC_HSE_Enable>
 8003012:	e003      	b.n	800301c <HAL_RCC_OscConfig+0x220>
 8003014:	f7ff fcb9 	bl	800298a <LL_RCC_HSE_Disable>
 8003018:	f7ff fc8a 	bl	8002930 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d012      	beq.n	800304a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fd fe7a 	bl	8000d1c <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fd fe76 	bl	8000d1c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e257      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800303e:	f7ff fcb2 	bl	80029a6 <LL_RCC_HSE_IsReady>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f1      	beq.n	800302c <HAL_RCC_OscConfig+0x230>
 8003048:	e011      	b.n	800306e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fd fe67 	bl	8000d1c <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003052:	f7fd fe63 	bl	8000d1c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b64      	cmp	r3, #100	; 0x64
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e244      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003064:	f7ff fc9f 	bl	80029a6 <LL_RCC_HSE_IsReady>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f1      	bne.n	8003052 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d046      	beq.n	8003108 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x290>
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	2b0c      	cmp	r3, #12
 8003084:	d10e      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e22a      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fcc0 	bl	8002a22 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80030a2:	e031      	b.n	8003108 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d019      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ac:	f7ff fc8c 	bl	80029c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd fe34 	bl	8000d1c <HAL_GetTick>
 80030b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd fe30 	bl	8000d1c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e211      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80030ca:	f7ff fc99 	bl	8002a00 <LL_RCC_HSI_IsReady>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f1      	beq.n	80030b8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fca2 	bl	8002a22 <LL_RCC_HSI_SetCalibTrimming>
 80030de:	e013      	b.n	8003108 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e0:	f7ff fc80 	bl	80029e4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd fe1a 	bl	8000d1c <HAL_GetTick>
 80030e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fd fe16 	bl	8000d1c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1f7      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80030fe:	f7ff fc7f 	bl	8002a00 <LL_RCC_HSI_IsReady>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f1      	bne.n	80030ec <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d06e      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d056      	beq.n	80031ca <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003124:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69da      	ldr	r2, [r3, #28]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	429a      	cmp	r2, r3
 8003132:	d031      	beq.n	8003198 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e1d0      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003156:	f7ff fc99 	bl	8002a8c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800315a:	f7fd fddf 	bl	8000d1c <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003162:	f7fd fddb 	bl	8000d1c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b11      	cmp	r3, #17
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1bc      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003174:	f7ff fc9a 	bl	8002aac <LL_RCC_LSI_IsReady>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f1      	bne.n	8003162 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003186:	f023 0210 	bic.w	r2, r3, #16
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	f7ff fc68 	bl	8002a6c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319c:	f7fd fdbe 	bl	8000d1c <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80031a2:	e00c      	b.n	80031be <HAL_RCC_OscConfig+0x3c2>
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fd fdb6 	bl	8000d1c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b11      	cmp	r3, #17
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e197      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80031be:	f7ff fc75 	bl	8002aac <LL_RCC_LSI_IsReady>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f1      	beq.n	80031ac <HAL_RCC_OscConfig+0x3b0>
 80031c8:	e013      	b.n	80031f2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ca:	f7ff fc5f 	bl	8002a8c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fd fda5 	bl	8000d1c <HAL_GetTick>
 80031d2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fd fda1 	bl	8000d1c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b11      	cmp	r3, #17
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e182      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80031e8:	f7ff fc60 	bl	8002aac <LL_RCC_LSI_IsReady>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f1      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80d8 	beq.w	80033b0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003200:	f7ff fb76 	bl	80028f0 <LL_PWR_IsEnabledBkUpAccess>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800320a:	f7ff fb57 	bl	80028bc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fd fd85 	bl	8000d1c <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fd fd81 	bl	8000d1c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e162      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003228:	f7ff fb62 	bl	80028f0 <LL_PWR_IsEnabledBkUpAccess>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f1      	beq.n	8003216 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d07b      	beq.n	8003332 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2b85      	cmp	r3, #133	; 0x85
 8003240:	d003      	beq.n	800324a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	2b05      	cmp	r3, #5
 8003248:	d109      	bne.n	800325e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800324a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003252:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325e:	f7fd fd5d 	bl	8000d1c <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fd fd4f 	bl	8000d1c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e12e      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003290:	f7ff fbdb 	bl	8002a4a <LL_RCC_LSE_IsReady>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0ef      	beq.n	800327a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b81      	cmp	r3, #129	; 0x81
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	2b85      	cmp	r3, #133	; 0x85
 80032a8:	d121      	bne.n	80032ee <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd fd37 	bl	8000d1c <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fd fd29 	bl	8000d1c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e108      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ec      	beq.n	80032c6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80032ec:	e060      	b.n	80033b0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd fd15 	bl	8000d1c <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fd fd07 	bl	8000d1c <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0e6      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ec      	bne.n	800330a <HAL_RCC_OscConfig+0x50e>
 8003330:	e03e      	b.n	80033b0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fd fcf3 	bl	8000d1c <HAL_GetTick>
 8003336:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd fce5 	bl	8000d1c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0c4      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ec      	bne.n	800334e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003374:	f7fd fcd2 	bl	8000d1c <HAL_GetTick>
 8003378:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fd fcc4 	bl	8000d1c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0a3      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033a6:	f7ff fb50 	bl	8002a4a <LL_RCC_LSE_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1ef      	bne.n	8003390 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8099 	beq.w	80034ec <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b0c      	cmp	r3, #12
 80033be:	d06c      	beq.n	800349a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d14b      	bne.n	8003460 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	f7ff fc86 	bl	8002cd8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fd fca6 	bl	8000d1c <HAL_GetTick>
 80033d0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d4:	f7fd fca2 	bl	8000d1c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b0a      	cmp	r3, #10
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e083      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033e6:	f7ff fc85 	bl	8002cf4 <LL_RCC_PLL_IsReady>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f1      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	4b40      	ldr	r3, [pc, #256]	; (80034f8 <HAL_RCC_OscConfig+0x6fc>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003402:	4311      	orrs	r1, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003408:	0212      	lsls	r2, r2, #8
 800340a:	4311      	orrs	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800341c:	430a      	orrs	r2, r1
 800341e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003422:	4313      	orrs	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003426:	f7ff fc49 	bl	8002cbc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800342a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343a:	f7fd fc6f 	bl	8000d1c <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003442:	f7fd fc6b 	bl	8000d1c <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b0a      	cmp	r3, #10
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e04c      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003454:	f7ff fc4e 	bl	8002cf4 <LL_RCC_PLL_IsReady>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f1      	beq.n	8003442 <HAL_RCC_OscConfig+0x646>
 800345e:	e045      	b.n	80034ec <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	f7ff fc3a 	bl	8002cd8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7fd fc5a 	bl	8000d1c <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f7fd fc56 	bl	8000d1c <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b0a      	cmp	r3, #10
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e037      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800347e:	f7ff fc39 	bl	8002cf4 <LL_RCC_PLL_IsReady>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f1      	bne.n	800346c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_OscConfig+0x700>)
 8003494:	4013      	ands	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
 8003498:	e028      	b.n	80034ec <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e023      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d115      	bne.n	80034e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10e      	bne.n	80034e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d106      	bne.n	80034e8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	11c1808c 	.word	0x11c1808c
 80034fc:	eefefffc 	.word	0xeefefffc

08003500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e10f      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003514:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d91b      	bls.n	800355a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003522:	4b86      	ldr	r3, [pc, #536]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 0207 	bic.w	r2, r3, #7
 800352a:	4984      	ldr	r1, [pc, #528]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003532:	f7fd fbf3 	bl	8000d1c <HAL_GetTick>
 8003536:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003538:	e008      	b.n	800354c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800353a:	f7fd fbef 	bl	8000d1c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0f3      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354c:	4b7b      	ldr	r3, [pc, #492]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fb34 	bl	8002bd8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003570:	f7fd fbd4 	bl	8000d1c <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003578:	f7fd fbd0 	bl	8000d1c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0d4      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800358a:	f7ff fbf1 	bl	8002d70 <LL_RCC_IsActiveFlag_HPRE>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f1      	beq.n	8003578 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d016      	beq.n	80035ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fb2a 	bl	8002bfe <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035aa:	f7fd fbb7 	bl	8000d1c <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035b2:	f7fd fbb3 	bl	8000d1c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e0b7      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80035c4:	f7ff fbe5 	bl	8002d92 <LL_RCC_IsActiveFlag_SHDHPRE>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f1      	beq.n	80035b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fb23 	bl	8002c2a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80035e4:	f7fd fb9a 	bl	8000d1c <HAL_GetTick>
 80035e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80035ec:	f7fd fb96 	bl	8000d1c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e09a      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80035fe:	f7ff fbda 	bl	8002db6 <LL_RCC_IsActiveFlag_PPRE1>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f1      	beq.n	80035ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b00      	cmp	r3, #0
 8003612:	d017      	beq.n	8003644 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff fb18 	bl	8002c50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003620:	f7fd fb7c 	bl	8000d1c <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003628:	f7fd fb78 	bl	8000d1c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e07c      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800363a:	f7ff fbcd 	bl	8002dd8 <LL_RCC_IsActiveFlag_PPRE2>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f1      	beq.n	8003628 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d043      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d106      	bne.n	8003666 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003658:	f7ff f9a5 	bl	80029a6 <LL_RCC_HSE_IsReady>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11e      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e066      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d106      	bne.n	800367c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800366e:	f7ff fb41 	bl	8002cf4 <LL_RCC_PLL_IsReady>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d113      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e05b      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003684:	f7ff fa3f 	bl	8002b06 <LL_RCC_MSI_IsReady>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e050      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003692:	f7ff f9b5 	bl	8002a00 <LL_RCC_HSI_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e049      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fa79 	bl	8002b9c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036aa:	f7fd fb37 	bl	8000d1c <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b2:	f7fd fb33 	bl	8000d1c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e035      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c8:	f7ff fa7b 	bl	8002bc2 <LL_RCC_GetSysClkSource>
 80036cc:	4602      	mov	r2, r0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d1ec      	bne.n	80036b2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d21b      	bcs.n	800371e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 0207 	bic.w	r2, r3, #7
 80036ee:	4913      	ldr	r1, [pc, #76]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f6:	f7fd fb11 	bl	8000d1c <HAL_GetTick>
 80036fa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036fe:	f7fd fb0d 	bl	8000d1c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e011      	b.n	8003734 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_ClockConfig+0x23c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d1ef      	bne.n	80036fe <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800371e:	f000 f8b3 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 8003722:	4603      	mov	r3, r0
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <HAL_RCC_ClockConfig+0x240>)
 8003726:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003728:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_ClockConfig+0x244>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd f8b3 	bl	8000898 <HAL_InitTick>
 8003732:	4603      	mov	r3, r0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58004000 	.word	0x58004000
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004

08003748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003756:	f7ff fa34 	bl	8002bc2 <LL_RCC_GetSysClkSource>
 800375a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375c:	f7ff fafd 	bl	8002d5a <LL_RCC_PLL_GetMainSource>
 8003760:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x2c>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b0c      	cmp	r3, #12
 800376c:	d139      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d136      	bne.n	80037e2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003774:	f7ff f9d7 	bl	8002b26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d115      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x62>
 800377e:	f7ff f9d2 	bl	8002b26 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003782:	4603      	mov	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HAL_RCC_GetSysClockFreq+0x4e>
 8003788:	f7ff f9dd 	bl	8002b46 <LL_RCC_MSI_GetRange>
 800378c:	4603      	mov	r3, r0
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	e005      	b.n	80037a2 <HAL_RCC_GetSysClockFreq+0x5a>
 8003796:	f7ff f9e1 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 800379a:	4603      	mov	r3, r0
 800379c:	0a1b      	lsrs	r3, r3, #8
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	4a36      	ldr	r2, [pc, #216]	; (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 80037a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a8:	e014      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x8c>
 80037aa:	f7ff f9bc 	bl	8002b26 <LL_RCC_MSI_IsEnabledRangeSelect>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_GetSysClockFreq+0x7a>
 80037b4:	f7ff f9c7 	bl	8002b46 <LL_RCC_MSI_GetRange>
 80037b8:	4603      	mov	r3, r0
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	e005      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x86>
 80037c2:	f7ff f9cb 	bl	8002b5c <LL_RCC_MSI_GetRangeAfterStandby>
 80037c6:	4603      	mov	r3, r0
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	4a2b      	ldr	r2, [pc, #172]	; (800387c <HAL_RCC_GetSysClockFreq+0x134>)
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037e0:	e012      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d102      	bne.n	80037ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037e8:	4b25      	ldr	r3, [pc, #148]	; (8003880 <HAL_RCC_GetSysClockFreq+0x138>)
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	e00c      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80037f4:	f7ff f8aa 	bl	800294c <LL_RCC_HSE_IsEnabledDiv2>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80037fe:	4b20      	ldr	r3, [pc, #128]	; (8003880 <HAL_RCC_GetSysClockFreq+0x138>)
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e001      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003804:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003806:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003808:	f7ff f9db 	bl	8002bc2 <LL_RCC_GetSysClkSource>
 800380c:	4603      	mov	r3, r0
 800380e:	2b0c      	cmp	r3, #12
 8003810:	d12f      	bne.n	8003872 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003812:	f7ff faa2 	bl	8002d5a <LL_RCC_PLL_GetMainSource>
 8003816:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b02      	cmp	r3, #2
 800381c:	d003      	beq.n	8003826 <HAL_RCC_GetSysClockFreq+0xde>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d003      	beq.n	800382c <HAL_RCC_GetSysClockFreq+0xe4>
 8003824:	e00d      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003826:	4b16      	ldr	r3, [pc, #88]	; (8003880 <HAL_RCC_GetSysClockFreq+0x138>)
 8003828:	60fb      	str	r3, [r7, #12]
        break;
 800382a:	e00d      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800382c:	f7ff f88e 	bl	800294c <LL_RCC_HSE_IsEnabledDiv2>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d102      	bne.n	800383c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_GetSysClockFreq+0x138>)
 8003838:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800383a:	e005      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_RCC_GetSysClockFreq+0x13c>)
 800383e:	60fb      	str	r3, [r7, #12]
        break;
 8003840:	e002      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	60fb      	str	r3, [r7, #12]
        break;
 8003846:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003848:	f7ff fa65 	bl	8002d16 <LL_RCC_PLL_GetN>
 800384c:	4602      	mov	r2, r0
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	fb03 f402 	mul.w	r4, r3, r2
 8003854:	f7ff fa76 	bl	8002d44 <LL_RCC_PLL_GetDivider>
 8003858:	4603      	mov	r3, r0
 800385a:	091b      	lsrs	r3, r3, #4
 800385c:	3301      	adds	r3, #1
 800385e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003862:	f7ff fa64 	bl	8002d2e <LL_RCC_PLL_GetR>
 8003866:	4603      	mov	r3, r0
 8003868:	0f5b      	lsrs	r3, r3, #29
 800386a:	3301      	adds	r3, #1
 800386c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003870:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003872:	697b      	ldr	r3, [r7, #20]
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	08005b90 	.word	0x08005b90
 8003880:	00f42400 	.word	0x00f42400
 8003884:	01e84800 	.word	0x01e84800

08003888 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b598      	push	{r3, r4, r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800388c:	f7ff ff5c 	bl	8003748 <HAL_RCC_GetSysClockFreq>
 8003890:	4604      	mov	r4, r0
 8003892:	f7ff f9f0 	bl	8002c76 <LL_RCC_GetAHBPrescaler>
 8003896:	4603      	mov	r3, r0
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x24>)
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd98      	pop	{r3, r4, r7, pc}
 80038ac:	08005b30 	.word	0x08005b30

080038b0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b598      	push	{r3, r4, r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80038b4:	f7ff ffe8 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038b8:	4604      	mov	r4, r0
 80038ba:	f7ff f9f4 	bl	8002ca6 <LL_RCC_GetAPB2Prescaler>
 80038be:	4603      	mov	r3, r0
 80038c0:	0adb      	lsrs	r3, r3, #11
 80038c2:	4a03      	ldr	r2, [pc, #12]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd98      	pop	{r3, r4, r7, pc}
 80038d0:	08005b70 	.word	0x08005b70

080038d4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d02d      	beq.n	8003940 <HAL_RCC_GetClockConfig+0x6c>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d02a      	beq.n	8003940 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	224f      	movs	r2, #79	; 0x4f
 80038ee:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003928:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetClockConfig+0x78>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0207 	and.w	r2, r3, #7
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	601a      	str	r2, [r3, #0]
  }
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	58004000 	.word	0x58004000

08003950 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003950:	b590      	push	{r4, r7, lr}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	091b      	lsrs	r3, r3, #4
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003966:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003968:	f7ff f990 	bl	8002c8c <LL_RCC_GetAHB3Prescaler>
 800396c:	4603      	mov	r3, r0
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0c9c      	lsrs	r4, r3, #18
 800398c:	f7fe ffa4 	bl	80028d8 <HAL_PWREx_GetVoltageRange>
 8003990:	4603      	mov	r3, r0
 8003992:	4619      	mov	r1, r3
 8003994:	4620      	mov	r0, r4
 8003996:	f000 f80b 	bl	80039b0 <RCC_SetFlashLatency>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd90      	pop	{r4, r7, pc}
 80039a4:	08005b90 	.word	0x08005b90
 80039a8:	08005b30 	.word	0x08005b30
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <RCC_SetFlashLatency+0xf4>)
 80039bc:	f107 0320 	add.w	r3, r7, #32
 80039c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039c4:	6018      	str	r0, [r3, #0]
 80039c6:	3304      	adds	r3, #4
 80039c8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80039ca:	4a37      	ldr	r2, [pc, #220]	; (8003aa8 <RCC_SetFlashLatency+0xf8>)
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d4:	6018      	str	r0, [r3, #0]
 80039d6:	3304      	adds	r3, #4
 80039d8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80039da:	4a34      	ldr	r2, [pc, #208]	; (8003aac <RCC_SetFlashLatency+0xfc>)
 80039dc:	f107 030c 	add.w	r3, r7, #12
 80039e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80039e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80039e6:	2300      	movs	r3, #0
 80039e8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f0:	d11b      	bne.n	8003a2a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80039f2:	2300      	movs	r3, #0
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
 80039f6:	e014      	b.n	8003a22 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	3338      	adds	r3, #56	; 0x38
 80039fe:	443b      	add	r3, r7
 8003a00:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a04:	461a      	mov	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d807      	bhi.n	8003a1c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	3338      	adds	r3, #56	; 0x38
 8003a12:	443b      	add	r3, r7
 8003a14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a1a:	e021      	b.n	8003a60 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1e:	3301      	adds	r3, #1
 8003a20:	633b      	str	r3, [r7, #48]	; 0x30
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d9e7      	bls.n	80039f8 <RCC_SetFlashLatency+0x48>
 8003a28:	e01a      	b.n	8003a60 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2e:	e014      	b.n	8003a5a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	3338      	adds	r3, #56	; 0x38
 8003a36:	443b      	add	r3, r7
 8003a38:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d807      	bhi.n	8003a54 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	3338      	adds	r3, #56	; 0x38
 8003a4a:	443b      	add	r3, r7
 8003a4c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003a52:	e005      	b.n	8003a60 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	3301      	adds	r3, #1
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d9e7      	bls.n	8003a30 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <RCC_SetFlashLatency+0x100>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 0207 	bic.w	r2, r3, #7
 8003a68:	4911      	ldr	r1, [pc, #68]	; (8003ab0 <RCC_SetFlashLatency+0x100>)
 8003a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003a70:	f7fd f954 	bl	8000d1c <HAL_GetTick>
 8003a74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a76:	e008      	b.n	8003a8a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a78:	f7fd f950 	bl	8000d1c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e007      	b.n	8003a9a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <RCC_SetFlashLatency+0x100>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1ef      	bne.n	8003a78 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3738      	adds	r7, #56	; 0x38
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08005b00 	.word	0x08005b00
 8003aa8:	08005b08 	.word	0x08005b08
 8003aac:	08005b10 	.word	0x08005b10
 8003ab0:	58004000 	.word	0x58004000

08003ab4 <LL_RCC_LSE_IsReady>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d101      	bne.n	8003acc <LL_RCC_LSE_IsReady+0x18>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <LL_RCC_LSE_IsReady+0x1a>
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <LL_RCC_SetUSARTClockSource>:
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	43db      	mvns	r3, r3
 8003aec:	401a      	ands	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <LL_RCC_SetI2SClockSource>:
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_SetLPUARTClockSource>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_SetI2CClockSource>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b72:	43db      	mvns	r3, r3
 8003b74:	401a      	ands	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <LL_RCC_SetLPTIMClockSource>:
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <LL_RCC_SetRNGClockSource>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_SetADCClockSource>:
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <LL_RCC_SetRTCClockSource>:
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_GetRTCClockSource>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc80      	pop	{r7}
 8003c58:	4770      	bx	lr

08003c5a <LL_RCC_ForceBackupDomainReset>:
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c92:	bf00      	nop
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cac:	2300      	movs	r3, #0
 8003cae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d058      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003cbc:	f7fe fdfe 	bl	80028bc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cc0:	f7fd f82c 	bl	8000d1c <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cc6:	e009      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc8:	f7fd f828 	bl	8000d1c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d902      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cda:	e006      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cdc:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d13c      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003cf0:	f7ff ffa7 	bl	8003c42 <LL_RCC_GetRTCClockSource>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d00f      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d0c:	f7ff ffa5 	bl	8003c5a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d10:	f7ff ffb3 	bl	8003c7a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d014      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fc fff8 	bl	8000d1c <HAL_GetTick>
 8003d2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d2e:	e00b      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d30:	f7fc fff4 	bl	8000d1c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d902      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	74fb      	strb	r3, [r7, #19]
            break;
 8003d46:	e004      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003d48:	f7ff feb4 	bl	8003ab4 <LL_RCC_LSE_IsReady>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d1ee      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003d52:	7cfb      	ldrb	r3, [r7, #19]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff5b 	bl	8003c18 <LL_RCC_SetRTCClockSource>
 8003d62:	e004      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
 8003d68:	e001      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	7cfb      	ldrb	r3, [r7, #19]
 8003d6c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d004      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fea9 	bl	8003ad6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe9e 	bl	8003ad6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fec0 	bl	8003b30 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fee6 	bl	8003b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff fedb 	bl	8003b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff fed0 	bl	8003b92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fea9 	bl	8003b5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fe9e 	bl	8003b5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fe93 	bl	8003b5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d011      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fe5e 	bl	8003b06 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	d107      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fea5 	bl	8003bc4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e90:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fea3 	bl	8003bee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb0:	d107      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003ec2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58000400 	.word	0x58000400

08003ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e049      	b.n	8003f76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f841 	bl	8003f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 f9ce 	bl	80042b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d001      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e036      	b.n	8004016 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0201 	orr.w	r2, r2, #1
 8003fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <HAL_TIM_Base_Start_IT+0x90>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x44>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d115      	bne.n	8004000 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_TIM_Base_Start_IT+0x94>)
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d015      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x82>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d011      	beq.n	8004012 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffe:	e008      	b.n	8004012 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e000      	b.n	8004014 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40012c00 	.word	0x40012c00
 8004024:	00010007 	.word	0x00010007

08004028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0202 	mvn.w	r2, #2
 8004054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f904 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f7 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f906 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b04      	cmp	r3, #4
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0204 	mvn.w	r2, #4
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2202      	movs	r2, #2
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8da 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f8cd 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f8dc 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0208 	mvn.w	r2, #8
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2204      	movs	r2, #4
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8b0 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f8a3 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f8b2 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b10      	cmp	r3, #16
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b10      	cmp	r3, #16
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0210 	mvn.w	r2, #16
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2208      	movs	r2, #8
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f886 	bl	8004278 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f879 	bl	8004266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f888 	bl	800428a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10e      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0201 	mvn.w	r2, #1
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fc faba 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b6:	2b80      	cmp	r3, #128	; 0x80
 80041b8:	d10e      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c4:	2b80      	cmp	r3, #128	; 0x80
 80041c6:	d107      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8d7 	bl	8004386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041e6:	d10e      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8c9 	bl	8004398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d10e      	bne.n	8004232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d107      	bne.n	8004232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f835 	bl	800429c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b20      	cmp	r3, #32
 800423e:	d10e      	bne.n	800425e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0320 	and.w	r3, r3, #32
 800424a:	2b20      	cmp	r3, #32
 800424c:	d107      	bne.n	800425e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0220 	mvn.w	r2, #32
 8004256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f88b 	bl	8004374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800425e:	bf00      	nop
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr
	...

080042b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a29      	ldr	r2, [pc, #164]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_Base_SetConfig+0x20>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ce:	d108      	bne.n	80042e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a20      	ldr	r2, [pc, #128]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00b      	beq.n	8004302 <TIM_Base_SetConfig+0x52>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f0:	d007      	beq.n	8004302 <TIM_Base_SetConfig+0x52>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	; (800436c <TIM_Base_SetConfig+0xbc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d003      	beq.n	8004302 <TIM_Base_SetConfig+0x52>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1c      	ldr	r2, [pc, #112]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d108      	bne.n	8004314 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a0b      	ldr	r2, [pc, #44]	; (8004368 <TIM_Base_SetConfig+0xb8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d007      	beq.n	8004350 <TIM_Base_SetConfig+0xa0>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a0a      	ldr	r2, [pc, #40]	; (800436c <TIM_Base_SetConfig+0xbc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d003      	beq.n	8004350 <TIM_Base_SetConfig+0xa0>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a09      	ldr	r2, [pc, #36]	; (8004370 <TIM_Base_SetConfig+0xc0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d103      	bne.n	8004358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	615a      	str	r2, [r3, #20]
}
 800435e:	bf00      	nop
 8004360:	3714      	adds	r7, #20
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr
 8004368:	40012c00 	.word	0x40012c00
 800436c:	40014400 	.word	0x40014400
 8004370:	40014800 	.word	0x40014800

08004374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr
	...

080043ac <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08e      	sub	sp, #56	; 0x38
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80043ba:	2234      	movs	r2, #52	; 0x34
 80043bc:	2100      	movs	r1, #0
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f001 fb40 	bl	8005a44 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	f1a3 0208 	sub.w	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2202      	movs	r2, #2
 80043f8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80043fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4413      	add	r3, r2
 8004404:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	3b04      	subs	r3, #4
 800440a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004418:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800441a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441c:	3b04      	subs	r3, #4
 800441e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8004420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004436:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	3304      	adds	r3, #4
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8004442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <_tx_byte_pool_create+0x11c>)
 800444a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004452:	f3ef 8310 	mrs	r3, PRIMASK
 8004456:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8004458:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800445a:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800445c:	b672      	cpsid	i
#endif
    return(int_posture);
 800445e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8004460:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <_tx_byte_pool_create+0x120>)
 8004466:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <_tx_byte_pool_create+0x124>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <_tx_byte_pool_create+0x128>)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
 8004482:	e011      	b.n	80044a8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <_tx_byte_pool_create+0x128>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80044a8:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <_tx_byte_pool_create+0x124>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a08      	ldr	r2, [pc, #32]	; (80044d0 <_tx_byte_pool_create+0x124>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	f383 8810 	msr	PRIMASK, r3
}
 80044bc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3738      	adds	r7, #56	; 0x38
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	ffffeeee 	.word	0xffffeeee
 80044cc:	42595445 	.word	0x42595445
 80044d0:	20000ac8 	.word	0x20000ac8
 80044d4:	20000ac4 	.word	0x20000ac4

080044d8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80044dc:	f000 fac0 	bl	8004a60 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80044e0:	f000 fe36 	bl	8005150 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <_tx_initialize_high_level+0x58>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <_tx_initialize_high_level+0x5c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80044f0:	4b11      	ldr	r3, [pc, #68]	; (8004538 <_tx_initialize_high_level+0x60>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <_tx_initialize_high_level+0x64>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80044fc:	4b10      	ldr	r3, [pc, #64]	; (8004540 <_tx_initialize_high_level+0x68>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <_tx_initialize_high_level+0x6c>)
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <_tx_initialize_high_level+0x70>)
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <_tx_initialize_high_level+0x74>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <_tx_initialize_high_level+0x78>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <_tx_initialize_high_level+0x7c>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8004520:	4b0d      	ldr	r3, [pc, #52]	; (8004558 <_tx_initialize_high_level+0x80>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <_tx_initialize_high_level+0x84>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
#endif
}
 800452c:	bf00      	nop
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000a9c 	.word	0x20000a9c
 8004534:	20000aa0 	.word	0x20000aa0
 8004538:	20000aa4 	.word	0x20000aa4
 800453c:	20000aa8 	.word	0x20000aa8
 8004540:	20000aac 	.word	0x20000aac
 8004544:	20000ab0 	.word	0x20000ab0
 8004548:	20000abc 	.word	0x20000abc
 800454c:	20000ac0 	.word	0x20000ac0
 8004550:	20000ac4 	.word	0x20000ac4
 8004554:	20000ac8 	.word	0x20000ac8
 8004558:	20000ab4 	.word	0x20000ab4
 800455c:	20000ab8 	.word	0x20000ab8

08004560 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <_tx_initialize_kernel_enter+0x48>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800456c:	d00c      	beq.n	8004588 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <_tx_initialize_kernel_enter+0x48>)
 8004570:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004574:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004576:	f7fb fe03 	bl	8000180 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800457a:	f7ff ffad 	bl	80044d8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <_tx_initialize_kernel_enter+0x4c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3301      	adds	r3, #1
 8004584:	4a09      	ldr	r2, [pc, #36]	; (80045ac <_tx_initialize_kernel_enter+0x4c>)
 8004586:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004588:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <_tx_initialize_kernel_enter+0x48>)
 800458a:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800458e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <_tx_initialize_kernel_enter+0x50>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb feff 	bl	8000398 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800459a:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <_tx_initialize_kernel_enter+0x48>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80045a0:	f7fb fe2e 	bl	8000200 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80045a4:	bf00      	nop
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	2000000c 	.word	0x2000000c
 80045ac:	20000b6c 	.word	0x20000b6c
 80045b0:	20000acc 	.word	0x20000acc

080045b4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08e      	sub	sp, #56	; 0x38
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045be:	f3ef 8310 	mrs	r3, PRIMASK
 80045c2:	623b      	str	r3, [r7, #32]
    return(posture);
 80045c4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80045c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80045c8:	b672      	cpsid	i
    return(int_posture);
 80045ca:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80045cc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d2:	4a33      	ldr	r2, [pc, #204]	; (80046a0 <_tx_semaphore_cleanup+0xec>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d158      	bne.n	800468a <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d152      	bne.n	800468a <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80045ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d04c      	beq.n	800468a <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <_tx_semaphore_cleanup+0xf0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d147      	bne.n	800468a <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d043      	beq.n	800468a <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	1e5a      	subs	r2, r3, #1
 800460e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004610:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	2200      	movs	r2, #0
 8004622:	60da      	str	r2, [r3, #12]
 8004624:	e013      	b.n	800464e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d102      	bne.n	800464e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800464c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	2b06      	cmp	r3, #6
 8004654:	d119      	bne.n	800468a <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	220d      	movs	r2, #13
 800465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <_tx_semaphore_cleanup+0xf4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3301      	adds	r3, #1
 8004664:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <_tx_semaphore_cleanup+0xf4>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f383 8810 	msr	PRIMASK, r3
}
 8004672:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 faa5 	bl	8004bc4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800467a:	f3ef 8310 	mrs	r3, PRIMASK
 800467e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004680:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004682:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004684:	b672      	cpsid	i
    return(int_posture);
 8004686:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f383 8810 	msr	PRIMASK, r3
}
 8004694:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004696:	bf00      	nop
 8004698:	3738      	adds	r7, #56	; 0x38
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	080045b5 	.word	0x080045b5
 80046a4:	53454d41 	.word	0x53454d41
 80046a8:	20000b6c 	.word	0x20000b6c

080046ac <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b08a      	sub	sp, #40	; 0x28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80046b8:	221c      	movs	r2, #28
 80046ba:	2100      	movs	r1, #0
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f001 f9c1 	bl	8005a44 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046ce:	f3ef 8310 	mrs	r3, PRIMASK
 80046d2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80046d4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80046d6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80046d8:	b672      	cpsid	i
    return(int_posture);
 80046da:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a18      	ldr	r2, [pc, #96]	; (8004744 <_tx_semaphore_create+0x98>)
 80046e2:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <_tx_semaphore_create+0x9c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80046ec:	4a17      	ldr	r2, [pc, #92]	; (800474c <_tx_semaphore_create+0xa0>)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	619a      	str	r2, [r3, #24]
 80046fe:	e011      	b.n	8004724 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8004700:	4b12      	ldr	r3, [pc, #72]	; (800474c <_tx_semaphore_create+0xa0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	69fa      	ldr	r2, [r7, #28]
 800471c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8004724:	4b08      	ldr	r3, [pc, #32]	; (8004748 <_tx_semaphore_create+0x9c>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	4a07      	ldr	r2, [pc, #28]	; (8004748 <_tx_semaphore_create+0x9c>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	; 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	53454d41 	.word	0x53454d41
 8004748:	20000aa0 	.word	0x20000aa0
 800474c:	20000a9c 	.word	0x20000a9c

08004750 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800475e:	f3ef 8310 	mrs	r3, PRIMASK
 8004762:	623b      	str	r3, [r7, #32]
    return(posture);
 8004764:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004766:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004768:	b672      	cpsid	i
    return(int_posture);
 800476a:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800476c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	1e5a      	subs	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	e068      	b.n	800485e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d05d      	beq.n	800484e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004792:	4b35      	ldr	r3, [pc, #212]	; (8004868 <_tx_semaphore_get+0x118>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <_tx_semaphore_get+0x5c>
 800479a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80047a6:	230d      	movs	r3, #13
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	e058      	b.n	800485e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80047ac:	4b2f      	ldr	r3, [pc, #188]	; (800486c <_tx_semaphore_get+0x11c>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	4a2e      	ldr	r2, [pc, #184]	; (8004870 <_tx_semaphore_get+0x120>)
 80047b6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80047be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047c4:	1c5a      	adds	r2, r3, #1
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d8:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047e4:	675a      	str	r2, [r3, #116]	; 0x74
 80047e6:	e011      	b.n	800480c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f2:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fe:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004804:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800480a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2206      	movs	r2, #6
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2201      	movs	r2, #1
 8004820:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004828:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <_tx_semaphore_get+0x118>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3301      	adds	r3, #1
 800482e:	4a0e      	ldr	r2, [pc, #56]	; (8004868 <_tx_semaphore_get+0x118>)
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800483e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004840:	f000 fac0 	bl	8004dc4 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	e007      	b.n	800485e <_tx_semaphore_get+0x10e>
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f383 8810 	msr	PRIMASK, r3
}
 8004858:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800485a:	230d      	movs	r3, #13
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 800485e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004860:	4618      	mov	r0, r3
 8004862:	3738      	adds	r7, #56	; 0x38
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000b6c 	.word	0x20000b6c
 800486c:	20000ad4 	.word	0x20000ad4
 8004870:	080045b5 	.word	0x080045b5

08004874 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b092      	sub	sp, #72	; 0x48
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004882:	2300      	movs	r3, #0
 8004884:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004886:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004888:	21ef      	movs	r1, #239	; 0xef
 800488a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800488c:	f001 f8da 	bl	8005a44 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004890:	22b0      	movs	r2, #176	; 0xb0
 8004892:	2100      	movs	r1, #0
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f001 f8d5 	bl	8005a44 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	68ba      	ldr	r2, [r7, #8]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048b0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80048b6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048bc:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048c2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ca:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048d0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80048da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80048de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e0:	3b01      	subs	r3, #1
 80048e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048e4:	4413      	add	r3, r2
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ec:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80048ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d007      	beq.n	8004906 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004904:	e006      	b.n	8004914 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004910:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2203      	movs	r2, #3
 8004918:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a48      	ldr	r2, [pc, #288]	; (8004a40 <_tx_thread_create+0x1cc>)
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004926:	4947      	ldr	r1, [pc, #284]	; (8004a44 <_tx_thread_create+0x1d0>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f7fb fcb9 	bl	80002a0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800492e:	f3ef 8310 	mrs	r3, PRIMASK
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8004936:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004938:	b672      	cpsid	i
    return(int_posture);
 800493a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	4a41      	ldr	r2, [pc, #260]	; (8004a48 <_tx_thread_create+0x1d4>)
 8004942:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004944:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <_tx_thread_create+0x1d8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800494c:	4a40      	ldr	r2, [pc, #256]	; (8004a50 <_tx_thread_create+0x1dc>)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004962:	e016      	b.n	8004992 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004964:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <_tx_thread_create+0x1dc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004970:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800498e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004992:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <_tx_thread_create+0x1d8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3301      	adds	r3, #1
 8004998:	4a2c      	ldr	r2, [pc, #176]	; (8004a4c <_tx_thread_create+0x1d8>)
 800499a:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800499c:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <_tx_thread_create+0x1e0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3301      	adds	r3, #1
 80049a2:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <_tx_thread_create+0x1e0>)
 80049a4:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80049a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d129      	bne.n	8004a00 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80049ac:	f3ef 8305 	mrs	r3, IPSR
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80049b4:	4b28      	ldr	r3, [pc, #160]	; (8004a58 <_tx_thread_create+0x1e4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80049be:	d30d      	bcc.n	80049dc <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80049c0:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <_tx_thread_create+0x1e8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80049c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80049cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d0:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80049d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80049da:	e001      	b.n	80049e0 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
 80049e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f8e9 	bl	8004bc4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01e      	beq.n	8004a36 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80049f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80049fe:	e01a      	b.n	8004a36 <_tx_thread_create+0x1c2>
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a10:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004a12:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004a14:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a16:	b672      	cpsid	i
    return(int_posture);
 8004a18:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004a1a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004a1c:	4b0d      	ldr	r3, [pc, #52]	; (8004a54 <_tx_thread_create+0x1e0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <_tx_thread_create+0x1e0>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f383 8810 	msr	PRIMASK, r3
}
 8004a30:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004a32:	f000 f88f 	bl	8004b54 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3748      	adds	r7, #72	; 0x48
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	08005095 	.word	0x08005095
 8004a44:	08004ad9 	.word	0x08004ad9
 8004a48:	54485244 	.word	0x54485244
 8004a4c:	20000ae0 	.word	0x20000ae0
 8004a50:	20000adc 	.word	0x20000adc
 8004a54:	20000b6c 	.word	0x20000b6c
 8004a58:	2000000c 	.word	0x2000000c
 8004a5c:	20000ad8 	.word	0x20000ad8

08004a60 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004a64:	4b12      	ldr	r3, [pc, #72]	; (8004ab0 <_tx_thread_initialize+0x50>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004a6a:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <_tx_thread_initialize+0x54>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <_tx_thread_initialize+0x58>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <_tx_thread_initialize+0x5c>)
 8004a78:	2220      	movs	r2, #32
 8004a7a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004a7c:	2280      	movs	r2, #128	; 0x80
 8004a7e:	2100      	movs	r1, #0
 8004a80:	480f      	ldr	r0, [pc, #60]	; (8004ac0 <_tx_thread_initialize+0x60>)
 8004a82:	f000 ffdf 	bl	8005a44 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <_tx_thread_initialize+0x64>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004a8c:	4b0e      	ldr	r3, [pc, #56]	; (8004ac8 <_tx_thread_initialize+0x68>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <_tx_thread_initialize+0x6c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004a98:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <_tx_thread_initialize+0x70>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <_tx_thread_initialize+0x74>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <_tx_thread_initialize+0x74>)
 8004aa8:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000ad4 	.word	0x20000ad4
 8004ab4:	20000ad8 	.word	0x20000ad8
 8004ab8:	20000ae4 	.word	0x20000ae4
 8004abc:	20000ae8 	.word	0x20000ae8
 8004ac0:	20000aec 	.word	0x20000aec
 8004ac4:	20000adc 	.word	0x20000adc
 8004ac8:	20000ae0 	.word	0x20000ae0
 8004acc:	20000b6c 	.word	0x20000b6c
 8004ad0:	20000b70 	.word	0x20000b70
 8004ad4:	20000b74 	.word	0x20000b74

08004ad8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004ade:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <_tx_thread_shell_entry+0x70>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <_tx_thread_shell_entry+0x74>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <_tx_thread_shell_entry+0x74>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b00:	f3ef 8310 	mrs	r3, PRIMASK
 8004b04:	60bb      	str	r3, [r7, #8]
    return(posture);
 8004b06:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8004b08:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b0a:	b672      	cpsid	i
    return(int_posture);
 8004b0c:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004b0e:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2201      	movs	r2, #1
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <_tx_thread_shell_entry+0x78>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	4a09      	ldr	r2, [pc, #36]	; (8004b50 <_tx_thread_shell_entry+0x78>)
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	f000 f943 	bl	8004dc4 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000ad4 	.word	0x20000ad4
 8004b4c:	20000b70 	.word	0x20000b70
 8004b50:	20000b6c 	.word	0x20000b6c

08004b54 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004b5a:	4b16      	ldr	r3, [pc, #88]	; (8004bb4 <_tx_thread_system_preempt_check+0x60>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d121      	bne.n	8004baa <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <_tx_thread_system_preempt_check+0x64>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <_tx_thread_system_preempt_check+0x68>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d017      	beq.n	8004baa <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <_tx_thread_system_preempt_check+0x6c>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004b82:	f3ef 8305 	mrs	r3, IPSR
 8004b86:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004b88:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b92:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004b94:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004b96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004b98:	b662      	cpsie	i
}
 8004b9a:	bf00      	nop
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004ba8:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004baa:	bf00      	nop
 8004bac:	3724      	adds	r7, #36	; 0x24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000b6c 	.word	0x20000b6c
 8004bb8:	20000ad4 	.word	0x20000ad4
 8004bbc:	20000ad8 	.word	0x20000ad8
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b096      	sub	sp, #88	; 0x58
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004bd4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bd6:	b672      	cpsid	i
    return(int_posture);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004bda:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	334c      	adds	r3, #76	; 0x4c
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb8d 	bl	8005308 <_tx_timer_system_deactivate>
 8004bee:	e002      	b.n	8004bf6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004bf6:	4b6c      	ldr	r3, [pc, #432]	; (8004da8 <_tx_thread_system_resume+0x1e4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <_tx_thread_system_resume+0x1e4>)
 8004bfe:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 8083 	bne.w	8004d10 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8097 	beq.w	8004d42 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d172      	bne.n	8004d02 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8004c28:	4a60      	ldr	r2, [pc, #384]	; (8004dac <_tx_thread_system_resume+0x1e8>)
 8004c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c30:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d154      	bne.n	8004ce2 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8004c38:	495c      	ldr	r1, [pc, #368]	; (8004dac <_tx_thread_system_resume+0x1e8>)
 8004c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8004c58:	4b55      	ldr	r3, [pc, #340]	; (8004db0 <_tx_thread_system_resume+0x1ec>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	4a53      	ldr	r2, [pc, #332]	; (8004db0 <_tx_thread_system_resume+0x1ec>)
 8004c62:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <_tx_thread_system_resume+0x1f0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d269      	bcs.n	8004d42 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004c6e:	4a51      	ldr	r2, [pc, #324]	; (8004db4 <_tx_thread_system_resume+0x1f0>)
 8004c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c72:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004c74:	4b50      	ldr	r3, [pc, #320]	; (8004db8 <_tx_thread_system_resume+0x1f4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8004c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004c80:	4a4d      	ldr	r2, [pc, #308]	; (8004db8 <_tx_thread_system_resume+0x1f4>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e05c      	b.n	8004d42 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d257      	bcs.n	8004d42 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004c92:	4a49      	ldr	r2, [pc, #292]	; (8004db8 <_tx_thread_system_resume+0x1f4>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ca4:	4b40      	ldr	r3, [pc, #256]	; (8004da8 <_tx_thread_system_resume+0x1e4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8004caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d174      	bne.n	8004d9a <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004cb0:	4b42      	ldr	r3, [pc, #264]	; (8004dbc <_tx_thread_system_resume+0x1f8>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004cb8:	f3ef 8305 	mrs	r3, IPSR
 8004cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10c      	bne.n	8004cde <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8004ccc:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004cce:	b662      	cpsie	i
}
 8004cd0:	bf00      	nop
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	bf00      	nop
}
 8004cde:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8004ce0:	e05b      	b.n	8004d9a <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8004cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cfe:	621a      	str	r2, [r3, #32]
 8004d00:	e01f      	b.n	8004d42 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d0e:	e018      	b.n	8004d42 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d014      	beq.n	8004d42 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d010      	beq.n	8004d42 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
 8004d34:	e005      	b.n	8004d42 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2203      	movs	r2, #3
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004d42:	4b1f      	ldr	r3, [pc, #124]	; (8004dc0 <_tx_thread_system_resume+0x1fc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004d54:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <_tx_thread_system_resume+0x1f4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d020      	beq.n	8004da0 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <_tx_thread_system_resume+0x1e4>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11a      	bne.n	8004da0 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d6a:	4b14      	ldr	r3, [pc, #80]	; (8004dbc <_tx_thread_system_resume+0x1f8>)
 8004d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d72:	f3ef 8305 	mrs	r3, IPSR
 8004d76:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004d78:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d82:	613b      	str	r3, [r7, #16]
    return(posture);
 8004d84:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004d86:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004d88:	b662      	cpsie	i
}
 8004d8a:	bf00      	nop
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f383 8810 	msr	PRIMASK, r3
}
 8004d96:	bf00      	nop
}
 8004d98:	e001      	b.n	8004d9e <_tx_thread_system_resume+0x1da>
                                return;
 8004d9a:	bf00      	nop
 8004d9c:	e000      	b.n	8004da0 <_tx_thread_system_resume+0x1dc>
 8004d9e:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004da0:	3758      	adds	r7, #88	; 0x58
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000b6c 	.word	0x20000b6c
 8004dac:	20000aec 	.word	0x20000aec
 8004db0:	20000ae4 	.word	0x20000ae4
 8004db4:	20000ae8 	.word	0x20000ae8
 8004db8:	20000ad8 	.word	0x20000ad8
 8004dbc:	e000ed04 	.word	0xe000ed04
 8004dc0:	20000ad4 	.word	0x20000ad4

08004dc4 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b09e      	sub	sp, #120	; 0x78
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004dcc:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <_tx_thread_system_suspend+0x210>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ddc:	b672      	cpsid	i
    return(int_posture);
 8004dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004de0:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d112      	bne.n	8004e10 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d008      	beq.n	8004e08 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d004      	beq.n	8004e08 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	334c      	adds	r3, #76	; 0x4c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fa20 	bl	8005248 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4a72      	ldr	r2, [pc, #456]	; (8004fd8 <_tx_thread_system_suspend+0x214>)
 8004e0e:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004e10:	4b72      	ldr	r3, [pc, #456]	; (8004fdc <_tx_thread_system_suspend+0x218>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	4a71      	ldr	r2, [pc, #452]	; (8004fdc <_tx_thread_system_suspend+0x218>)
 8004e18:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	f040 80a6 	bne.w	8004f70 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004e36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d015      	beq.n	8004e6a <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e4e:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004e50:	4a63      	ldr	r2, [pc, #396]	; (8004fe0 <_tx_thread_system_suspend+0x21c>)
 8004e52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d157      	bne.n	8004f0e <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004e5e:	4960      	ldr	r1, [pc, #384]	; (8004fe0 <_tx_thread_system_suspend+0x21c>)
 8004e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004e68:	e051      	b.n	8004f0e <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004e6a:	4a5d      	ldr	r2, [pc, #372]	; (8004fe0 <_tx_thread_system_suspend+0x21c>)
 8004e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e6e:	2100      	movs	r1, #0
 8004e70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004e74:	2201      	movs	r2, #1
 8004e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004e7e:	4b59      	ldr	r3, [pc, #356]	; (8004fe4 <_tx_thread_system_suspend+0x220>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e84:	43db      	mvns	r3, r3
 8004e86:	4013      	ands	r3, r2
 8004e88:	4a56      	ldr	r2, [pc, #344]	; (8004fe4 <_tx_thread_system_suspend+0x220>)
 8004e8a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004e90:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <_tx_thread_system_suspend+0x220>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d12b      	bne.n	8004ef4 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004e9c:	4b52      	ldr	r3, [pc, #328]	; (8004fe8 <_tx_thread_system_suspend+0x224>)
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004ea2:	4b52      	ldr	r3, [pc, #328]	; (8004fec <_tx_thread_system_suspend+0x228>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eaa:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004eb4:	4b49      	ldr	r3, [pc, #292]	; (8004fdc <_tx_thread_system_suspend+0x218>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8004eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f040 8081 	bne.w	8004fc4 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004ec2:	4b4b      	ldr	r3, [pc, #300]	; (8004ff0 <_tx_thread_system_suspend+0x22c>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004ee0:	b662      	cpsie	i
}
 8004ee2:	bf00      	nop
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eea:	f383 8810 	msr	PRIMASK, r3
}
 8004eee:	bf00      	nop
}
 8004ef0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004ef2:	e067      	b.n	8004fc4 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004ef4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ef6:	fa93 f3a3 	rbit	r3, r3
 8004efa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004efc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004efe:	fab3 f383 	clz	r3, r3
 8004f02:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	4413      	add	r3, r2
 8004f0a:	4a37      	ldr	r2, [pc, #220]	; (8004fe8 <_tx_thread_system_suspend+0x224>)
 8004f0c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <_tx_thread_system_suspend+0x228>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d12b      	bne.n	8004f70 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004f18:	4b33      	ldr	r3, [pc, #204]	; (8004fe8 <_tx_thread_system_suspend+0x224>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a30      	ldr	r2, [pc, #192]	; (8004fe0 <_tx_thread_system_suspend+0x21c>)
 8004f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f22:	4a32      	ldr	r2, [pc, #200]	; (8004fec <_tx_thread_system_suspend+0x228>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004f32:	4b2a      	ldr	r3, [pc, #168]	; (8004fdc <_tx_thread_system_suspend+0x218>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d144      	bne.n	8004fc8 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004f3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <_tx_thread_system_suspend+0x22c>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f46:	f3ef 8305 	mrs	r3, IPSR
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10c      	bne.n	8004f6c <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f52:	f3ef 8310 	mrs	r3, PRIMASK
 8004f56:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004f5c:	b662      	cpsie	i
}
 8004f5e:	bf00      	nop
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	f383 8810 	msr	PRIMASK, r3
}
 8004f6a:	bf00      	nop
}
 8004f6c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004f6e:	e02b      	b.n	8004fc8 <_tx_thread_system_suspend+0x204>
 8004f70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f72:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f383 8810 	msr	PRIMASK, r3
}
 8004f7a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <_tx_thread_system_suspend+0x228>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d022      	beq.n	8004fcc <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <_tx_thread_system_suspend+0x218>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d11c      	bne.n	8004fcc <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004f92:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <_tx_thread_system_suspend+0x22c>)
 8004f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f98:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f9a:	f3ef 8305 	mrs	r3, IPSR
 8004f9e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10c      	bne.n	8004fc0 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004faa:	617b      	str	r3, [r7, #20]
    return(posture);
 8004fac:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004fae:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004fb0:	b662      	cpsie	i
}
 8004fb2:	bf00      	nop
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f383 8810 	msr	PRIMASK, r3
}
 8004fbe:	bf00      	nop
}
 8004fc0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004fc2:	e003      	b.n	8004fcc <_tx_thread_system_suspend+0x208>
                return;
 8004fc4:	bf00      	nop
 8004fc6:	e002      	b.n	8004fce <_tx_thread_system_suspend+0x20a>
            return;
 8004fc8:	bf00      	nop
 8004fca:	e000      	b.n	8004fce <_tx_thread_system_suspend+0x20a>
    return;
 8004fcc:	bf00      	nop
}
 8004fce:	3778      	adds	r7, #120	; 0x78
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000ad4 	.word	0x20000ad4
 8004fd8:	200010d8 	.word	0x200010d8
 8004fdc:	20000b6c 	.word	0x20000b6c
 8004fe0:	20000aec 	.word	0x20000aec
 8004fe4:	20000ae4 	.word	0x20000ae4
 8004fe8:	20000ae8 	.word	0x20000ae8
 8004fec:	20000ad8 	.word	0x20000ad8
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004ffa:	4b20      	ldr	r3, [pc, #128]	; (800507c <_tx_thread_time_slice+0x88>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005006:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005008:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800500a:	b672      	cpsid	i
    return(int_posture);
 800500c:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800500e:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005010:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <_tx_thread_time_slice+0x8c>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d024      	beq.n	8005066 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	2b00      	cmp	r3, #0
 8005022:	d120      	bne.n	8005066 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	4a14      	ldr	r2, [pc, #80]	; (8005084 <_tx_thread_time_slice+0x90>)
 8005032:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	429a      	cmp	r2, r3
 800503c:	d013      	beq.n	8005066 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	429a      	cmp	r2, r3
 8005048:	d10d      	bne.n	8005066 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	6a12      	ldr	r2, [r2, #32]
 8005052:	490d      	ldr	r1, [pc, #52]	; (8005088 <_tx_thread_time_slice+0x94>)
 8005054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <_tx_thread_time_slice+0x98>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <_tx_thread_time_slice+0x94>)
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <_tx_thread_time_slice+0x9c>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	20000ad4 	.word	0x20000ad4
 8005080:	20000b7c 	.word	0x20000b7c
 8005084:	200010d8 	.word	0x200010d8
 8005088:	20000aec 	.word	0x20000aec
 800508c:	20000ae8 	.word	0x20000ae8
 8005090:	20000ad8 	.word	0x20000ad8

08005094 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08a      	sub	sp, #40	; 0x28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050a0:	f3ef 8310 	mrs	r3, PRIMASK
 80050a4:	617b      	str	r3, [r7, #20]
    return(posture);
 80050a6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80050a8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80050aa:	b672      	cpsid	i
    return(int_posture);
 80050ac:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80050ae:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	2b04      	cmp	r3, #4
 80050b6:	d10e      	bne.n	80050d6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80050b8:	4b13      	ldr	r3, [pc, #76]	; (8005108 <_tx_thread_timeout+0x74>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	4a12      	ldr	r2, [pc, #72]	; (8005108 <_tx_thread_timeout+0x74>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80050ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050d0:	f7ff fd78 	bl	8004bc4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80050d4:	e013      	b.n	80050fe <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050da:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050fc:	4798      	blx	r3
}
 80050fe:	bf00      	nop
 8005100:	3728      	adds	r7, #40	; 0x28
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000b6c 	.word	0x20000b6c

0800510c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005112:	f3ef 8310 	mrs	r3, PRIMASK
 8005116:	607b      	str	r3, [r7, #4]
    return(posture);
 8005118:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800511a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800511c:	b672      	cpsid	i
    return(int_posture);
 800511e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005120:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <_tx_timer_expiration_process+0x3c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <_tx_timer_expiration_process+0x3c>)
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f383 8810 	msr	PRIMASK, r3
}
 8005136:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005138:	4804      	ldr	r0, [pc, #16]	; (800514c <_tx_timer_expiration_process+0x40>)
 800513a:	f7ff fd43 	bl	8004bc4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000b6c 	.word	0x20000b6c
 800514c:	20000c1c 	.word	0x20000c1c

08005150 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005150:	b590      	push	{r4, r7, lr}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005156:	4b28      	ldr	r3, [pc, #160]	; (80051f8 <_tx_timer_initialize+0xa8>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800515c:	4b27      	ldr	r3, [pc, #156]	; (80051fc <_tx_timer_initialize+0xac>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <_tx_timer_initialize+0xb0>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005168:	4b26      	ldr	r3, [pc, #152]	; (8005204 <_tx_timer_initialize+0xb4>)
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800516e:	4b26      	ldr	r3, [pc, #152]	; (8005208 <_tx_timer_initialize+0xb8>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8005174:	2280      	movs	r2, #128	; 0x80
 8005176:	2100      	movs	r1, #0
 8005178:	4824      	ldr	r0, [pc, #144]	; (800520c <_tx_timer_initialize+0xbc>)
 800517a:	f000 fc63 	bl	8005a44 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <_tx_timer_initialize+0xc0>)
 8005180:	4a22      	ldr	r2, [pc, #136]	; (800520c <_tx_timer_initialize+0xbc>)
 8005182:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8005184:	4b23      	ldr	r3, [pc, #140]	; (8005214 <_tx_timer_initialize+0xc4>)
 8005186:	4a21      	ldr	r2, [pc, #132]	; (800520c <_tx_timer_initialize+0xbc>)
 8005188:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800518a:	4b23      	ldr	r3, [pc, #140]	; (8005218 <_tx_timer_initialize+0xc8>)
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <_tx_timer_initialize+0xcc>)
 800518e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005190:	4b21      	ldr	r3, [pc, #132]	; (8005218 <_tx_timer_initialize+0xc8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3304      	adds	r3, #4
 8005196:	4a20      	ldr	r2, [pc, #128]	; (8005218 <_tx_timer_initialize+0xc8>)
 8005198:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800519a:	4b21      	ldr	r3, [pc, #132]	; (8005220 <_tx_timer_initialize+0xd0>)
 800519c:	4a21      	ldr	r2, [pc, #132]	; (8005224 <_tx_timer_initialize+0xd4>)
 800519e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80051a0:	4b21      	ldr	r3, [pc, #132]	; (8005228 <_tx_timer_initialize+0xd8>)
 80051a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80051a8:	4b20      	ldr	r3, [pc, #128]	; (800522c <_tx_timer_initialize+0xdc>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <_tx_timer_initialize+0xd0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <_tx_timer_initialize+0xd8>)
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	491d      	ldr	r1, [pc, #116]	; (800522c <_tx_timer_initialize+0xdc>)
 80051b8:	6809      	ldr	r1, [r1, #0]
 80051ba:	481c      	ldr	r0, [pc, #112]	; (800522c <_tx_timer_initialize+0xdc>)
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	2400      	movs	r4, #0
 80051c0:	9405      	str	r4, [sp, #20]
 80051c2:	2400      	movs	r4, #0
 80051c4:	9404      	str	r4, [sp, #16]
 80051c6:	9003      	str	r0, [sp, #12]
 80051c8:	9102      	str	r1, [sp, #8]
 80051ca:	9201      	str	r2, [sp, #4]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <_tx_timer_initialize+0xe0>)
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <_tx_timer_initialize+0xe4>)
 80051d2:	4919      	ldr	r1, [pc, #100]	; (8005238 <_tx_timer_initialize+0xe8>)
 80051d4:	4819      	ldr	r0, [pc, #100]	; (800523c <_tx_timer_initialize+0xec>)
 80051d6:	f7ff fb4d 	bl	8004874 <_tx_thread_create>
 80051da:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <_tx_timer_initialize+0xf0>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80051e8:	4b16      	ldr	r3, [pc, #88]	; (8005244 <_tx_timer_initialize+0xf4>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000b78 	.word	0x20000b78
 80051fc:	200010d8 	.word	0x200010d8
 8005200:	20000b7c 	.word	0x20000b7c
 8005204:	20000c0c 	.word	0x20000c0c
 8005208:	20000c18 	.word	0x20000c18
 800520c:	20000b80 	.word	0x20000b80
 8005210:	20000c00 	.word	0x20000c00
 8005214:	20000c08 	.word	0x20000c08
 8005218:	20000c04 	.word	0x20000c04
 800521c:	20000bfc 	.word	0x20000bfc
 8005220:	20000ccc 	.word	0x20000ccc
 8005224:	20000cd8 	.word	0x20000cd8
 8005228:	20000cd0 	.word	0x20000cd0
 800522c:	20000cd4 	.word	0x20000cd4
 8005230:	4154494d 	.word	0x4154494d
 8005234:	08005375 	.word	0x08005375
 8005238:	08005b1c 	.word	0x08005b1c
 800523c:	20000c1c 	.word	0x20000c1c
 8005240:	20000c10 	.word	0x20000c10
 8005244:	20000c14 	.word	0x20000c14

08005248 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005248:	b480      	push	{r7}
 800524a:	b089      	sub	sp, #36	; 0x24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d04a      	beq.n	80052f2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005262:	d046      	beq.n	80052f2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d142      	bne.n	80052f2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b20      	cmp	r3, #32
 8005270:	d902      	bls.n	8005278 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8005272:	231f      	movs	r3, #31
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e002      	b.n	800527e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3b01      	subs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800527e:	4b1f      	ldr	r3, [pc, #124]	; (80052fc <_tx_timer_system_activate+0xb4>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800528a:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <_tx_timer_system_activate+0xb8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	429a      	cmp	r2, r3
 8005292:	d30b      	bcc.n	80052ac <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005294:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <_tx_timer_system_activate+0xb8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	109b      	asrs	r3, r3, #2
 800529e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <_tx_timer_system_activate+0xbc>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	e011      	b.n	80052ec <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80052f2:	bf00      	nop
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	20000c08 	.word	0x20000c08
 8005300:	20000c04 	.word	0x20000c04
 8005304:	20000c00 	.word	0x20000c00

08005308 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d026      	beq.n	800536a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	429a      	cmp	r2, r3
 8005328:	d108      	bne.n	800533c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d117      	bne.n	8005364 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	e013      	b.n	8005364 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	429a      	cmp	r2, r3
 8005356:	d105      	bne.n	8005364 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	619a      	str	r2, [r3, #24]
    }
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b098      	sub	sp, #96	; 0x60
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800537c:	2300      	movs	r3, #0
 800537e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a73      	ldr	r2, [pc, #460]	; (8005550 <_tx_timer_thread_entry+0x1dc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	f040 80de 	bne.w	8005546 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800538a:	f3ef 8310 	mrs	r3, PRIMASK
 800538e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005394:	b672      	cpsid	i
    return(int_posture);
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800539a:	4b6e      	ldr	r3, [pc, #440]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f107 020c 	add.w	r2, r7, #12
 80053ae:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80053b0:	4b68      	ldr	r3, [pc, #416]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80053b8:	4b66      	ldr	r3, [pc, #408]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	3304      	adds	r3, #4
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 80053c0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80053c2:	4b64      	ldr	r3, [pc, #400]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	4b64      	ldr	r3, [pc, #400]	; (8005558 <_tx_timer_thread_entry+0x1e4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d103      	bne.n	80053d6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80053ce:	4b63      	ldr	r3, [pc, #396]	; (800555c <_tx_timer_thread_entry+0x1e8>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a60      	ldr	r2, [pc, #384]	; (8005554 <_tx_timer_thread_entry+0x1e0>)
 80053d4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80053d6:	4b62      	ldr	r3, [pc, #392]	; (8005560 <_tx_timer_thread_entry+0x1ec>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053de:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	f383 8810 	msr	PRIMASK, r3
}
 80053e6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053e8:	f3ef 8310 	mrs	r3, PRIMASK
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80053f2:	b672      	cpsid	i
    return(int_posture);
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80053f6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80053f8:	e07f      	b.n	80054fa <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800540a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800540c:	429a      	cmp	r2, r3
 800540e:	d102      	bne.n	8005416 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e00e      	b.n	8005434 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800541c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005420:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005426:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	f107 020c 	add.w	r2, r7, #12
 800542e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b20      	cmp	r3, #32
 800543a:	d911      	bls.n	8005460 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800543c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005446:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800544c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800544e:	f107 0208 	add.w	r2, r7, #8
 8005452:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005456:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005458:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800545a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545c:	60bb      	str	r3, [r7, #8]
 800545e:	e01a      	b.n	8005496 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d009      	beq.n	8005490 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800547e:	f107 0208 	add.w	r2, r7, #8
 8005482:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005488:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800548a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	e002      	b.n	8005496 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005492:	2200      	movs	r2, #0
 8005494:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005496:	4a33      	ldr	r2, [pc, #204]	; (8005564 <_tx_timer_thread_entry+0x1f0>)
 8005498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80054a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80054b2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054b4:	f3ef 8310 	mrs	r3, PRIMASK
 80054b8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80054be:	b672      	cpsid	i
    return(int_posture);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80054c2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80054c4:	4b27      	ldr	r3, [pc, #156]	; (8005564 <_tx_timer_thread_entry+0x1f0>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d105      	bne.n	80054de <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80054d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80054d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80054da:	f7ff feb5 	bl	8005248 <_tx_timer_system_activate>
 80054de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054ea:	f3ef 8310 	mrs	r3, PRIMASK
 80054ee:	623b      	str	r3, [r7, #32]
    return(posture);
 80054f0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80054f2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80054f4:	b672      	cpsid	i
    return(int_posture);
 80054f6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80054f8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f af7c 	bne.w	80053fa <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005502:	4b17      	ldr	r3, [pc, #92]	; (8005560 <_tx_timer_thread_entry+0x1ec>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d116      	bne.n	8005538 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <_tx_timer_thread_entry+0x1f4>)
 800550c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800550e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005510:	2203      	movs	r2, #3
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005516:	2201      	movs	r2, #1
 8005518:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <_tx_timer_thread_entry+0x1f8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	4a12      	ldr	r2, [pc, #72]	; (800556c <_tx_timer_thread_entry+0x1f8>)
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005526:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005530:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005532:	f7ff fc47 	bl	8004dc4 <_tx_thread_system_suspend>
 8005536:	e728      	b.n	800538a <_tx_timer_thread_entry+0x16>
 8005538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800553a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f383 8810 	msr	PRIMASK, r3
}
 8005542:	bf00      	nop
            TX_DISABLE
 8005544:	e721      	b.n	800538a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005546:	bf00      	nop
 8005548:	3760      	adds	r7, #96	; 0x60
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	4154494d 	.word	0x4154494d
 8005554:	20000c08 	.word	0x20000c08
 8005558:	20000c04 	.word	0x20000c04
 800555c:	20000c00 	.word	0x20000c00
 8005560:	20000c0c 	.word	0x20000c0c
 8005564:	20000c18 	.word	0x20000c18
 8005568:	20000c1c 	.word	0x20000c1c
 800556c:	20000b6c 	.word	0x20000b6c

08005570 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b092      	sub	sp, #72	; 0x48
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800557e:	2300      	movs	r3, #0
 8005580:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005588:	2302      	movs	r3, #2
 800558a:	647b      	str	r3, [r7, #68]	; 0x44
 800558c:	e075      	b.n	800567a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	2b34      	cmp	r3, #52	; 0x34
 8005592:	d002      	beq.n	800559a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005594:	2302      	movs	r3, #2
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
 8005598:	e06f      	b.n	800567a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800559a:	f3ef 8310 	mrs	r3, PRIMASK
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80055a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80055a4:	b672      	cpsid	i
    return(int_posture);
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80055a8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80055aa:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <_txe_byte_pool_create+0x128>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	4a39      	ldr	r2, [pc, #228]	; (8005698 <_txe_byte_pool_create+0x128>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	f383 8810 	msr	PRIMASK, r3
}
 80055be:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80055c0:	4b36      	ldr	r3, [pc, #216]	; (800569c <_txe_byte_pool_create+0x12c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	643b      	str	r3, [r7, #64]	; 0x40
 80055ca:	e009      	b.n	80055e0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d00b      	beq.n	80055ec <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80055da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055dc:	3301      	adds	r3, #1
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <_txe_byte_pool_create+0x130>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d3f0      	bcc.n	80055cc <_txe_byte_pool_create+0x5c>
 80055ea:	e000      	b.n	80055ee <_txe_byte_pool_create+0x7e>
                break;
 80055ec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80055ee:	f3ef 8310 	mrs	r3, PRIMASK
 80055f2:	623b      	str	r3, [r7, #32]
    return(posture);
 80055f4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80055f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80055f8:	b672      	cpsid	i
    return(int_posture);
 80055fa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80055fc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <_txe_byte_pool_create+0x128>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3b01      	subs	r3, #1
 8005604:	4a24      	ldr	r2, [pc, #144]	; (8005698 <_txe_byte_pool_create+0x128>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	f383 8810 	msr	PRIMASK, r3
}
 8005612:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005614:	f7ff fa9e 	bl	8004b54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561c:	429a      	cmp	r2, r3
 800561e:	d102      	bne.n	8005626 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005620:	2302      	movs	r3, #2
 8005622:	647b      	str	r3, [r7, #68]	; 0x44
 8005624:	e029      	b.n	800567a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800562c:	2303      	movs	r3, #3
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
 8005630:	e023      	b.n	800567a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b63      	cmp	r3, #99	; 0x63
 8005636:	d802      	bhi.n	800563e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005638:	2305      	movs	r3, #5
 800563a:	647b      	str	r3, [r7, #68]	; 0x44
 800563c:	e01d      	b.n	800567a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800563e:	4b19      	ldr	r3, [pc, #100]	; (80056a4 <_txe_byte_pool_create+0x134>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005646:	4a18      	ldr	r2, [pc, #96]	; (80056a8 <_txe_byte_pool_create+0x138>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d101      	bne.n	8005650 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800564c:	2313      	movs	r3, #19
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005650:	f3ef 8305 	mrs	r3, IPSR
 8005654:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005656:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005658:	4b14      	ldr	r3, [pc, #80]	; (80056ac <_txe_byte_pool_create+0x13c>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005662:	f3ef 8305 	mrs	r3, IPSR
 8005666:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005668:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800566a:	4b10      	ldr	r3, [pc, #64]	; (80056ac <_txe_byte_pool_create+0x13c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005674:	d201      	bcs.n	800567a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005676:	2313      	movs	r3, #19
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7fe fe90 	bl	80043ac <_tx_byte_pool_create>
 800568c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800568e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005690:	4618      	mov	r0, r3
 8005692:	3748      	adds	r7, #72	; 0x48
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000b6c 	.word	0x20000b6c
 800569c:	20000ac4 	.word	0x20000ac4
 80056a0:	20000ac8 	.word	0x20000ac8
 80056a4:	20000ad4 	.word	0x20000ad4
 80056a8:	20000c1c 	.word	0x20000c1c
 80056ac:	2000000c 	.word	0x2000000c

080056b0 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b092      	sub	sp, #72	; 0x48
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80056be:	2300      	movs	r3, #0
 80056c0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d102      	bne.n	80056ce <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80056c8:	230c      	movs	r3, #12
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	e054      	b.n	8005778 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b1c      	cmp	r3, #28
 80056d2:	d002      	beq.n	80056da <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80056d4:	230c      	movs	r3, #12
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	e04e      	b.n	8005778 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80056e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80056e2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80056e4:	b672      	cpsid	i
    return(int_posture);
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80056e8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <_txe_semaphore_create+0x114>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <_txe_semaphore_create+0x114>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8005700:	4b31      	ldr	r3, [pc, #196]	; (80057c8 <_txe_semaphore_create+0x118>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	643b      	str	r3, [r7, #64]	; 0x40
 800570a:	e009      	b.n	8005720 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	429a      	cmp	r2, r3
 8005712:	d00b      	beq.n	800572c <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571c:	3301      	adds	r3, #1
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
 8005720:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <_txe_semaphore_create+0x11c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005726:	429a      	cmp	r2, r3
 8005728:	d3f0      	bcc.n	800570c <_txe_semaphore_create+0x5c>
 800572a:	e000      	b.n	800572e <_txe_semaphore_create+0x7e>
                break;
 800572c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800572e:	f3ef 8310 	mrs	r3, PRIMASK
 8005732:	623b      	str	r3, [r7, #32]
    return(posture);
 8005734:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005736:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005738:	b672      	cpsid	i
    return(int_posture);
 800573a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <_txe_semaphore_create+0x114>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3b01      	subs	r3, #1
 8005744:	4a1f      	ldr	r2, [pc, #124]	; (80057c4 <_txe_semaphore_create+0x114>)
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f383 8810 	msr	PRIMASK, r3
}
 8005752:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005754:	f7ff f9fe 	bl	8004b54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575c:	429a      	cmp	r2, r3
 800575e:	d102      	bne.n	8005766 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8005760:	230c      	movs	r3, #12
 8005762:	647b      	str	r3, [r7, #68]	; 0x44
 8005764:	e008      	b.n	8005778 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005766:	4b1a      	ldr	r3, [pc, #104]	; (80057d0 <_txe_semaphore_create+0x120>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800576c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576e:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <_txe_semaphore_create+0x124>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d101      	bne.n	8005778 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005774:	2313      	movs	r3, #19
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800577a:	2b00      	cmp	r3, #0
 800577c:	d114      	bne.n	80057a8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800577e:	f3ef 8305 	mrs	r3, IPSR
 8005782:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005784:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <_txe_semaphore_create+0x128>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005790:	f3ef 8305 	mrs	r3, IPSR
 8005794:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005796:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <_txe_semaphore_create+0x128>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80057a2:	d201      	bcs.n	80057a8 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80057a4:	2313      	movs	r3, #19
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80057a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7fe ff7a 	bl	80046ac <_tx_semaphore_create>
 80057b8:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80057ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3748      	adds	r7, #72	; 0x48
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000b6c 	.word	0x20000b6c
 80057c8:	20000a9c 	.word	0x20000a9c
 80057cc:	20000aa0 	.word	0x20000aa0
 80057d0:	20000ad4 	.word	0x20000ad4
 80057d4:	20000c1c 	.word	0x20000c1c
 80057d8:	2000000c 	.word	0x2000000c

080057dc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80057f0:	230c      	movs	r3, #12
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e01f      	b.n	8005836 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a15      	ldr	r2, [pc, #84]	; (8005850 <_txe_semaphore_get+0x74>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d002      	beq.n	8005806 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005800:	230c      	movs	r3, #12
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e017      	b.n	8005836 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d014      	beq.n	8005836 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800580c:	f3ef 8305 	mrs	r3, IPSR
 8005810:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8005812:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <_txe_semaphore_get+0x78>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4313      	orrs	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800581e:	2304      	movs	r3, #4
 8005820:	617b      	str	r3, [r7, #20]
 8005822:	e008      	b.n	8005836 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <_txe_semaphore_get+0x7c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4a0b      	ldr	r2, [pc, #44]	; (800585c <_txe_semaphore_get+0x80>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8005832:	2304      	movs	r3, #4
 8005834:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7fe ff86 	bl	8004750 <_tx_semaphore_get>
 8005844:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	53454d41 	.word	0x53454d41
 8005854:	2000000c 	.word	0x2000000c
 8005858:	20000ad4 	.word	0x20000ad4
 800585c:	20000c1c 	.word	0x20000c1c

08005860 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b09a      	sub	sp, #104	; 0x68
 8005864:	af06      	add	r7, sp, #24
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800586e:	2300      	movs	r3, #0
 8005870:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d102      	bne.n	800587e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005878:	230e      	movs	r3, #14
 800587a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800587c:	e0bb      	b.n	80059f6 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800587e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005880:	2bb0      	cmp	r3, #176	; 0xb0
 8005882:	d002      	beq.n	800588a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005884:	230e      	movs	r3, #14
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	e0b5      	b.n	80059f6 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800588a:	f3ef 8310 	mrs	r3, PRIMASK
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005894:	b672      	cpsid	i
    return(int_posture);
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005898:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800589a:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <_txe_thread_create+0x1cc>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <_txe_thread_create+0x1cc>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80058b4:	4b5e      	ldr	r3, [pc, #376]	; (8005a30 <_txe_thread_create+0x1d0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80058ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80058be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c0:	3b01      	subs	r3, #1
 80058c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058c4:	4413      	add	r3, r2
 80058c6:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
 80058d0:	e02b      	b.n	800592a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d101      	bne.n	80058de <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80058da:	2301      	movs	r3, #1
 80058dc:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80058de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d028      	beq.n	8005936 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80058e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d308      	bcc.n	8005900 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80058ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d203      	bcs.n	8005900 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80058f8:	2300      	movs	r3, #0
 80058fa:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80058fc:	2301      	movs	r3, #1
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005906:	429a      	cmp	r2, r3
 8005908:	d308      	bcc.n	800591c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005910:	429a      	cmp	r2, r3
 8005912:	d203      	bcs.n	800591c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005922:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	3301      	adds	r3, #1
 8005928:	647b      	str	r3, [r7, #68]	; 0x44
 800592a:	4b42      	ldr	r3, [pc, #264]	; (8005a34 <_txe_thread_create+0x1d4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005930:	429a      	cmp	r2, r3
 8005932:	d3ce      	bcc.n	80058d2 <_txe_thread_create+0x72>
 8005934:	e000      	b.n	8005938 <_txe_thread_create+0xd8>
                break;
 8005936:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005938:	f3ef 8310 	mrs	r3, PRIMASK
 800593c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800593e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005940:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005942:	b672      	cpsid	i
    return(int_posture);
 8005944:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005948:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <_txe_thread_create+0x1cc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3b01      	subs	r3, #1
 800594e:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <_txe_thread_create+0x1cc>)
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005954:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800595e:	f7ff f8f9 	bl	8004b54 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005966:	429a      	cmp	r2, r3
 8005968:	d102      	bne.n	8005970 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800596a:	230e      	movs	r3, #14
 800596c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800596e:	e042      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8005970:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005976:	2303      	movs	r3, #3
 8005978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800597a:	e03c      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d102      	bne.n	8005988 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005982:	2303      	movs	r3, #3
 8005984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005986:	e036      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800598a:	2bc7      	cmp	r3, #199	; 0xc7
 800598c:	d802      	bhi.n	8005994 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800598e:	2305      	movs	r3, #5
 8005990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005992:	e030      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8005994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005996:	2b1f      	cmp	r3, #31
 8005998:	d902      	bls.n	80059a0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800599a:	230f      	movs	r3, #15
 800599c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800599e:	e02a      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80059a0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80059a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d902      	bls.n	80059ae <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80059a8:	2318      	movs	r3, #24
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059ac:	e023      	b.n	80059f6 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80059ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d902      	bls.n	80059ba <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80059b4:	2310      	movs	r3, #16
 80059b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059b8:	e01d      	b.n	80059f6 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80059ba:	4b1f      	ldr	r3, [pc, #124]	; (8005a38 <_txe_thread_create+0x1d8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <_txe_thread_create+0x1dc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80059c8:	2313      	movs	r3, #19
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059cc:	f3ef 8305 	mrs	r3, IPSR
 80059d0:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80059d2:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80059d4:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <_txe_thread_create+0x1e0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4313      	orrs	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80059de:	f3ef 8305 	mrs	r3, IPSR
 80059e2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80059e4:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80059e6:	4b16      	ldr	r3, [pc, #88]	; (8005a40 <_txe_thread_create+0x1e0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80059f0:	d201      	bcs.n	80059f6 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80059f2:	2313      	movs	r3, #19
 80059f4:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80059f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d112      	bne.n	8005a22 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80059fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059fe:	9305      	str	r3, [sp, #20]
 8005a00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a02:	9304      	str	r3, [sp, #16]
 8005a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a06:	9303      	str	r3, [sp, #12]
 8005a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0a:	9302      	str	r3, [sp, #8]
 8005a0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0e:	9301      	str	r3, [sp, #4]
 8005a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7fe ff2a 	bl	8004874 <_tx_thread_create>
 8005a20:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3750      	adds	r7, #80	; 0x50
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000b6c 	.word	0x20000b6c
 8005a30:	20000adc 	.word	0x20000adc
 8005a34:	20000ae0 	.word	0x20000ae0
 8005a38:	20000ad4 	.word	0x20000ad4
 8005a3c:	20000c1c 	.word	0x20000c1c
 8005a40:	2000000c 	.word	0x2000000c

08005a44 <memset>:
 8005a44:	4402      	add	r2, r0
 8005a46:	4603      	mov	r3, r0
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d100      	bne.n	8005a4e <memset+0xa>
 8005a4c:	4770      	bx	lr
 8005a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a52:	e7f9      	b.n	8005a48 <memset+0x4>

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4d0d      	ldr	r5, [pc, #52]	; (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1b64      	subs	r4, r4, r5
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2600      	movs	r6, #0
 8005a60:	42a6      	cmp	r6, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4d0b      	ldr	r5, [pc, #44]	; (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x44>)
 8005a68:	f000 f826 	bl	8005ab8 <_init>
 8005a6c:	1b64      	subs	r4, r4, r5
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2600      	movs	r6, #0
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7c:	4798      	blx	r3
 8005a7e:	3601      	adds	r6, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a86:	4798      	blx	r3
 8005a88:	3601      	adds	r6, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	08005be0 	.word	0x08005be0
 8005a90:	08005be0 	.word	0x08005be0
 8005a94:	08005be0 	.word	0x08005be0
 8005a98:	08005be4 	.word	0x08005be4

08005a9c <memcpy>:
 8005a9c:	440a      	add	r2, r1
 8005a9e:	4291      	cmp	r1, r2
 8005aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005aa4:	d100      	bne.n	8005aa8 <memcpy+0xc>
 8005aa6:	4770      	bx	lr
 8005aa8:	b510      	push	{r4, lr}
 8005aaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab2:	4291      	cmp	r1, r2
 8005ab4:	d1f9      	bne.n	8005aaa <memcpy+0xe>
 8005ab6:	bd10      	pop	{r4, pc}

08005ab8 <_init>:
 8005ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aba:	bf00      	nop
 8005abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005abe:	bc08      	pop	{r3}
 8005ac0:	469e      	mov	lr, r3
 8005ac2:	4770      	bx	lr

08005ac4 <_fini>:
 8005ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac6:	bf00      	nop
 8005ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aca:	bc08      	pop	{r3}
 8005acc:	469e      	mov	lr, r3
 8005ace:	4770      	bx	lr
