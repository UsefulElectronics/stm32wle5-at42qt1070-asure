
stm32wle5-at42qt1070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e8  080056e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080056e8  080056e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056e8  080056e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000010  08005700  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  08005700  00020ff4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c75  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048fe  00000000  00000000  00038cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017b8  00000000  00000000  0003d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117f  00000000  00000000  0003eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d617  00000000  00000000  0003ff27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df34  00000000  00000000  0005d53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abe7f  00000000  00000000  0007b472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b14  00000000  00000000  001272f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000109  00000000  00000000  0012ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	080055e0 	.word	0x080055e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	080055e0 	.word	0x080055e0

08000180 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000180:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000182:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000186:	4919      	ldr	r1, [pc, #100]	; (80001ec <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000188:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800018e:	4917      	ldr	r1, [pc, #92]	; (80001ec <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000190:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000192:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000194:	4817      	ldr	r0, [pc, #92]	; (80001f4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000196:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000198:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800019c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800019e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80001a2:	4915      	ldr	r1, [pc, #84]	; (80001f8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 80001a4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 80001a6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 80001aa:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 80001ac:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 80001b0:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 80001b4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 80001b8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001bc:	490f      	ldr	r1, [pc, #60]	; (80001fc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 80001be:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 80001c2:	4770      	bx	lr

080001c4 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 80001c4:	f7ff bffe 	b.w	80001c4 <__tx_BadHandler>

080001c8 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 80001c8:	f7ff bffe 	b.w	80001c8 <__tx_HardfaultHandler>

080001cc <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 80001cc:	f7ff bffe 	b.w	80001cc <__tx_SVCallHandler>

080001d0 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 80001d0:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 80001d8:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80001da:	f000 f881 	bl	80002e0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001e2:	4770      	bx	lr

080001e4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80001e4:	f7ff bffe 	b.w	80001e4 <__tx_NMIHandler>

080001e8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80001e8:	f7ff bffe 	b.w	80001e8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ec:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f0:	200009e8 	.word	0x200009e8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80001f8:	000752ff 	.word	0x000752ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001fc:	40ff0000 	.word	0x40ff0000

08000200 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000200:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000204:	4a22      	ldr	r2, [pc, #136]	; (8000290 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000206:	6010      	str	r0, [r2, #0]
    BIC     r0, r0, #4                              // Clear the FPCA bit
    MSR     CONTROL, r0                             // Setup new CONTROL register
#endif

    /* Enable interrupts */
    CPSIE   i
 8000208:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800020a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800020e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000212:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000216:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800021a:	f3bf 8f6f 	isb	sy

0800021e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800021e:	e7fe      	b.n	800021e <__tx_wait_here>

08000220 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  // Build NULL value
 8000224:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000228:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800022a:	b169      	cbz	r1, 8000248 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800022c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800022e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000232:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000236:	4c19      	ldr	r4, [pc, #100]	; (800029c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000238:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800023c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800023e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000242:	b10d      	cbz	r5, 8000248 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000244:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000246:	6023      	str	r3, [r4, #0]

08000248 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000248:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800024a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800024c:	b189      	cbz	r1, 8000272 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800024e:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000250:	b662      	cpsie	i

08000252 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000252:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000254:	4c11      	ldr	r4, [pc, #68]	; (800029c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000256:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000258:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800025c:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800025e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000260:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000264:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000268:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800026c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000270:	4770      	bx	lr

08000272 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000272:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000274:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000276:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000278:	b909      	cbnz	r1, 800027e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800027a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800027c:	e7f9      	b.n	8000272 <__tx_ts_wait>

0800027e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800027e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000282:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000286:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800028a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800028c:	e7e1      	b.n	8000252 <__tx_ts_restore>
 800028e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000290:	20000a84 	.word	0x20000a84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000294:	200009ec 	.word	0x200009ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000298:	200009f0 	.word	0x200009f0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800029c:	20000ff0 	.word	0x20000ff0

080002a0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80002a0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80002a2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80002a6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80002aa:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80002ae:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80002b0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80002b4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80002b6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80002b8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80002ba:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80002bc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80002be:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80002c0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80002c2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80002c4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80002c6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80002c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80002cc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80002d2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80002d4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80002d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80002dc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80002de:	4770      	bx	lr

080002e0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80002e0:	4922      	ldr	r1, [pc, #136]	; (800036c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80002e2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80002e4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80002e8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80002ec:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80002ee:	b13a      	cbz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80002f4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80002f6:	b91a      	cbnz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80002fa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80002fe:	6018      	str	r0, [r3, #0]

08000300 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000300:	491d      	ldr	r1, [pc, #116]	; (8000378 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000302:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000304:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000306:	b122      	cbz	r2, 8000312 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800030a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800030e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000310:	e008      	b.n	8000324 <__tx_timer_done>

08000312 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000312:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000318:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800031a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800031c:	d101      	bne.n	8000322 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000320:	6818      	ldr	r0, [r3, #0]

08000322 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000322:	6008      	str	r0, [r1, #0]

08000324 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000326:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000328:	b912      	cbnz	r2, 8000330 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800032c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800032e:	b1d0      	cbz	r0, 8000366 <__tx_timer_nothing_expired>

08000330 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000330:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000334:	4911      	ldr	r1, [pc, #68]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000336:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000338:	b108      	cbz	r0, 800033e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800033a:	f004 fd61 	bl	8004e00 <_tx_timer_expiration_process>

0800033e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000340:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000342:	b172      	cbz	r2, 8000362 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000344:	f004 fcd0 	bl	8004ce8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800034a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800034c:	b949      	cbnz	r1, 8000362 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000350:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000354:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800035c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800035e:	d000      	beq.n	8000362 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000360:	6002      	str	r2, [r0, #0]

08000362 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000366 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000366:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800036a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800036c:	20000a90 	.word	0x20000a90
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000370:	20000ff0 	.word	0x20000ff0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000374:	20000a94 	.word	0x20000a94
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000378:	20000b20 	.word	0x20000b20
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800037c:	20000b24 	.word	0x20000b24
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000380:	20000b1c 	.word	0x20000b1c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000384:	20000b18 	.word	0x20000b18
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000388:	20000a84 	.word	0x20000a84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	200009ec 	.word	0x200009ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000390:	200009f0 	.word	0x200009f0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000394:	e000ed04 	.word	0xe000ed04

08000398 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80003a4:	2334      	movs	r3, #52	; 0x34
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <tx_application_define+0x40>)
 80003ae:	490b      	ldr	r1, [pc, #44]	; (80003dc <tx_application_define+0x44>)
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <tx_application_define+0x48>)
 80003b2:	f004 ff57 	bl	8005264 <_txe_byte_pool_create>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <tx_application_define+0x48>)
 80003be:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80003c0:	68b8      	ldr	r0, [r7, #8]
 80003c2:	f000 f80f 	bl	80003e4 <App_ThreadX_Init>
 80003c6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d000      	beq.n	80003d0 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80003ce:	e7fe      	b.n	80003ce <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	080055f8 	.word	0x080055f8
 80003e0:	2000042c 	.word	0x2000042c

080003e4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af08      	add	r7, sp, #32
 80003ea:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */
	/* Allocate the stack for thread 0.  */

	/* Create the main thread.  */
	tx_thread_create(&thread_0, 			// Thread Pointer: This is a pointer to the TX_THREAD structure that represents the thread being created. This structure holds information about the thread, such as its stack, entry function, priority, and state.
 80003f0:	23b0      	movs	r3, #176	; 0xb0
 80003f2:	9306      	str	r3, [sp, #24]
 80003f4:	2301      	movs	r3, #1
 80003f6:	9305      	str	r3, [sp, #20]
 80003f8:	2300      	movs	r3, #0
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	2301      	movs	r3, #1
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <App_ThreadX_Init+0x40>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <App_ThreadX_Init+0x44>)
 8000412:	4906      	ldr	r1, [pc, #24]	; (800042c <App_ThreadX_Init+0x48>)
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <App_ThreadX_Init+0x4c>)
 8000416:	f004 ffc5 	bl	80053a4 <_txe_thread_create>
					TX_AUTO_START);			// Auto Start: Specifies whether the thread should start automatically after creation (TX_AUTO_START) or if it should be manually started later.


  /* USER CODE END App_ThreadX_Init */

  return ret;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000460 	.word	0x20000460
 8000428:	08000441 	.word	0x08000441
 800042c:	0800560c 	.word	0x0800560c
 8000430:	20000860 	.word	0x20000860

08000434 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000438:	f003 ffec 	bl	8004414 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <thread_ui_control>:

/* USER CODE BEGIN 1 */
/* Azure RTOS thread entry function */
static void thread_ui_control(ULONG thread_input)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    /* Your thread code here */
	uint8_t key = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

    while (1)
    {
        /* Thread actions */
    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800044c:	2101      	movs	r1, #1
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fd94 	bl	8000f7e <HAL_GPIO_TogglePin>

    	key = main_key_status_read();
 8000456:	f000 f8e3 	bl	8000620 <main_key_status_read>
 800045a:	4603      	mov	r3, r0
 800045c:	73fb      	strb	r3, [r7, #15]

        tx_thread_sleep(10); // Example: Sleep for 100 ticks
 800045e:	200a      	movs	r0, #10
 8000460:	f004 f972 	bl	8004748 <_tx_thread_sleep>
    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000464:	e7f2      	b.n	800044c <thread_ui_control+0xc>

08000466 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800047e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4013      	ands	r3, r2
 8000488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fa73 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f807 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f897 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f855 	bl	8000554 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80004aa:	f7ff ffc3 	bl	8000434 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004ae:	e7fe      	b.n	80004ae <main+0x18>

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09a      	sub	sp, #104	; 0x68
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	2248      	movs	r2, #72	; 0x48
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f005 f862 	bl	8005588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <SystemClock_Config+0xa0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <SystemClock_Config+0xa0>)
 80004e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <SystemClock_Config+0xa0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f2:	2320      	movs	r3, #32
 80004f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f6:	2301      	movs	r3, #1
 80004f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80004fe:	23b0      	movs	r3, #176	; 0xb0
 8000500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000502:	2300      	movs	r3, #0
 8000504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fbd0 	bl	8002cb0 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000516:	f000 f8c1 	bl	800069c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800051a:	234f      	movs	r3, #79	; 0x4f
 800051c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2102      	movs	r1, #2
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ff3b 	bl	80033b4 <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000544:	f000 f8aa 	bl	800069c <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3768      	adds	r7, #104	; 0x68
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	58000400 	.word	0x58000400

08000554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_I2C1_Init+0x74>)
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_I2C1_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303EFD;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <MX_I2C1_Init+0x7c>)
 8000562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_I2C1_Init+0x74>)
 800056c:	2201      	movs	r2, #1
 800056e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000590:	f000 fd0e 	bl	8000fb0 <HAL_I2C_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059a:	f000 f87f 	bl	800069c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059e:	2100      	movs	r1, #0
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_I2C1_Init+0x74>)
 80005a2:	f002 f850 	bl	8002646 <HAL_I2CEx_ConfigAnalogFilter>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005ac:	f000 f876 	bl	800069c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_I2C1_Init+0x74>)
 80005b4:	f002 f891 	bl	80026da <HAL_I2CEx_ConfigDigitalFilter>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005be:	f000 f86d 	bl	800069c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000910 	.word	0x20000910
 80005cc:	40005400 	.word	0x40005400
 80005d0:	20303efd 	.word	0x20303efd

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ff3c 	bl	8000466 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f6:	f000 fcab 	bl	8000f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80005fa:	2301      	movs	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000612:	f000 fb3d 	bl	8000c90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000616:	bf00      	nop
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <main_key_status_read>:

/* USER CODE BEGIN 4 */
uint8_t main_key_status_read(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
	uint8_t key_status_address = 3;
 8000626:	2303      	movs	r3, #3
 8000628:	71fb      	strb	r3, [r7, #7]

	uint8_t key_status = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_GetState(&hi2c1);
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <main_key_status_read+0x54>)
 8000630:	f001 f8ee 	bl	8001810 <HAL_I2C_GetState>

	key_status = HAL_I2C_IsDeviceReady(&hi2c1, AT42QT1070_SLAVE_ADDRESS, 100, 1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	2264      	movs	r2, #100	; 0x64
 800063a:	2136      	movs	r1, #54	; 0x36
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <main_key_status_read+0x54>)
 800063e:	f000 ff31 	bl	80014a4 <HAL_I2C_IsDeviceReady>
 8000642:	4603      	mov	r3, r0
 8000644:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status_address, 1, 1000);
 8000646:	1dfa      	adds	r2, r7, #7
 8000648:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2301      	movs	r3, #1
 8000650:	2136      	movs	r1, #54	; 0x36
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <main_key_status_read+0x54>)
 8000654:	f000 fd3c 	bl	80010d0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status, 1, 1000);
 8000658:	1dba      	adds	r2, r7, #6
 800065a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	2136      	movs	r1, #54	; 0x36
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <main_key_status_read+0x54>)
 8000666:	f000 fe27 	bl	80012b8 <HAL_I2C_Master_Receive>

	return key_status;
 800066a:	79bb      	ldrb	r3, [r7, #6]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000910 	.word	0x20000910

08000678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d101      	bne.n	800068e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800068a:	f000 f99b 	bl	80009c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40014800 	.word	0x40014800

0800069c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>

080006a6 <LL_AHB2_GRP1_EnableClock>:
{
 80006a6:	b480      	push	{r7}
 80006a8:	b085      	sub	sp, #20
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4013      	ands	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006ca:	68fb      	ldr	r3, [r7, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b085      	sub	sp, #20
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80006de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80006ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4013      	ands	r3, r2
 80006f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
	...

08000714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	; 0x58
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2238      	movs	r2, #56	; 0x38
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 ff27 	bl	8005588 <memset>
  if(hi2c->Instance==I2C1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <HAL_I2C_MspInit+0xa8>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d137      	bne.n	80007b4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000748:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800074c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f9fc 	bl	8003b50 <HAL_RCCEx_PeriphCLKConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800075e:	f7ff ff9d 	bl	800069c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	2001      	movs	r0, #1
 8000764:	f7ff ff9f 	bl	80006a6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000768:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800076c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076e:	2312      	movs	r3, #18
 8000770:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	2300      	movs	r3, #0
 8000778:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800077a:	2304      	movs	r3, #4
 800077c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000782:	4619      	mov	r1, r3
 8000784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000788:	f000 fa82 	bl	8000c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800078c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000790:	f7ff ffa1 	bl	80006d6 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	201e      	movs	r0, #30
 800079a:	f000 f9e4 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800079e:	201e      	movs	r0, #30
 80007a0:	f000 f9fb 	bl	8000b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	201f      	movs	r0, #31
 80007aa:	f000 f9dc 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007ae:	201f      	movs	r0, #31
 80007b0:	f000 f9f3 	bl	8000b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3758      	adds	r7, #88	; 0x58
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40005400 	.word	0x40005400

080007c0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000806:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800080a:	f7ff ffd9 	bl	80007c0 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800080e:	f107 0208 	add.w	r2, r7, #8
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f002 ffb5 	bl	8003788 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800081e:	f002 ffa1 	bl	8003764 <HAL_RCC_GetPCLK2Freq>
 8000822:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000826:	4a21      	ldr	r2, [pc, #132]	; (80008ac <HAL_InitTick+0xbc>)
 8000828:	fba2 2303 	umull	r2, r3, r2, r3
 800082c:	0c9b      	lsrs	r3, r3, #18
 800082e:	3b01      	subs	r3, #1
 8000830:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <HAL_InitTick+0xc0>)
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <HAL_InitTick+0xc4>)
 8000836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000838:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <HAL_InitTick+0xc0>)
 800083a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800083e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <HAL_InitTick+0xc0>)
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <HAL_InitTick+0xc0>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <HAL_InitTick+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000852:	4817      	ldr	r0, [pc, #92]	; (80008b0 <HAL_InitTick+0xc0>)
 8000854:	f003 fa96 	bl	8003d84 <HAL_TIM_Base_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800085e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000862:	2b00      	cmp	r3, #0
 8000864:	d11b      	bne.n	800089e <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <HAL_InitTick+0xc0>)
 8000868:	f003 faec 	bl	8003e44 <HAL_TIM_Base_Start_IT>
 800086c:	4603      	mov	r3, r0
 800086e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000872:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000876:	2b00      	cmp	r3, #0
 8000878:	d111      	bne.n	800089e <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800087a:	201d      	movs	r0, #29
 800087c:	f000 f98d 	bl	8000b9a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b0f      	cmp	r3, #15
 8000884:	d808      	bhi.n	8000898 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000886:	2200      	movs	r2, #0
 8000888:	6879      	ldr	r1, [r7, #4]
 800088a:	201d      	movs	r0, #29
 800088c:	f000 f96b 	bl	8000b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_InitTick+0xc8>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e002      	b.n	800089e <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800089e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3730      	adds	r7, #48	; 0x30
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	431bde83 	.word	0x431bde83
 80008b0:	20000964 	.word	0x20000964
 80008b4:	40014800 	.word	0x40014800
 80008b8:	20000004 	.word	0x20000004

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
	...

080008e8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM17_IRQHandler+0x10>)
 80008ee:	f003 faf5 	bl	8003edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000964 	.word	0x20000964

080008fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <I2C1_EV_IRQHandler+0x10>)
 8000902:	f000 fed6 	bl	80016b2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000910 	.word	0x20000910

08000910 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <I2C1_ER_IRQHandler+0x10>)
 8000916:	f000 fee6 	bl	80016e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000910 	.word	0x20000910

08000924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000930:	480d      	ldr	r0, [pc, #52]	; (8000968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000932:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000934:	f7ff fff6 	bl	8000924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095e:	f004 fe1b 	bl	8005598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000962:	f7ff fd98 	bl	8000496 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   r0, =_estack
 8000968:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000974:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8000978:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800097c:	20000ff4 	.word	0x20000ff4

08000980 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800098a:	2300      	movs	r3, #0
 800098c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f8de 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000994:	f002 fed2 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8000998:	4603      	mov	r3, r0
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_Init+0x3c>)
 800099c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099e:	200f      	movs	r0, #15
 80009a0:	f7ff ff26 	bl	80007f0 <HAL_InitTick>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d002      	beq.n	80009b0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	e001      	b.n	80009b4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009b0:	f7ff fea9 	bl	8000706 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009b4:	79fb      	ldrb	r3, [r7, #7]
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000

080009c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_IncTick+0x1c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <HAL_IncTick+0x20>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4413      	add	r3, r2
 80009d4:	4a03      	ldr	r2, [pc, #12]	; (80009e4 <HAL_IncTick+0x20>)
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	20000008 	.word	0x20000008
 80009e4:	200009b0 	.word	0x200009b0

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <HAL_GetTick+0x10>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	200009b0 	.word	0x200009b0

080009fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2e:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <__NVIC_SetPriorityGrouping+0x44>)
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	60d3      	str	r3, [r2, #12]
}
 8000a34:	bf00      	nop
 8000a36:	3714      	adds	r7, #20
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__NVIC_GetPriorityGrouping+0x18>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0a1b      	lsrs	r3, r3, #8
 8000a4e:	f003 0307 	and.w	r3, r3, #7
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	db0b      	blt.n	8000a8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	f003 021f 	and.w	r2, r3, #31
 8000a78:	4906      	ldr	r1, [pc, #24]	; (8000a94 <__NVIC_EnableIRQ+0x34>)
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	095b      	lsrs	r3, r3, #5
 8000a80:	2001      	movs	r0, #1
 8000a82:	fa00 f202 	lsl.w	r2, r0, r2
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff4f 	bl	80009fc <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff66 	bl	8000a44 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ffb4 	bl	8000aec <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff83 	bl	8000a98 <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ff59 	bl	8000a60 <__NVIC_EnableIRQ>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b084      	sub	sp, #16
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d005      	beq.n	8000bda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
 8000bd8:	e047      	b.n	8000c6a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f022 020e 	bic.w	r2, r2, #14
 8000be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f003 021c 	and.w	r2, r3, #28
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	2101      	movs	r1, #1
 8000c18:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c26:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c48:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d003      	beq.n	8000c6a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	4798      	blx	r3
    }
  }
  return status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c82:	b2db      	uxtb	r3, r3
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
	...

08000c90 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b087      	sub	sp, #28
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	e140      	b.n	8000f22 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8132 	beq.w	8000f1c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x40>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	6939      	ldr	r1, [r7, #16]
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0203 	and.w	r2, r3, #3
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 808c 	beq.w	8000f1c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e04:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	089b      	lsrs	r3, r3, #2
 8000e0a:	3302      	adds	r3, #2
 8000e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e2e:	d00d      	beq.n	8000e4c <HAL_GPIO_Init+0x1bc>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a44      	ldr	r2, [pc, #272]	; (8000f44 <HAL_GPIO_Init+0x2b4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d007      	beq.n	8000e48 <HAL_GPIO_Init+0x1b8>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a43      	ldr	r2, [pc, #268]	; (8000f48 <HAL_GPIO_Init+0x2b8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d101      	bne.n	8000e44 <HAL_GPIO_Init+0x1b4>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e004      	b.n	8000e4e <HAL_GPIO_Init+0x1be>
 8000e44:	2307      	movs	r3, #7
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0x1be>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <HAL_GPIO_Init+0x1be>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	f002 0203 	and.w	r2, r2, #3
 8000e54:	0092      	lsls	r2, r2, #2
 8000e56:	4093      	lsls	r3, r2
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e5e:	4938      	ldr	r1, [pc, #224]	; (8000f40 <HAL_GPIO_Init+0x2b0>)
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e90:	4a2e      	ldr	r2, [pc, #184]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000eba:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ec6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000ee6:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ef4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_GPIO_Init+0x2bc>)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f47f aeb7 	bne.w	8000ca0 <HAL_GPIO_Init+0x10>
  }
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	371c      	adds	r7, #28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40010000 	.word	0x40010000
 8000f44:	48000400 	.word	0x48000400
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	58000800 	.word	0x58000800

08000f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f60:	787b      	ldrb	r3, [r7, #1]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6e:	887a      	ldrh	r2, [r7, #2]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4013      	ands	r3, r2
 8000f96:	041a      	lsls	r2, r3, #16
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	400b      	ands	r3, r1
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	619a      	str	r2, [r3, #24]
}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d101      	bne.n	8000fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e081      	b.n	80010c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff fb9c 	bl	8000714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2224      	movs	r2, #36	; 0x24
 8000fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001000:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001010:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	68db      	ldr	r3, [r3, #12]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	e006      	b.n	8001038 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d104      	bne.n	800104a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800106c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691a      	ldr	r2, [r3, #16]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	430a      	orrs	r2, r1
 8001086:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69d9      	ldr	r1, [r3, #28]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2220      	movs	r2, #32
 80010b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	817b      	strh	r3, [r7, #10]
 80010e0:	4613      	mov	r3, r2
 80010e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	f040 80da 	bne.w	80012a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_I2C_Master_Transmit+0x30>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0d3      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001108:	f7ff fc6e 	bl	80009e8 <HAL_GetTick>
 800110c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2319      	movs	r3, #25
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fff0 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e0be      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2221      	movs	r2, #33	; 0x21
 800112e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2210      	movs	r2, #16
 8001136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	893a      	ldrh	r2, [r7, #8]
 800114a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001156:	b29b      	uxth	r3, r3
 8001158:	2bff      	cmp	r3, #255	; 0xff
 800115a:	d90e      	bls.n	800117a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001166:	b2da      	uxtb	r2, r3
 8001168:	8979      	ldrh	r1, [r7, #10]
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f001 f9da 	bl	800252c <I2C_TransferConfig>
 8001178:	e06c      	b.n	8001254 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800117e:	b29a      	uxth	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001188:	b2da      	uxtb	r2, r3
 800118a:	8979      	ldrh	r1, [r7, #10]
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f001 f9c9 	bl	800252c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800119a:	e05b      	b.n	8001254 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	6a39      	ldr	r1, [r7, #32]
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 ffed 	bl	8002180 <I2C_WaitOnTXISFlagUntilTimeout>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e07b      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d8:	3b01      	subs	r3, #1
 80011da:	b29a      	uxth	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d034      	beq.n	8001254 <HAL_I2C_Master_Transmit+0x184>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d130      	bne.n	8001254 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	6a3b      	ldr	r3, [r7, #32]
 80011f8:	2200      	movs	r2, #0
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f000 ff7f 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e04d      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29b      	uxth	r3, r3
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d90e      	bls.n	8001234 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	22ff      	movs	r2, #255	; 0xff
 800121a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001220:	b2da      	uxtb	r2, r3
 8001222:	8979      	ldrh	r1, [r7, #10]
 8001224:	2300      	movs	r3, #0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f001 f97d 	bl	800252c <I2C_TransferConfig>
 8001232:	e00f      	b.n	8001254 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001238:	b29a      	uxth	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001242:	b2da      	uxtb	r2, r3
 8001244:	8979      	ldrh	r1, [r7, #10]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f001 f96c 	bl	800252c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001258:	b29b      	uxth	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d19e      	bne.n	800119c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	6a39      	ldr	r1, [r7, #32]
 8001262:	68f8      	ldr	r0, [r7, #12]
 8001264:	f000 ffcc 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e01a      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2220      	movs	r2, #32
 8001278:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001286:	400b      	ands	r3, r1
 8001288:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2220      	movs	r2, #32
 800128e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	80002000 	.word	0x80002000
 80012b4:	fe00e800 	.word	0xfe00e800

080012b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af02      	add	r7, sp, #8
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	607a      	str	r2, [r7, #4]
 80012c2:	461a      	mov	r2, r3
 80012c4:	460b      	mov	r3, r1
 80012c6:	817b      	strh	r3, [r7, #10]
 80012c8:	4613      	mov	r3, r2
 80012ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	f040 80db 	bne.w	8001490 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_I2C_Master_Receive+0x30>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e0d4      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012f0:	f7ff fb7a 	bl	80009e8 <HAL_GetTick>
 80012f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2319      	movs	r3, #25
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f000 fefc 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e0bf      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2222      	movs	r2, #34	; 0x22
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2210      	movs	r2, #16
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	893a      	ldrh	r2, [r7, #8]
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133e:	b29b      	uxth	r3, r3
 8001340:	2bff      	cmp	r3, #255	; 0xff
 8001342:	d90e      	bls.n	8001362 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	22ff      	movs	r2, #255	; 0xff
 8001348:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	b2da      	uxtb	r2, r3
 8001350:	8979      	ldrh	r1, [r7, #10]
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_I2C_Master_Receive+0x1e4>)
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f001 f8e6 	bl	800252c <I2C_TransferConfig>
 8001360:	e06d      	b.n	800143e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	b2da      	uxtb	r2, r3
 8001372:	8979      	ldrh	r1, [r7, #10]
 8001374:	4b49      	ldr	r3, [pc, #292]	; (800149c <HAL_I2C_Master_Receive+0x1e4>)
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f001 f8d5 	bl	800252c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001382:	e05c      	b.n	800143e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	6a39      	ldr	r1, [r7, #32]
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f000 ff75 	bl	8002278 <I2C_WaitOnRXNEFlagUntilTimeout>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e07c      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d034      	beq.n	800143e <HAL_I2C_Master_Receive+0x186>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d130      	bne.n	800143e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fe8a 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e04d      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2bff      	cmp	r3, #255	; 0xff
 80013fe:	d90e      	bls.n	800141e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	22ff      	movs	r2, #255	; 0xff
 8001404:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140a:	b2da      	uxtb	r2, r3
 800140c:	8979      	ldrh	r1, [r7, #10]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f001 f888 	bl	800252c <I2C_TransferConfig>
 800141c:	e00f      	b.n	800143e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29a      	uxth	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142c:	b2da      	uxtb	r2, r3
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f001 f877 	bl	800252c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001442:	b29b      	uxth	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d19d      	bne.n	8001384 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	6a39      	ldr	r1, [r7, #32]
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fed7 	bl	8002200 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e01a      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2220      	movs	r2, #32
 8001462:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6859      	ldr	r1, [r3, #4]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_I2C_Master_Receive+0x1e8>)
 8001470:	400b      	ands	r3, r1
 8001472:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	80002400 	.word	0x80002400
 80014a0:	fe00e800 	.word	0xfe00e800

080014a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	; 0x28
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	460b      	mov	r3, r1
 80014b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	f040 80f1 	bne.w	80016a8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014d4:	d101      	bne.n	80014da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014d6:	2302      	movs	r3, #2
 80014d8:	e0e7      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_IsDeviceReady+0x44>
 80014e4:	2302      	movs	r3, #2
 80014e6:	e0e0      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2224      	movs	r2, #36	; 0x24
 80014f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d107      	bne.n	8001516 <HAL_I2C_IsDeviceReady+0x72>
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800150c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001510:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001514:	e004      	b.n	8001520 <HAL_I2C_IsDeviceReady+0x7c>
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fa5f 	bl	80009e8 <HAL_GetTick>
 800152a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	f003 0320 	and.w	r3, r3, #32
 8001536:	2b20      	cmp	r3, #32
 8001538:	bf0c      	ite	eq
 800153a:	2301      	moveq	r3, #1
 800153c:	2300      	movne	r3, #0
 800153e:	b2db      	uxtb	r3, r3
 8001540:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b10      	cmp	r3, #16
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001558:	e034      	b.n	80015c4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d01a      	beq.n	8001598 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001562:	f7ff fa41 	bl	80009e8 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d302      	bcc.n	8001578 <HAL_I2C_IsDeviceReady+0xd4>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e088      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015c4:	7ffb      	ldrb	r3, [r7, #31]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_I2C_IsDeviceReady+0x12c>
 80015ca:	7fbb      	ldrb	r3, [r7, #30]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0c4      	beq.n	800155a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d01a      	beq.n	8001614 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	2120      	movs	r1, #32
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fd89 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e058      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2220      	movs	r2, #32
 80015fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	e04a      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	2120      	movs	r1, #32
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 fd6e 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e03d      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2210      	movs	r2, #16
 8001634:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2220      	movs	r2, #32
 800163c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d118      	bne.n	8001678 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001654:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	2120      	movs	r1, #32
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fd4d 	bl	8002100 <I2C_WaitOnFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e01c      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2220      	movs	r2, #32
 8001676:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	f63f af3b 	bhi.w	80014fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80016a8:	2302      	movs	r3, #2
  }
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	68f9      	ldr	r1, [r7, #12]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
  }
}
 80016de:	bf00      	nop
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00f      	beq.n	8001728 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00a      	beq.n	8001728 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001726:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00f      	beq.n	8001752 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f043 0208 	orr.w	r2, r3, #8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001750:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00a      	beq.n	800177c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	f043 0202 	orr.w	r2, r3, #2
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f003 030b 	and.w	r3, r3, #11
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800178c:	68f9      	ldr	r1, [r7, #12]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 fb7e 	bl	8001e90 <I2C_ITError>
  }
}
 8001794:	bf00      	nop
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr

080017ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	70fb      	strb	r3, [r7, #3]
 80017cc:	4613      	mov	r3, r2
 80017ce:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr

080017fe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181e:	b2db      	uxtb	r3, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <I2C_Slave_ISR_IT+0x24>
 800184a:	2302      	movs	r3, #2
 800184c:	e0e1      	b.n	8001a12 <I2C_Slave_ISR_IT+0x1e8>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800186a:	6939      	ldr	r1, [r7, #16]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f9b5 	bl	8001bdc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d04b      	beq.n	8001914 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001882:	2b00      	cmp	r3, #0
 8001884:	d046      	beq.n	8001914 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29b      	uxth	r3, r3
 800188c:	2b00      	cmp	r3, #0
 800188e:	d128      	bne.n	80018e2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b28      	cmp	r3, #40	; 0x28
 800189a:	d108      	bne.n	80018ae <I2C_Slave_ISR_IT+0x84>
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018a2:	d104      	bne.n	80018ae <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80018a4:	6939      	ldr	r1, [r7, #16]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 fa9e 	bl	8001de8 <I2C_ITListenCplt>
 80018ac:	e031      	b.n	8001912 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b29      	cmp	r3, #41	; 0x29
 80018b8:	d10e      	bne.n	80018d8 <I2C_Slave_ISR_IT+0xae>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80018c0:	d00a      	beq.n	80018d8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2210      	movs	r2, #16
 80018c8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f000 fbd7 	bl	800207e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f926 	bl	8001b22 <I2C_ITSlaveSeqCplt>
 80018d6:	e01c      	b.n	8001912 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2210      	movs	r2, #16
 80018de:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80018e0:	e08f      	b.n	8001a02 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2210      	movs	r2, #16
 80018e8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f043 0204 	orr.w	r2, r3, #4
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <I2C_Slave_ISR_IT+0xda>
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001902:	d17e      	bne.n	8001a02 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	4619      	mov	r1, r3
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 fac0 	bl	8001e90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001910:	e077      	b.n	8001a02 <I2C_Slave_ISR_IT+0x1d8>
 8001912:	e076      	b.n	8001a02 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d02f      	beq.n	800197e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001924:	2b00      	cmp	r3, #0
 8001926:	d02a      	beq.n	800197e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29b      	uxth	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d018      	beq.n	8001964 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d14b      	bne.n	8001a06 <I2C_Slave_ISR_IT+0x1dc>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001974:	d047      	beq.n	8001a06 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f8d3 	bl	8001b22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800197c:	e043      	b.n	8001a06 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001992:	6939      	ldr	r1, [r7, #16]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f840 	bl	8001a1a <I2C_ITAddrCplt>
 800199a:	e035      	b.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d030      	beq.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d02b      	beq.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d018      	beq.n	80019ec <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	; 0x28
 80019ea:	e00d      	b.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f2:	d002      	beq.n	80019fa <I2C_Slave_ISR_IT+0x1d0>
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f891 	bl	8001b22 <I2C_ITSlaveSeqCplt>
 8001a00:	e002      	b.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001a02:	bf00      	nop
 8001a04:	e000      	b.n	8001a08 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001a06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001a30:	2b28      	cmp	r3, #40	; 0x28
 8001a32:	d16a      	bne.n	8001b0a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	0c1b      	lsrs	r3, r3, #16
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d138      	bne.n	8001aea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001a78:	897b      	ldrh	r3, [r7, #10]
 8001a7a:	09db      	lsrs	r3, r3, #7
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	89bb      	ldrh	r3, [r7, #12]
 8001a80:	4053      	eors	r3, r2
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f003 0306 	and.w	r3, r3, #6
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11c      	bne.n	8001ac6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d13b      	bne.n	8001b1a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2208      	movs	r2, #8
 8001aae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ab8:	89ba      	ldrh	r2, [r7, #12]
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	4619      	mov	r1, r3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fe7e 	bl	80017c0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ac4:	e029      	b.n	8001b1a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001ac6:	893b      	ldrh	r3, [r7, #8]
 8001ac8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fd5c 	bl	800258c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001adc:	89ba      	ldrh	r2, [r7, #12]
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fe6c 	bl	80017c0 <HAL_I2C_AddrCallback>
}
 8001ae8:	e017      	b.n	8001b1a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 fd4c 	bl	800258c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001afc:	89ba      	ldrh	r2, [r7, #12]
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fe5c 	bl	80017c0 <HAL_I2C_AddrCallback>
}
 8001b08:	e007      	b.n	8001b1a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e00c      	b.n	8001b70 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d007      	beq.n	8001b70 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b6e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b29      	cmp	r3, #41	; 0x29
 8001b7a:	d112      	bne.n	8001ba2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2228      	movs	r2, #40	; 0x28
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2221      	movs	r2, #33	; 0x21
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 fcfd 	bl	800258c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff fdfe 	bl	800179c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001ba0:	e017      	b.n	8001bd2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b2a      	cmp	r3, #42	; 0x2a
 8001bac:	d111      	bne.n	8001bd2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2228      	movs	r2, #40	; 0x28
 8001bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2222      	movs	r2, #34	; 0x22
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fce4 	bl	800258c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fdee 	bl	80017ae <HAL_I2C_SlaveRxCpltCallback>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b21      	cmp	r3, #33	; 0x21
 8001c06:	d002      	beq.n	8001c0e <I2C_ITSlaveCplt+0x32>
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b29      	cmp	r3, #41	; 0x29
 8001c0c:	d108      	bne.n	8001c20 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c0e:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fcba 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2221      	movs	r2, #33	; 0x21
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1e:	e00d      	b.n	8001c3c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	2b22      	cmp	r3, #34	; 0x22
 8001c24:	d002      	beq.n	8001c2c <I2C_ITSlaveCplt+0x50>
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2a:	d107      	bne.n	8001c3c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001c2c:	f248 0102 	movw	r1, #32770	; 0x8002
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 fcab 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2222      	movs	r2, #34	; 0x22
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6859      	ldr	r1, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <I2C_ITSlaveCplt+0x204>)
 8001c58:	400b      	ands	r3, r1
 8001c5a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fa0e 	bl	800207e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01f      	beq.n	8001cc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c92:	e017      	b.n	8001cc4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d020      	beq.n	8001d10 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0204 	orr.w	r2, r3, #4
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	4619      	mov	r1, r3
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f8a4 	bl	8001e90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b28      	cmp	r3, #40	; 0x28
 8001d52:	d141      	bne.n	8001dd8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f846 	bl	8001de8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d5c:	e03c      	b.n	8001dd8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d66:	d014      	beq.n	8001d92 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff feda 	bl	8001b22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <I2C_ITSlaveCplt+0x208>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fd25 	bl	80017da <HAL_I2C_ListenCpltCallback>
}
 8001d90:	e022      	b.n	8001dd8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b22      	cmp	r3, #34	; 0x22
 8001d9c:	d10e      	bne.n	8001dbc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fcfa 	bl	80017ae <HAL_I2C_SlaveRxCpltCallback>
}
 8001dba:	e00d      	b.n	8001dd8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fce2 	bl	800179c <HAL_I2C_SlaveTxCpltCallback>
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	fe00e800 	.word	0xfe00e800
 8001de4:	ffff0000 	.word	0xffff0000

08001de8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a25      	ldr	r2, [pc, #148]	; (8001e8c <I2C_ITListenCplt+0xa4>)
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2220      	movs	r2, #32
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d022      	beq.n	8001e64 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d012      	beq.n	8001e64 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5c:	f043 0204 	orr.w	r2, r3, #4
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e64:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fb8f 	bl	800258c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2210      	movs	r2, #16
 8001e74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fcab 	bl	80017da <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	ffff0000 	.word	0xffff0000

08001e90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <I2C_ITError+0x194>)
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	2b28      	cmp	r3, #40	; 0x28
 8001ec6:	d005      	beq.n	8001ed4 <I2C_ITError+0x44>
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	2b29      	cmp	r3, #41	; 0x29
 8001ecc:	d002      	beq.n	8001ed4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ed2:	d10b      	bne.n	8001eec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fb58 	bl	800258c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2228      	movs	r2, #40	; 0x28
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a50      	ldr	r2, [pc, #320]	; (8002028 <I2C_ITError+0x198>)
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eea:	e011      	b.n	8001f10 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001eec:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb4b 	bl	800258c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b60      	cmp	r3, #96	; 0x60
 8001f00:	d003      	beq.n	8001f0a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d039      	beq.n	8001f92 <I2C_ITError+0x102>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d002      	beq.n	8001f2a <I2C_ITError+0x9a>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	2b21      	cmp	r3, #33	; 0x21
 8001f28:	d133      	bne.n	8001f92 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f38:	d107      	bne.n	8001f4a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f48:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe90 	bl	8000c74 <HAL_DMA_GetState>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d017      	beq.n	8001f8a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a33      	ldr	r2, [pc, #204]	; (800202c <I2C_ITError+0x19c>)
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fe21 	bl	8000bb6 <HAL_DMA_Abort_IT>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04d      	beq.n	8002016 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f84:	4610      	mov	r0, r2
 8001f86:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f88:	e045      	b.n	8002016 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f850 	bl	8002030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f90:	e041      	b.n	8002016 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d039      	beq.n	800200e <I2C_ITError+0x17e>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b12      	cmp	r3, #18
 8001f9e:	d002      	beq.n	8001fa6 <I2C_ITError+0x116>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b22      	cmp	r3, #34	; 0x22
 8001fa4:	d133      	bne.n	800200e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb4:	d107      	bne.n	8001fc6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe52 	bl	8000c74 <HAL_DMA_GetState>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d017      	beq.n	8002006 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	4a14      	ldr	r2, [pc, #80]	; (800202c <I2C_ITError+0x19c>)
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fde3 	bl	8000bb6 <HAL_DMA_Abort_IT>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d011      	beq.n	800201a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002000:	4610      	mov	r0, r2
 8002002:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002004:	e009      	b.n	800201a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f812 	bl	8002030 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800200c:	e005      	b.n	800201a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f80e 	bl	8002030 <I2C_TreatErrorCallback>
  }
}
 8002014:	e002      	b.n	800201c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002016:	bf00      	nop
 8002018:	e000      	b.n	800201c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800201a:	bf00      	nop
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	ffff0000 	.word	0xffff0000
 8002028:	0800182b 	.word	0x0800182b
 800202c:	080020c5 	.word	0x080020c5

08002030 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b60      	cmp	r3, #96	; 0x60
 8002042:	d10e      	bne.n	8002062 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fbcf 	bl	80017fe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002060:	e009      	b.n	8002076 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fbbb 	bl	80017ec <HAL_I2C_ErrorCallback>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800207e:	b480      	push	{r7}
 8002080:	b083      	sub	sp, #12
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d103      	bne.n	800209c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d007      	beq.n	80020ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	619a      	str	r2, [r3, #24]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ee:	2200      	movs	r2, #0
 80020f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f7ff ff9c 	bl	8002030 <I2C_TreatErrorCallback>
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4613      	mov	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002110:	e022      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002118:	d01e      	beq.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211a:	f7fe fc65 	bl	80009e8 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d302      	bcc.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d113      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e00f      	b.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4013      	ands	r3, r2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	461a      	mov	r2, r3
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	429a      	cmp	r2, r3
 8002174:	d0cd      	beq.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800218c:	e02c      	b.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68b9      	ldr	r1, [r7, #8]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f8ea 	bl	800236c <I2C_IsErrorOccurred>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e02a      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a8:	d01e      	beq.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021aa:	f7fe fc1d 	bl	80009e8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d302      	bcc.n	80021c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d113      	bne.n	80021e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e007      	b.n	80021f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d1cb      	bne.n	800218e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800220c:	e028      	b.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f8aa 	bl	800236c <I2C_IsErrorOccurred>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e026      	b.n	8002270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002222:	f7fe fbe1 	bl	80009e8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d113      	bne.n	8002260 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e007      	b.n	8002270 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b20      	cmp	r3, #32
 800226c:	d1cf      	bne.n	800220e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002284:	e064      	b.n	8002350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f86e 	bl	800236c <I2C_IsErrorOccurred>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e062      	b.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d138      	bne.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d105      	bne.n	80022c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	e04e      	b.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d107      	bne.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2204      	movs	r2, #4
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
 80022de:	e002      	b.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2220      	movs	r2, #32
 80022ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e022      	b.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231a:	f7fe fb65 	bl	80009e8 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	d302      	bcc.n	8002330 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d193      	bne.n	8002286 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	fe00e800 	.word	0xfe00e800

0800236c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0310 	and.w	r3, r3, #16
 8002394:	2b00      	cmp	r3, #0
 8002396:	d068      	beq.n	800246a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2210      	movs	r2, #16
 800239e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023a0:	e049      	b.n	8002436 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d045      	beq.n	8002436 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7fe fb1d 	bl	80009e8 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <I2C_IsErrorOccurred+0x54>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d13a      	bne.n	8002436 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e2:	d121      	bne.n	8002428 <I2C_IsErrorOccurred+0xbc>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ea:	d01d      	beq.n	8002428 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d01a      	beq.n	8002428 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002400:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002402:	f7fe faf1 	bl	80009e8 <HAL_GetTick>
 8002406:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002408:	e00e      	b.n	8002428 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800240a:	f7fe faed 	bl	80009e8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b19      	cmp	r3, #25
 8002416:	d907      	bls.n	8002428 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f043 0320 	orr.w	r3, r3, #32
 800241e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002426:	e006      	b.n	8002436 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b20      	cmp	r3, #32
 8002434:	d1e9      	bne.n	800240a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b20      	cmp	r3, #32
 8002442:	d003      	beq.n	800244c <I2C_IsErrorOccurred+0xe0>
 8002444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0aa      	beq.n	80023a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800244c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002450:	2b00      	cmp	r3, #0
 8002452:	d103      	bne.n	800245c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2220      	movs	r2, #32
 800245a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800248c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00b      	beq.n	80024b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f043 0308 	orr.w	r3, r3, #8
 80024a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00b      	beq.n	80024d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f7ff fdcc 	bl	800207e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <I2C_IsErrorOccurred+0x1bc>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800251a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800251e:	4618      	mov	r0, r3
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	fe00e800 	.word	0xfe00e800

0800252c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	460b      	mov	r3, r1
 8002538:	817b      	strh	r3, [r7, #10]
 800253a:	4613      	mov	r3, r2
 800253c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800253e:	897b      	ldrh	r3, [r7, #10]
 8002540:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002544:	7a7b      	ldrb	r3, [r7, #9]
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800254c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	4313      	orrs	r3, r2
 8002556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <I2C_TransferConfig+0x5c>)
 800256c:	430b      	orrs	r3, r1
 800256e:	43db      	mvns	r3, r3
 8002570:	ea02 0103 	and.w	r1, r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	03ff63ff 	.word	0x03ff63ff

0800258c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00f      	beq.n	80025c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80025ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025ba:	2b28      	cmp	r3, #40	; 0x28
 80025bc:	d003      	beq.n	80025c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00f      	beq.n	80025f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80025d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025e4:	2b28      	cmp	r3, #40	; 0x28
 80025e6:	d003      	beq.n	80025f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80025f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da03      	bge.n	8002600 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80025fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d103      	bne.n	800260e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	2b20      	cmp	r3, #32
 8002612:	d103      	bne.n	800261c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d103      	bne.n	800262a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002628:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43da      	mvns	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d138      	bne.n	80026ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002666:	2302      	movs	r3, #2
 8002668:	e032      	b.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002698:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6819      	ldr	r1, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
  }
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b20      	cmp	r3, #32
 80026ee:	d139      	bne.n	8002764 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e033      	b.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2224      	movs	r2, #36	; 0x24
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800272c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a03      	ldr	r2, [pc, #12]	; (8002788 <HAL_PWR_EnableBkUpAccess+0x18>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	58000400 	.word	0x58000400

0800278c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_PWREx_GetVoltageRange+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	58000400 	.word	0x58000400

080027a4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b4:	d101      	bne.n	80027ba <LL_PWR_IsEnabledBkUpAccess+0x16>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	58000400 	.word	0x58000400

080027c8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027da:	6013      	str	r3, [r2, #0]
}
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002812:	d101      	bne.n	8002818 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002822:	b480      	push	{r7}
 8002824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800284c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002850:	6013      	str	r3, [r2, #0]
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800285a:	b480      	push	{r7}
 800285c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800285e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800286c:	d101      	bne.n	8002872 <LL_RCC_HSE_IsReady+0x18>
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <LL_RCC_HSE_IsReady+0x1a>
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c6:	d101      	bne.n	80028cc <LL_RCC_HSI_IsReady+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_RCC_HSI_IsReady+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d101      	bne.n	8002916 <LL_RCC_LSE_IsReady+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_RCC_LSE_IsReady+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr

08002940 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr

08002960 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b02      	cmp	r3, #2
 8002972:	d101      	bne.n	8002978 <LL_RCC_LSI_IsReady+0x18>
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <LL_RCC_LSI_IsReady+0x1a>
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d101      	bne.n	80029d0 <LL_RCC_MSI_IsReady+0x16>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <LL_RCC_MSI_IsReady+0x18>
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d101      	bne.n	80029f0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80029fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	608b      	str	r3, [r1, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ac2:	f023 020f 	bic.w	r2, r3, #15
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	091b      	lsrs	r3, r3, #4
 8002aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	608b      	str	r3, [r1, #8]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc80      	pop	{r7}
 8002b58:	4770      	bx	lr

08002b5a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b82:	6013      	str	r3, [r2, #0]
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bba:	d101      	bne.n	8002bc0 <LL_RCC_PLL_IsReady+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_RCC_PLL_IsReady+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	4770      	bx	lr

08002bca <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0303 	and.w	r3, r3, #3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c36:	d101      	bne.n	8002c3c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c5a:	d101      	bne.n	8002c60 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c7c:	d101      	bne.n	8002c82 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9e:	d101      	bne.n	8002ca4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
	...

08002cb0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e36f      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cc2:	f7ff fed8 	bl	8002a76 <LL_RCC_GetSysClkSource>
 8002cc6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc8:	f7ff ffa1 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 8002ccc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80c4 	beq.w	8002e64 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_RCC_OscConfig+0x3e>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	d176      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d173      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e353      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x68>
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d16:	e006      	b.n	8002d26 <HAL_RCC_OscConfig+0x76>
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d222      	bcs.n	8002d70 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fd68 	bl	8003804 <RCC_SetFlashLatencyFromMSIRange>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e331      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d48:	f043 0308 	orr.w	r3, r3, #8
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fe5d 	bl	8002a28 <LL_RCC_MSI_SetCalibTrimming>
 8002d6e:	e021      	b.n	8002db4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fe44 	bl	8002a28 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fd2d 	bl	8003804 <RCC_SetFlashLatencyFromMSIRange>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e2f6      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002db4:	f000 fcc2 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8002db8:	4603      	mov	r3, r0
 8002dba:	4aa7      	ldr	r2, [pc, #668]	; (8003058 <HAL_RCC_OscConfig+0x3a8>)
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002dbe:	4ba7      	ldr	r3, [pc, #668]	; (800305c <HAL_RCC_OscConfig+0x3ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fd14 	bl	80007f0 <HAL_InitTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d047      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	e2e5      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d02c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dde:	f7ff fdd0 	bl	8002982 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002de2:	f7fd fe01 	bl	80009e8 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dea:	f7fd fdfd 	bl	80009e8 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e2d2      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dfc:	f7ff fddd 	bl	80029ba <LL_RCC_MSI_IsReady>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f1      	beq.n	8002dea <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e10:	f043 0308 	orr.w	r3, r3, #8
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fdf9 	bl	8002a28 <LL_RCC_MSI_SetCalibTrimming>
 8002e36:	e015      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e38:	f7ff fdb1 	bl	800299e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3c:	f7fd fdd4 	bl	80009e8 <HAL_GetTick>
 8002e40:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e44:	f7fd fdd0 	bl	80009e8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e2a5      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e56:	f7ff fdb0 	bl	80029ba <LL_RCC_MSI_IsReady>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f1      	bne.n	8002e44 <HAL_RCC_OscConfig+0x194>
 8002e60:	e000      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e62:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d058      	beq.n	8002f22 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1d2>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d108      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	d105      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d14b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e289      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x204>
 8002eae:	f7ff fcb8 	bl	8002822 <LL_RCC_HSE_Enable>
 8002eb2:	e00d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x220>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002ebc:	d104      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x218>
 8002ebe:	f7ff fc83 	bl	80027c8 <LL_RCC_HSE_EnableTcxo>
 8002ec2:	f7ff fcae 	bl	8002822 <LL_RCC_HSE_Enable>
 8002ec6:	e003      	b.n	8002ed0 <HAL_RCC_OscConfig+0x220>
 8002ec8:	f7ff fcb9 	bl	800283e <LL_RCC_HSE_Disable>
 8002ecc:	f7ff fc8a 	bl	80027e4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d012      	beq.n	8002efe <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fd86 	bl	80009e8 <HAL_GetTick>
 8002edc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fd82 	bl	80009e8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	; 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e257      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ef2:	f7ff fcb2 	bl	800285a <LL_RCC_HSE_IsReady>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f1      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x230>
 8002efc:	e011      	b.n	8002f22 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fd fd73 	bl	80009e8 <HAL_GetTick>
 8002f02:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f06:	f7fd fd6f 	bl	80009e8 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b64      	cmp	r3, #100	; 0x64
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e244      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f18:	f7ff fc9f 	bl	800285a <LL_RCC_HSE_IsReady>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f1      	bne.n	8002f06 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d046      	beq.n	8002fbc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_OscConfig+0x290>
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d10e      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e22a      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fcc0 	bl	80028d6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f56:	e031      	b.n	8002fbc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d019      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f60:	f7ff fc8c 	bl	800287c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fd fd40 	bl	80009e8 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fd fd3c 	bl	80009e8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e211      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f7e:	f7ff fc99 	bl	80028b4 <LL_RCC_HSI_IsReady>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0f1      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fca2 	bl	80028d6 <LL_RCC_HSI_SetCalibTrimming>
 8002f92:	e013      	b.n	8002fbc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f94:	f7ff fc80 	bl	8002898 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd fd26 	bl	80009e8 <HAL_GetTick>
 8002f9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa0:	f7fd fd22 	bl	80009e8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1f7      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fb2:	f7ff fc7f 	bl	80028b4 <LL_RCC_HSI_IsReady>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f1      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d06e      	beq.n	80030a6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d056      	beq.n	800307e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69da      	ldr	r2, [r3, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d031      	beq.n	800304c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e1d0      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d013      	beq.n	8003032 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800300a:	f7ff fc99 	bl	8002940 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800300e:	f7fd fceb 	bl	80009e8 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003016:	f7fd fce7 	bl	80009e8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b11      	cmp	r3, #17
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e1bc      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003028:	f7ff fc9a 	bl	8002960 <LL_RCC_LSI_IsReady>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f1      	bne.n	8003016 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800303a:	f023 0210 	bic.w	r2, r3, #16
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304c:	f7ff fc68 	bl	8002920 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fd fcca 	bl	80009e8 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003056:	e00c      	b.n	8003072 <HAL_RCC_OscConfig+0x3c2>
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003060:	f7fd fcc2 	bl	80009e8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b11      	cmp	r3, #17
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e197      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003072:	f7ff fc75 	bl	8002960 <LL_RCC_LSI_IsReady>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f1      	beq.n	8003060 <HAL_RCC_OscConfig+0x3b0>
 800307c:	e013      	b.n	80030a6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307e:	f7ff fc5f 	bl	8002940 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fd fcb1 	bl	80009e8 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800308a:	f7fd fcad 	bl	80009e8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b11      	cmp	r3, #17
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e182      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800309c:	f7ff fc60 	bl	8002960 <LL_RCC_LSI_IsReady>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f1      	bne.n	800308a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 80d8 	beq.w	8003264 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030b4:	f7ff fb76 	bl	80027a4 <LL_PWR_IsEnabledBkUpAccess>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d113      	bne.n	80030e6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030be:	f7ff fb57 	bl	8002770 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fd fc91 	bl	80009e8 <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fd fc8d 	bl	80009e8 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e162      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80030dc:	f7ff fb62 	bl	80027a4 <LL_PWR_IsEnabledBkUpAccess>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f1      	beq.n	80030ca <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d07b      	beq.n	80031e6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	2b85      	cmp	r3, #133	; 0x85
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b05      	cmp	r3, #5
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003112:	f7fd fc69 	bl	80009e8 <HAL_GetTick>
 8003116:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fd fc5b 	bl	80009e8 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e12e      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003144:	f7ff fbdb 	bl	80028fe <LL_RCC_LSE_IsReady>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ef      	beq.n	800312e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b81      	cmp	r3, #129	; 0x81
 8003154:	d003      	beq.n	800315e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b85      	cmp	r3, #133	; 0x85
 800315c:	d121      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fd fc43 	bl	80009e8 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003178:	e00a      	b.n	8003190 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fd fc35 	bl	80009e8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	f241 3288 	movw	r2, #5000	; 0x1388
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e108      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ec      	beq.n	800317a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031a0:	e060      	b.n	8003264 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a2:	f7fd fc21 	bl	80009e8 <HAL_GetTick>
 80031a6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031bc:	e00a      	b.n	80031d4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031be:	f7fd fc13 	bl	80009e8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0e6      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ec      	bne.n	80031be <HAL_RCC_OscConfig+0x50e>
 80031e4:	e03e      	b.n	8003264 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fbff 	bl	80009e8 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd fbf1 	bl	80009e8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e0c4      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1ec      	bne.n	8003202 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7fd fbde 	bl	80009e8 <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800322e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fd fbd0 	bl	80009e8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0a3      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800325a:	f7ff fb50 	bl	80028fe <LL_RCC_LSE_IsReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ef      	bne.n	8003244 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8099 	beq.w	80033a0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d06c      	beq.n	800334e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2b02      	cmp	r3, #2
 800327a:	d14b      	bne.n	8003314 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800327c:	f7ff fc86 	bl	8002b8c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fd fbb2 	bl	80009e8 <HAL_GetTick>
 8003284:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003288:	f7fd fbae 	bl	80009e8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b0a      	cmp	r3, #10
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e083      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800329a:	f7ff fc85 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f1      	bne.n	8003288 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	4b40      	ldr	r3, [pc, #256]	; (80033ac <HAL_RCC_OscConfig+0x6fc>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b6:	4311      	orrs	r1, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032bc:	0212      	lsls	r2, r2, #8
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ca:	4311      	orrs	r1, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032da:	f7ff fc49 	bl	8002b70 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fd fb7b 	bl	80009e8 <HAL_GetTick>
 80032f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fd fb77 	bl	80009e8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b0a      	cmp	r3, #10
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e04c      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003308:	f7ff fc4e 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f1      	beq.n	80032f6 <HAL_RCC_OscConfig+0x646>
 8003312:	e045      	b.n	80033a0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003314:	f7ff fc3a 	bl	8002b8c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fd fb66 	bl	80009e8 <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003320:	f7fd fb62 	bl	80009e8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b0a      	cmp	r3, #10
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e037      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003332:	f7ff fc39 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f1      	bne.n	8003320 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_OscConfig+0x700>)
 8003348:	4013      	ands	r3, r2
 800334a:	60cb      	str	r3, [r1, #12]
 800334c:	e028      	b.n	80033a0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e023      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0203 	and.w	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	429a      	cmp	r2, r3
 800336e:	d115      	bne.n	800339c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337a:	429a      	cmp	r2, r3
 800337c:	d10e      	bne.n	800339c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	429a      	cmp	r2, r3
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	429a      	cmp	r2, r3
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	11c1808c 	.word	0x11c1808c
 80033b0:	eefefffc 	.word	0xeefefffc

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e10f      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d91b      	bls.n	800340e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b86      	ldr	r3, [pc, #536]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 0207 	bic.w	r2, r3, #7
 80033de:	4984      	ldr	r1, [pc, #528]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033e6:	f7fd faff 	bl	80009e8 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80033ee:	f7fd fafb 	bl	80009e8 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e0f3      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003400:	4b7b      	ldr	r3, [pc, #492]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d1ef      	bne.n	80033ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fb34 	bl	8002a8c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003424:	f7fd fae0 	bl	80009e8 <HAL_GetTick>
 8003428:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800342c:	f7fd fadc 	bl	80009e8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0d4      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800343e:	f7ff fbf1 	bl	8002c24 <LL_RCC_IsActiveFlag_HPRE>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d0f1      	beq.n	800342c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fb2a 	bl	8002ab2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800345e:	f7fd fac3 	bl	80009e8 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003466:	f7fd fabf 	bl	80009e8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0b7      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003478:	f7ff fbe5 	bl	8002c46 <LL_RCC_IsActiveFlag_SHDHPRE>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f1      	beq.n	8003466 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fb23 	bl	8002ade <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003498:	f7fd faa6 	bl	80009e8 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034a0:	f7fd faa2 	bl	80009e8 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e09a      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80034b2:	f7ff fbda 	bl	8002c6a <LL_RCC_IsActiveFlag_PPRE1>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f1      	beq.n	80034a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fb18 	bl	8002b04 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fa88 	bl	80009e8 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034dc:	f7fd fa84 	bl	80009e8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e07c      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80034ee:	f7ff fbcd 	bl	8002c8c <LL_RCC_IsActiveFlag_PPRE2>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f1      	beq.n	80034dc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d043      	beq.n	800358c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d106      	bne.n	800351a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800350c:	f7ff f9a5 	bl	800285a <LL_RCC_HSE_IsReady>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d11e      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e066      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b03      	cmp	r3, #3
 8003520:	d106      	bne.n	8003530 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003522:	f7ff fb41 	bl	8002ba8 <LL_RCC_PLL_IsReady>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d113      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e05b      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003538:	f7ff fa3f 	bl	80029ba <LL_RCC_MSI_IsReady>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d108      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e050      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003546:	f7ff f9b5 	bl	80028b4 <LL_RCC_HSI_IsReady>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e049      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fa79 	bl	8002a50 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800355e:	f7fd fa43 	bl	80009e8 <HAL_GetTick>
 8003562:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003564:	e00a      	b.n	800357c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003566:	f7fd fa3f 	bl	80009e8 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	f241 3288 	movw	r2, #5000	; 0x1388
 8003574:	4293      	cmp	r3, r2
 8003576:	d901      	bls.n	800357c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e035      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357c:	f7ff fa7b 	bl	8002a76 <LL_RCC_GetSysClkSource>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1ec      	bne.n	8003566 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d21b      	bcs.n	80035d2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 0207 	bic.w	r2, r3, #7
 80035a2:	4913      	ldr	r1, [pc, #76]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035aa:	f7fd fa1d 	bl	80009e8 <HAL_GetTick>
 80035ae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80035b2:	f7fd fa19 	bl	80009e8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e011      	b.n	80035e8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_ClockConfig+0x23c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d1ef      	bne.n	80035b2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035d2:	f000 f8b3 	bl	800373c <HAL_RCC_GetHCLKFreq>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <HAL_RCC_ClockConfig+0x240>)
 80035da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd f905 	bl	80007f0 <HAL_InitTick>
 80035e6:	4603      	mov	r3, r0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	58004000 	.word	0x58004000
 80035f4:	20000000 	.word	0x20000000
 80035f8:	20000004 	.word	0x20000004

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	f7ff fa34 	bl	8002a76 <LL_RCC_GetSysClkSource>
 800360e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003610:	f7ff fafd 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 8003614:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x2c>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b0c      	cmp	r3, #12
 8003620:	d139      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d136      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003628:	f7ff f9d7 	bl	80029da <LL_RCC_MSI_IsEnabledRangeSelect>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d115      	bne.n	800365e <HAL_RCC_GetSysClockFreq+0x62>
 8003632:	f7ff f9d2 	bl	80029da <LL_RCC_MSI_IsEnabledRangeSelect>
 8003636:	4603      	mov	r3, r0
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x4e>
 800363c:	f7ff f9dd 	bl	80029fa <LL_RCC_MSI_GetRange>
 8003640:	4603      	mov	r3, r0
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	e005      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x5a>
 800364a:	f7ff f9e1 	bl	8002a10 <LL_RCC_MSI_GetRangeAfterStandby>
 800364e:	4603      	mov	r3, r0
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	4a36      	ldr	r2, [pc, #216]	; (8003730 <HAL_RCC_GetSysClockFreq+0x134>)
 8003658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365c:	e014      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x8c>
 800365e:	f7ff f9bc 	bl	80029da <LL_RCC_MSI_IsEnabledRangeSelect>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_GetSysClockFreq+0x7a>
 8003668:	f7ff f9c7 	bl	80029fa <LL_RCC_MSI_GetRange>
 800366c:	4603      	mov	r3, r0
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 030f 	and.w	r3, r3, #15
 8003674:	e005      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x86>
 8003676:	f7ff f9cb 	bl	8002a10 <LL_RCC_MSI_GetRangeAfterStandby>
 800367a:	4603      	mov	r3, r0
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4a2b      	ldr	r2, [pc, #172]	; (8003730 <HAL_RCC_GetSysClockFreq+0x134>)
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d115      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003694:	e012      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCC_GetSysClockFreq+0x138>)
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	e00c      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036a8:	f7ff f8aa 	bl	8002800 <LL_RCC_HSE_IsEnabledDiv2>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCC_GetSysClockFreq+0x138>)
 80036b4:	617b      	str	r3, [r7, #20]
 80036b6:	e001      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036b8:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036ba:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036bc:	f7ff f9db 	bl	8002a76 <LL_RCC_GetSysClkSource>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d12f      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036c6:	f7ff faa2 	bl	8002c0e <LL_RCC_PLL_GetMainSource>
 80036ca:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0xde>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d003      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0xe4>
 80036d8:	e00d      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_RCC_GetSysClockFreq+0x138>)
 80036dc:	60fb      	str	r3, [r7, #12]
        break;
 80036de:	e00d      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036e0:	f7ff f88e 	bl	8002800 <LL_RCC_HSE_IsEnabledDiv2>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d102      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <HAL_RCC_GetSysClockFreq+0x138>)
 80036ec:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036ee:	e005      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <HAL_RCC_GetSysClockFreq+0x13c>)
 80036f2:	60fb      	str	r3, [r7, #12]
        break;
 80036f4:	e002      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80036fc:	f7ff fa65 	bl	8002bca <LL_RCC_PLL_GetN>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	fb03 f402 	mul.w	r4, r3, r2
 8003708:	f7ff fa76 	bl	8002bf8 <LL_RCC_PLL_GetDivider>
 800370c:	4603      	mov	r3, r0
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	3301      	adds	r3, #1
 8003712:	fbb4 f4f3 	udiv	r4, r4, r3
 8003716:	f7ff fa64 	bl	8002be2 <LL_RCC_PLL_GetR>
 800371a:	4603      	mov	r3, r0
 800371c:	0f5b      	lsrs	r3, r3, #29
 800371e:	3301      	adds	r3, #1
 8003720:	fbb4 f3f3 	udiv	r3, r4, r3
 8003724:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003726:	697b      	ldr	r3, [r7, #20]
}
 8003728:	4618      	mov	r0, r3
 800372a:	371c      	adds	r7, #28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd90      	pop	{r4, r7, pc}
 8003730:	080056a8 	.word	0x080056a8
 8003734:	00f42400 	.word	0x00f42400
 8003738:	01e84800 	.word	0x01e84800

0800373c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b598      	push	{r3, r4, r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003740:	f7ff ff5c 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8003744:	4604      	mov	r4, r0
 8003746:	f7ff f9f0 	bl	8002b2a <LL_RCC_GetAHBPrescaler>
 800374a:	4603      	mov	r3, r0
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	4a03      	ldr	r2, [pc, #12]	; (8003760 <HAL_RCC_GetHCLKFreq+0x24>)
 8003754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003758:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	bd98      	pop	{r3, r4, r7, pc}
 8003760:	08005648 	.word	0x08005648

08003764 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003764:	b598      	push	{r3, r4, r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003768:	f7ff ffe8 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800376c:	4604      	mov	r4, r0
 800376e:	f7ff f9f4 	bl	8002b5a <LL_RCC_GetAPB2Prescaler>
 8003772:	4603      	mov	r3, r0
 8003774:	0adb      	lsrs	r3, r3, #11
 8003776:	4a03      	ldr	r2, [pc, #12]	; (8003784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd98      	pop	{r3, r4, r7, pc}
 8003784:	08005688 	.word	0x08005688

08003788 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d02d      	beq.n	80037f4 <HAL_RCC_GetClockConfig+0x6c>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02a      	beq.n	80037f4 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	224f      	movs	r2, #79	; 0x4f
 80037a2:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 80037d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80037dc:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetClockConfig+0x78>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0207 	and.w	r2, r3, #7
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	601a      	str	r2, [r3, #0]
  }
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	58004000 	.word	0x58004000

08003804 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	4a10      	ldr	r2, [pc, #64]	; (8003858 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800381c:	f7ff f990 	bl	8002b40 <LL_RCC_GetAHB3Prescaler>
 8003820:	4603      	mov	r3, r0
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 030f 	and.w	r3, r3, #15
 8003828:	4a0c      	ldr	r2, [pc, #48]	; (800385c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	4a09      	ldr	r2, [pc, #36]	; (8003860 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9c      	lsrs	r4, r3, #18
 8003840:	f7fe ffa4 	bl	800278c <HAL_PWREx_GetVoltageRange>
 8003844:	4603      	mov	r3, r0
 8003846:	4619      	mov	r1, r3
 8003848:	4620      	mov	r0, r4
 800384a:	f000 f80b 	bl	8003864 <RCC_SetFlashLatency>
 800384e:	4603      	mov	r3, r0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}
 8003858:	080056a8 	.word	0x080056a8
 800385c:	08005648 	.word	0x08005648
 8003860:	431bde83 	.word	0x431bde83

08003864 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08e      	sub	sp, #56	; 0x38
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <RCC_SetFlashLatency+0xf4>)
 8003870:	f107 0320 	add.w	r3, r7, #32
 8003874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003878:	6018      	str	r0, [r3, #0]
 800387a:	3304      	adds	r3, #4
 800387c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800387e:	4a37      	ldr	r2, [pc, #220]	; (800395c <RCC_SetFlashLatency+0xf8>)
 8003880:	f107 0318 	add.w	r3, r7, #24
 8003884:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003888:	6018      	str	r0, [r3, #0]
 800388a:	3304      	adds	r3, #4
 800388c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800388e:	4a34      	ldr	r2, [pc, #208]	; (8003960 <RCC_SetFlashLatency+0xfc>)
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	ca07      	ldmia	r2, {r0, r1, r2}
 8003896:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800389a:	2300      	movs	r3, #0
 800389c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d11b      	bne.n	80038de <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	633b      	str	r3, [r7, #48]	; 0x30
 80038aa:	e014      	b.n	80038d6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	3338      	adds	r3, #56	; 0x38
 80038b2:	443b      	add	r3, r7
 80038b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80038b8:	461a      	mov	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4293      	cmp	r3, r2
 80038be:	d807      	bhi.n	80038d0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3338      	adds	r3, #56	; 0x38
 80038c6:	443b      	add	r3, r7
 80038c8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80038ce:	e021      	b.n	8003914 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	3301      	adds	r3, #1
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d9e7      	bls.n	80038ac <RCC_SetFlashLatency+0x48>
 80038dc:	e01a      	b.n	8003914 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038e2:	e014      	b.n	800390e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	3338      	adds	r3, #56	; 0x38
 80038ea:	443b      	add	r3, r7
 80038ec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d807      	bhi.n	8003908 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	3338      	adds	r3, #56	; 0x38
 80038fe:	443b      	add	r3, r7
 8003900:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003906:	e005      	b.n	8003914 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390a:	3301      	adds	r3, #1
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800390e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003910:	2b02      	cmp	r3, #2
 8003912:	d9e7      	bls.n	80038e4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <RCC_SetFlashLatency+0x100>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f023 0207 	bic.w	r2, r3, #7
 800391c:	4911      	ldr	r1, [pc, #68]	; (8003964 <RCC_SetFlashLatency+0x100>)
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	4313      	orrs	r3, r2
 8003922:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003924:	f7fd f860 	bl	80009e8 <HAL_GetTick>
 8003928:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800392a:	e008      	b.n	800393e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800392c:	f7fd f85c 	bl	80009e8 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e007      	b.n	800394e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <RCC_SetFlashLatency+0x100>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003948:	429a      	cmp	r2, r3
 800394a:	d1ef      	bne.n	800392c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3738      	adds	r7, #56	; 0x38
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	08005618 	.word	0x08005618
 800395c:	08005620 	.word	0x08005620
 8003960:	08005628 	.word	0x08005628
 8003964:	58004000 	.word	0x58004000

08003968 <LL_RCC_LSE_IsReady>:
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800396c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d101      	bne.n	8003980 <LL_RCC_LSE_IsReady+0x18>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_RCC_LSE_IsReady+0x1a>
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <LL_RCC_SetUSARTClockSource>:
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0c1b      	lsrs	r3, r3, #16
 800399e:	43db      	mvns	r3, r3
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039aa:	4313      	orrs	r3, r2
 80039ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_SetI2SClockSource>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <LL_RCC_SetLPUARTClockSource>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <LL_RCC_SetI2CClockSource>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a26:	43db      	mvns	r3, r3
 8003a28:	401a      	ands	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <LL_RCC_SetLPTIMClockSource>:
{
 8003a46:	b480      	push	{r7}
 8003a48:	b083      	sub	sp, #12
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	401a      	ands	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <LL_RCC_SetRNGClockSource>:
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <LL_RCC_SetADCClockSource>:
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ab6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <LL_RCC_SetRTCClockSource>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <LL_RCC_GetRTCClockSource>:
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_ForceBackupDomainReset>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr

08003b2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b60:	2300      	movs	r3, #0
 8003b62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d058      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003b70:	f7fe fdfe 	bl	8002770 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b74:	f7fc ff38 	bl	80009e8 <HAL_GetTick>
 8003b78:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b7a:	e009      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fc ff34 	bl	80009e8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b8e:	e006      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003b90:	4b7b      	ldr	r3, [pc, #492]	; (8003d80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d1ee      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003b9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d13c      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ba4:	f7ff ffa7 	bl	8003af6 <LL_RCC_GetRTCClockSource>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d00f      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc0:	f7ff ffa5 	bl	8003b0e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc4:	f7ff ffb3 	bl	8003b2e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d014      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fc ff04 	bl	80009e8 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003be2:	e00b      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be4:	f7fc ff00 	bl	80009e8 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d902      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	74fb      	strb	r3, [r7, #19]
            break;
 8003bfa:	e004      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003bfc:	f7ff feb4 	bl	8003968 <LL_RCC_LSE_IsReady>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d1ee      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c06:	7cfb      	ldrb	r3, [r7, #19]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff ff5b 	bl	8003acc <LL_RCC_SetRTCClockSource>
 8003c16:	e004      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
 8003c1c:	e001      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1e:	7cfb      	ldrb	r3, [r7, #19]
 8003c20:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d004      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fea9 	bl	800398a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fe9e 	bl	800398a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0320 	and.w	r3, r3, #32
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fec0 	bl	80039e4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fee6 	bl	8003a46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff fedb 	bl	8003a46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fed0 	bl	8003a46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7ff fea9 	bl	8003a0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff fe9e 	bl	8003a0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff fe93 	bl	8003a0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d011      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff fe5e 	bl	80039ba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d06:	d107      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fea5 	bl	8003a78 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d107      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d011      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fea3 	bl	8003aa2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d64:	d107      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003d76:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	58000400 	.word	0x58000400

08003d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e049      	b.n	8003e2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f841 	bl	8003e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 f9ce 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e036      	b.n	8003eca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a16      	ldr	r2, [pc, #88]	; (8003ed4 <HAL_TIM_Base_Start_IT+0x90>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d004      	beq.n	8003e88 <HAL_TIM_Base_Start_IT+0x44>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e86:	d115      	bne.n	8003eb4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_TIM_Base_Start_IT+0x94>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d015      	beq.n	8003ec6 <HAL_TIM_Base_Start_IT+0x82>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea0:	d011      	beq.n	8003ec6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb2:	e008      	b.n	8003ec6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	e000      	b.n	8003ec8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	00010007 	.word	0x00010007

08003edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d122      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d11b      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0202 	mvn.w	r2, #2
 8003f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f904 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8f7 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f906 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d122      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d11b      	bne.n	8003f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0204 	mvn.w	r2, #4
 8003f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8da 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003f78:	e005      	b.n	8003f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8cd 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f8dc 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d122      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0208 	mvn.w	r2, #8
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8b0 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8a3 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8b2 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b10      	cmp	r3, #16
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f886 	bl	800412c <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f879 	bl	800411a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f888 	bl	800413e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b01      	cmp	r3, #1
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0201 	mvn.w	r2, #1
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fc fb0c 	bl	8000678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b80      	cmp	r3, #128	; 0x80
 800406c:	d10e      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b80      	cmp	r3, #128	; 0x80
 800407a:	d107      	bne.n	800408c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f8d7 	bl	800423a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409a:	d10e      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d107      	bne.n	80040ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f8c9 	bl	800424c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c4:	2b40      	cmp	r3, #64	; 0x40
 80040c6:	d10e      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d107      	bne.n	80040e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f835 	bl	8004150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d10e      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d107      	bne.n	8004112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0220 	mvn.w	r2, #32
 800410a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f88b 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr

08004150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	bc80      	pop	{r7}
 8004160:	4770      	bx	lr
	...

08004164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <TIM_Base_SetConfig+0xb8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x20>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <TIM_Base_SetConfig+0xb8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0x52>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0x52>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0x52>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <TIM_Base_SetConfig+0xb8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0xa0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0xa0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a09      	ldr	r2, [pc, #36]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40014400 	.word	0x40014400
 8004224:	40014800 	.word	0x40014800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	bc80      	pop	{r7}
 800425c:	4770      	bx	lr
	...

08004260 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08e      	sub	sp, #56	; 0x38
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800426e:	2234      	movs	r2, #52	; 0x34
 8004270:	2100      	movs	r1, #0
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 f988 	bl	8005588 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1a3 0208 	sub.w	r2, r3, #8
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2202      	movs	r2, #2
 80042ac:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80042b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	3b04      	subs	r3, #4
 80042be:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042cc:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80042ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d0:	3b04      	subs	r3, #4
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80042e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ea:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80042f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f2:	3304      	adds	r3, #4
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80042f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	4a1f      	ldr	r2, [pc, #124]	; (800437c <_tx_byte_pool_create+0x11c>)
 80042fe:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004306:	f3ef 8310 	mrs	r3, PRIMASK
 800430a:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 800430c:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800430e:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004310:	b672      	cpsid	i
#endif
    return(int_posture);
 8004312:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8004314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <_tx_byte_pool_create+0x120>)
 800431a:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <_tx_byte_pool_create+0x124>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8004324:	4a18      	ldr	r2, [pc, #96]	; (8004388 <_tx_byte_pool_create+0x128>)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
 8004336:	e011      	b.n	800435c <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <_tx_byte_pool_create+0x128>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a3a      	ldr	r2, [r7, #32]
 800435a:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <_tx_byte_pool_create+0x124>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a08      	ldr	r2, [pc, #32]	; (8004384 <_tx_byte_pool_create+0x124>)
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f383 8810 	msr	PRIMASK, r3
}
 8004370:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3738      	adds	r7, #56	; 0x38
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	ffffeeee 	.word	0xffffeeee
 8004380:	42595445 	.word	0x42595445
 8004384:	200009e0 	.word	0x200009e0
 8004388:	200009dc 	.word	0x200009dc

0800438c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004390:	f000 f960 	bl	8004654 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004394:	f000 fd56 	bl	8004e44 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004398:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <_tx_initialize_high_level+0x58>)
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <_tx_initialize_high_level+0x5c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <_tx_initialize_high_level+0x60>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <_tx_initialize_high_level+0x64>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <_tx_initialize_high_level+0x68>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <_tx_initialize_high_level+0x6c>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <_tx_initialize_high_level+0x70>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <_tx_initialize_high_level+0x74>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80043c8:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <_tx_initialize_high_level+0x78>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <_tx_initialize_high_level+0x7c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <_tx_initialize_high_level+0x80>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <_tx_initialize_high_level+0x84>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
#endif
}
 80043e0:	bf00      	nop
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	200009b4 	.word	0x200009b4
 80043e8:	200009b8 	.word	0x200009b8
 80043ec:	200009bc 	.word	0x200009bc
 80043f0:	200009c0 	.word	0x200009c0
 80043f4:	200009c4 	.word	0x200009c4
 80043f8:	200009c8 	.word	0x200009c8
 80043fc:	200009d4 	.word	0x200009d4
 8004400:	200009d8 	.word	0x200009d8
 8004404:	200009dc 	.word	0x200009dc
 8004408:	200009e0 	.word	0x200009e0
 800440c:	200009cc 	.word	0x200009cc
 8004410:	200009d0 	.word	0x200009d0

08004414 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004418:	4b10      	ldr	r3, [pc, #64]	; (800445c <_tx_initialize_kernel_enter+0x48>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004420:	d00c      	beq.n	800443c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <_tx_initialize_kernel_enter+0x48>)
 8004424:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004428:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800442a:	f7fb fea9 	bl	8000180 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800442e:	f7ff ffad 	bl	800438c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <_tx_initialize_kernel_enter+0x4c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	4a09      	ldr	r2, [pc, #36]	; (8004460 <_tx_initialize_kernel_enter+0x4c>)
 800443a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <_tx_initialize_kernel_enter+0x48>)
 800443e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004442:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004444:	4b07      	ldr	r3, [pc, #28]	; (8004464 <_tx_initialize_kernel_enter+0x50>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7fb ffa5 	bl	8000398 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800444e:	4b03      	ldr	r3, [pc, #12]	; (800445c <_tx_initialize_kernel_enter+0x48>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8004454:	f7fb fed4 	bl	8000200 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000000c 	.word	0x2000000c
 8004460:	20000a84 	.word	0x20000a84
 8004464:	200009e4 	.word	0x200009e4

08004468 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b092      	sub	sp, #72	; 0x48
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004476:	2300      	movs	r3, #0
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800447a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800447c:	21ef      	movs	r1, #239	; 0xef
 800447e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004480:	f001 f882 	bl	8005588 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004484:	22b0      	movs	r2, #176	; 0xb0
 8004486:	2100      	movs	r1, #0
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f001 f87d 	bl	8005588 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80044a4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044aa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044be:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044c4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80044ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	3b01      	subs	r3, #1
 80044d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d8:	4413      	add	r3, r2
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80044e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d007      	beq.n	80044fa <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80044f8:	e006      	b.n	8004508 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004504:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2203      	movs	r2, #3
 800450c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a48      	ldr	r2, [pc, #288]	; (8004634 <_tx_thread_create+0x1cc>)
 8004512:	655a      	str	r2, [r3, #84]	; 0x54
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800451a:	4947      	ldr	r1, [pc, #284]	; (8004638 <_tx_thread_create+0x1d0>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7fb febf 	bl	80002a0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004522:	f3ef 8310 	mrs	r3, PRIMASK
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800452c:	b672      	cpsid	i
    return(int_posture);
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4a41      	ldr	r2, [pc, #260]	; (800463c <_tx_thread_create+0x1d4>)
 8004536:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004538:	4b41      	ldr	r3, [pc, #260]	; (8004640 <_tx_thread_create+0x1d8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004540:	4a40      	ldr	r2, [pc, #256]	; (8004644 <_tx_thread_create+0x1dc>)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004556:	e016      	b.n	8004586 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004558:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <_tx_thread_create+0x1dc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004564:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004586:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <_tx_thread_create+0x1d8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3301      	adds	r3, #1
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <_tx_thread_create+0x1d8>)
 800458e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004590:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <_tx_thread_create+0x1e0>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a2c      	ldr	r2, [pc, #176]	; (8004648 <_tx_thread_create+0x1e0>)
 8004598:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800459a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800459c:	2b01      	cmp	r3, #1
 800459e:	d129      	bne.n	80045f4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80045a0:	f3ef 8305 	mrs	r3, IPSR
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80045a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80045a8:	4b28      	ldr	r3, [pc, #160]	; (800464c <_tx_thread_create+0x1e4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80045b2:	d30d      	bcc.n	80045d0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80045b4:	4b26      	ldr	r3, [pc, #152]	; (8004650 <_tx_thread_create+0x1e8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80045ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80045c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80045c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80045ce:	e001      	b.n	80045d4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	647b      	str	r3, [r7, #68]	; 0x44
 80045d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	f383 8810 	msr	PRIMASK, r3
}
 80045de:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f969 	bl	80048b8 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80045e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01e      	beq.n	800462a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80045ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80045f2:	e01a      	b.n	800462a <_tx_thread_create+0x1c2>
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f383 8810 	msr	PRIMASK, r3
}
 80045fe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004600:	f3ef 8310 	mrs	r3, PRIMASK
 8004604:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004606:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004608:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800460a:	b672      	cpsid	i
    return(int_posture);
 800460c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <_tx_thread_create+0x1e0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3b01      	subs	r3, #1
 8004616:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <_tx_thread_create+0x1e0>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f383 8810 	msr	PRIMASK, r3
}
 8004624:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004626:	f000 f90f 	bl	8004848 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3748      	adds	r7, #72	; 0x48
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	08004d89 	.word	0x08004d89
 8004638:	080046cd 	.word	0x080046cd
 800463c:	54485244 	.word	0x54485244
 8004640:	200009f8 	.word	0x200009f8
 8004644:	200009f4 	.word	0x200009f4
 8004648:	20000a84 	.word	0x20000a84
 800464c:	2000000c 	.word	0x2000000c
 8004650:	200009f0 	.word	0x200009f0

08004654 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004658:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <_tx_thread_initialize+0x50>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <_tx_thread_initialize+0x54>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	4b11      	ldr	r3, [pc, #68]	; (80046ac <_tx_thread_initialize+0x58>)
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <_tx_thread_initialize+0x5c>)
 800466c:	2220      	movs	r2, #32
 800466e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004670:	2280      	movs	r2, #128	; 0x80
 8004672:	2100      	movs	r1, #0
 8004674:	480f      	ldr	r0, [pc, #60]	; (80046b4 <_tx_thread_initialize+0x60>)
 8004676:	f000 ff87 	bl	8005588 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <_tx_thread_initialize+0x64>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004680:	4b0e      	ldr	r3, [pc, #56]	; (80046bc <_tx_thread_initialize+0x68>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <_tx_thread_initialize+0x6c>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <_tx_thread_initialize+0x70>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <_tx_thread_initialize+0x74>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800469a:	4a0b      	ldr	r2, [pc, #44]	; (80046c8 <_tx_thread_initialize+0x74>)
 800469c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	200009ec 	.word	0x200009ec
 80046a8:	200009f0 	.word	0x200009f0
 80046ac:	200009fc 	.word	0x200009fc
 80046b0:	20000a00 	.word	0x20000a00
 80046b4:	20000a04 	.word	0x20000a04
 80046b8:	200009f4 	.word	0x200009f4
 80046bc:	200009f8 	.word	0x200009f8
 80046c0:	20000a84 	.word	0x20000a84
 80046c4:	20000a88 	.word	0x20000a88
 80046c8:	20000a8c 	.word	0x20000a8c

080046cc <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80046d2:	4b1a      	ldr	r3, [pc, #104]	; (800473c <_tx_thread_shell_entry+0x70>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046e0:	4610      	mov	r0, r2
 80046e2:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80046e4:	4b16      	ldr	r3, [pc, #88]	; (8004740 <_tx_thread_shell_entry+0x74>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80046ec:	4b14      	ldr	r3, [pc, #80]	; (8004740 <_tx_thread_shell_entry+0x74>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6978      	ldr	r0, [r7, #20]
 80046f2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046f4:	f3ef 8310 	mrs	r3, PRIMASK
 80046f8:	60bb      	str	r3, [r7, #8]
    return(posture);
 80046fa:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80046fc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80046fe:	b672      	cpsid	i
    return(int_posture);
 8004700:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004702:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2201      	movs	r2, #1
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2201      	movs	r2, #1
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <_tx_thread_shell_entry+0x78>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <_tx_thread_shell_entry+0x78>)
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800472c:	6978      	ldr	r0, [r7, #20]
 800472e:	f000 f9c3 	bl	8004ab8 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004732:	bf00      	nop
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	200009ec 	.word	0x200009ec
 8004740:	20000a88 	.word	0x20000a88
 8004744:	20000a84 	.word	0x20000a84

08004748 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004750:	f3ef 8310 	mrs	r3, PRIMASK
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800475a:	b672      	cpsid	i
    return(int_posture);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800475e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004760:	4b35      	ldr	r3, [pc, #212]	; (8004838 <_tx_thread_sleep+0xf0>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d108      	bne.n	800477e <_tx_thread_sleep+0x36>
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	f383 8810 	msr	PRIMASK, r3
}
 8004776:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004778:	2313      	movs	r3, #19
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
 800477c:	e056      	b.n	800482c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004784:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004786:	4b2d      	ldr	r3, [pc, #180]	; (800483c <_tx_thread_sleep+0xf4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <_tx_thread_sleep+0x5a>
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800479c:	2313      	movs	r3, #19
 800479e:	637b      	str	r3, [r7, #52]	; 0x34
 80047a0:	e044      	b.n	800482c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	4a26      	ldr	r2, [pc, #152]	; (8004840 <_tx_thread_sleep+0xf8>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <_tx_thread_sleep+0x74>
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f383 8810 	msr	PRIMASK, r3
}
 80047b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80047b6:	2313      	movs	r3, #19
 80047b8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ba:	e037      	b.n	800482c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d108      	bne.n	80047d4 <_tx_thread_sleep+0x8c>
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	f383 8810 	msr	PRIMASK, r3
}
 80047cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80047ce:	2300      	movs	r3, #0
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	e02b      	b.n	800482c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <_tx_thread_sleep+0xfc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <_tx_thread_sleep+0xa6>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f383 8810 	msr	PRIMASK, r3
}
 80047e6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80047e8:	2313      	movs	r3, #19
 80047ea:	637b      	str	r3, [r7, #52]	; 0x34
 80047ec:	e01e      	b.n	800482c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2204      	movs	r2, #4
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	2201      	movs	r2, #1
 80047f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	2200      	movs	r2, #0
 80047fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8004802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004808:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <_tx_thread_sleep+0xfc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <_tx_thread_sleep+0xfc>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f383 8810 	msr	PRIMASK, r3
}
 800481c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800481e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004820:	f000 f94a 	bl	8004ab8 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800482e:	4618      	mov	r0, r3
 8004830:	3738      	adds	r7, #56	; 0x38
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200009ec 	.word	0x200009ec
 800483c:	2000000c 	.word	0x2000000c
 8004840:	20000b34 	.word	0x20000b34
 8004844:	20000a84 	.word	0x20000a84

08004848 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	; 0x24
 800484c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <_tx_thread_system_preempt_check+0x60>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d121      	bne.n	800489e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <_tx_thread_system_preempt_check+0x64>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004860:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <_tx_thread_system_preempt_check+0x68>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	429a      	cmp	r2, r3
 800486c:	d017      	beq.n	800489e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <_tx_thread_system_preempt_check+0x6c>)
 8004870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004874:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004876:	f3ef 8305 	mrs	r3, IPSR
 800487a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800487c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004882:	f3ef 8310 	mrs	r3, PRIMASK
 8004886:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004888:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800488a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800488c:	b662      	cpsie	i
}
 800488e:	bf00      	nop
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f383 8810 	msr	PRIMASK, r3
}
 800489a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800489c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800489e:	bf00      	nop
 80048a0:	3724      	adds	r7, #36	; 0x24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr
 80048a8:	20000a84 	.word	0x20000a84
 80048ac:	200009ec 	.word	0x200009ec
 80048b0:	200009f0 	.word	0x200009f0
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b096      	sub	sp, #88	; 0x58
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80048c0:	f3ef 8310 	mrs	r3, PRIMASK
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80048ca:	b672      	cpsid	i
    return(int_posture);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	334c      	adds	r3, #76	; 0x4c
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fb8d 	bl	8004ffc <_tx_timer_system_deactivate>
 80048e2:	e002      	b.n	80048ea <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80048ea:	4b6c      	ldr	r3, [pc, #432]	; (8004a9c <_tx_thread_system_resume+0x1e4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a6a      	ldr	r2, [pc, #424]	; (8004a9c <_tx_thread_system_resume+0x1e4>)
 80048f2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 8083 	bne.w	8004a04 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8097 	beq.w	8004a36 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d172      	bne.n	80049f6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800491c:	4a60      	ldr	r2, [pc, #384]	; (8004aa0 <_tx_thread_system_resume+0x1e8>)
 800491e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8004926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d154      	bne.n	80049d6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800492c:	495c      	ldr	r1, [pc, #368]	; (8004aa0 <_tx_thread_system_resume+0x1e8>)
 800492e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8004942:	2201      	movs	r2, #1
 8004944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800494c:	4b55      	ldr	r3, [pc, #340]	; (8004aa4 <_tx_thread_system_resume+0x1ec>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004952:	4313      	orrs	r3, r2
 8004954:	4a53      	ldr	r2, [pc, #332]	; (8004aa4 <_tx_thread_system_resume+0x1ec>)
 8004956:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8004958:	4b53      	ldr	r3, [pc, #332]	; (8004aa8 <_tx_thread_system_resume+0x1f0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800495e:	429a      	cmp	r2, r3
 8004960:	d269      	bcs.n	8004a36 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8004962:	4a51      	ldr	r2, [pc, #324]	; (8004aa8 <_tx_thread_system_resume+0x1f0>)
 8004964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004966:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <_tx_thread_system_resume+0x1f4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800496e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8004974:	4a4d      	ldr	r2, [pc, #308]	; (8004aac <_tx_thread_system_resume+0x1f4>)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e05c      	b.n	8004a36 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800497c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004982:	429a      	cmp	r2, r3
 8004984:	d257      	bcs.n	8004a36 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004986:	4a49      	ldr	r2, [pc, #292]	; (8004aac <_tx_thread_system_resume+0x1f4>)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004998:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <_tx_thread_system_resume+0x1e4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800499e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d174      	bne.n	8004a8e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <_tx_thread_system_resume+0x1f8>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80049ac:	f3ef 8305 	mrs	r3, IPSR
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10c      	bne.n	80049d2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80049b8:	f3ef 8310 	mrs	r3, PRIMASK
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80049c0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80049c2:	b662      	cpsie	i
}
 80049c4:	bf00      	nop
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	bf00      	nop
}
 80049d2:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80049d4:	e05b      	b.n	8004a8e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80049d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80049dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80049e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049f2:	621a      	str	r2, [r3, #32]
 80049f4:	e01f      	b.n	8004a36 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
 8004a02:	e018      	b.n	8004a36 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d014      	beq.n	8004a36 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d010      	beq.n	8004a36 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d106      	bne.n	8004a2a <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
 8004a28:	e005      	b.n	8004a36 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2203      	movs	r2, #3
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004a36:	4b1f      	ldr	r3, [pc, #124]	; (8004ab4 <_tx_thread_system_resume+0x1fc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f383 8810 	msr	PRIMASK, r3
}
 8004a46:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004a48:	4b18      	ldr	r3, [pc, #96]	; (8004aac <_tx_thread_system_resume+0x1f4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d020      	beq.n	8004a94 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <_tx_thread_system_resume+0x1e4>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004a5e:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <_tx_thread_system_resume+0x1f8>)
 8004a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a64:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a66:	f3ef 8305 	mrs	r3, IPSR
 8004a6a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004a6c:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a72:	f3ef 8310 	mrs	r3, PRIMASK
 8004a76:	613b      	str	r3, [r7, #16]
    return(posture);
 8004a78:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004a7a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004a7c:	b662      	cpsie	i
}
 8004a7e:	bf00      	nop
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f383 8810 	msr	PRIMASK, r3
}
 8004a8a:	bf00      	nop
}
 8004a8c:	e001      	b.n	8004a92 <_tx_thread_system_resume+0x1da>
                                return;
 8004a8e:	bf00      	nop
 8004a90:	e000      	b.n	8004a94 <_tx_thread_system_resume+0x1dc>
 8004a92:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004a94:	3758      	adds	r7, #88	; 0x58
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000a84 	.word	0x20000a84
 8004aa0:	20000a04 	.word	0x20000a04
 8004aa4:	200009fc 	.word	0x200009fc
 8004aa8:	20000a00 	.word	0x20000a00
 8004aac:	200009f0 	.word	0x200009f0
 8004ab0:	e000ed04 	.word	0xe000ed04
 8004ab4:	200009ec 	.word	0x200009ec

08004ab8 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b09e      	sub	sp, #120	; 0x78
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004ac0:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <_tx_thread_system_suspend+0x210>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8004ace:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ad0:	b672      	cpsid	i
    return(int_posture);
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004ad4:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d112      	bne.n	8004b04 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d008      	beq.n	8004afc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d004      	beq.n	8004afc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	334c      	adds	r3, #76	; 0x4c
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fa20 	bl	8004f3c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	4a72      	ldr	r2, [pc, #456]	; (8004ccc <_tx_thread_system_suspend+0x214>)
 8004b02:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004b04:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <_tx_thread_system_suspend+0x218>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	4a71      	ldr	r2, [pc, #452]	; (8004cd0 <_tx_thread_system_suspend+0x218>)
 8004b0c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f040 80a6 	bne.w	8004c64 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004b2a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d015      	beq.n	8004b5e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b42:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004b44:	4a63      	ldr	r2, [pc, #396]	; (8004cd4 <_tx_thread_system_suspend+0x21c>)
 8004b46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d157      	bne.n	8004c02 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004b52:	4960      	ldr	r1, [pc, #384]	; (8004cd4 <_tx_thread_system_suspend+0x21c>)
 8004b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b56:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b5c:	e051      	b.n	8004c02 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004b5e:	4a5d      	ldr	r2, [pc, #372]	; (8004cd4 <_tx_thread_system_suspend+0x21c>)
 8004b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b62:	2100      	movs	r1, #0
 8004b64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004b72:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <_tx_thread_system_suspend+0x220>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	4a56      	ldr	r2, [pc, #344]	; (8004cd8 <_tx_thread_system_suspend+0x220>)
 8004b7e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004b80:	2300      	movs	r3, #0
 8004b82:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004b84:	4b54      	ldr	r3, [pc, #336]	; (8004cd8 <_tx_thread_system_suspend+0x220>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d12b      	bne.n	8004be8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004b90:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <_tx_thread_system_suspend+0x224>)
 8004b92:	2220      	movs	r2, #32
 8004b94:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004b96:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <_tx_thread_system_suspend+0x228>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <_tx_thread_system_suspend+0x218>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8004bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 8081 	bne.w	8004cb8 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004bb6:	4b4b      	ldr	r3, [pc, #300]	; (8004ce4 <_tx_thread_system_suspend+0x22c>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004bbe:	f3ef 8305 	mrs	r3, IPSR
 8004bc2:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10c      	bne.n	8004be4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bca:	f3ef 8310 	mrs	r3, PRIMASK
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004bd4:	b662      	cpsie	i
}
 8004bd6:	bf00      	nop
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	bf00      	nop
}
 8004be4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004be6:	e067      	b.n	8004cb8 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bea:	fa93 f3a3 	rbit	r3, r3
 8004bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf2:	fab3 f383 	clz	r3, r3
 8004bf6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4a37      	ldr	r2, [pc, #220]	; (8004cdc <_tx_thread_system_suspend+0x224>)
 8004c00:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004c02:	4b37      	ldr	r3, [pc, #220]	; (8004ce0 <_tx_thread_system_suspend+0x228>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d12b      	bne.n	8004c64 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004c0c:	4b33      	ldr	r3, [pc, #204]	; (8004cdc <_tx_thread_system_suspend+0x224>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a30      	ldr	r2, [pc, #192]	; (8004cd4 <_tx_thread_system_suspend+0x21c>)
 8004c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c16:	4a32      	ldr	r2, [pc, #200]	; (8004ce0 <_tx_thread_system_suspend+0x228>)
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c26:	4b2a      	ldr	r3, [pc, #168]	; (8004cd0 <_tx_thread_system_suspend+0x218>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8004c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d144      	bne.n	8004cbc <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <_tx_thread_system_suspend+0x22c>)
 8004c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c38:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c3a:	f3ef 8305 	mrs	r3, IPSR
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10c      	bne.n	8004c60 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c46:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004c50:	b662      	cpsie	i
}
 8004c52:	bf00      	nop
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	bf00      	nop
}
 8004c60:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004c62:	e02b      	b.n	8004cbc <_tx_thread_system_suspend+0x204>
 8004c64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c66:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004c70:	4b1b      	ldr	r3, [pc, #108]	; (8004ce0 <_tx_thread_system_suspend+0x228>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d022      	beq.n	8004cc0 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <_tx_thread_system_suspend+0x218>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8004c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11c      	bne.n	8004cc0 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c86:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <_tx_thread_system_suspend+0x22c>)
 8004c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c8e:	f3ef 8305 	mrs	r3, IPSR
 8004c92:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004c94:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9e:	617b      	str	r3, [r7, #20]
    return(posture);
 8004ca0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004ca2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004ca4:	b662      	cpsie	i
}
 8004ca6:	bf00      	nop
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f383 8810 	msr	PRIMASK, r3
}
 8004cb2:	bf00      	nop
}
 8004cb4:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004cb6:	e003      	b.n	8004cc0 <_tx_thread_system_suspend+0x208>
                return;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <_tx_thread_system_suspend+0x20a>
            return;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <_tx_thread_system_suspend+0x20a>
    return;
 8004cc0:	bf00      	nop
}
 8004cc2:	3778      	adds	r7, #120	; 0x78
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	200009ec 	.word	0x200009ec
 8004ccc:	20000ff0 	.word	0x20000ff0
 8004cd0:	20000a84 	.word	0x20000a84
 8004cd4:	20000a04 	.word	0x20000a04
 8004cd8:	200009fc 	.word	0x200009fc
 8004cdc:	20000a00 	.word	0x20000a00
 8004ce0:	200009f0 	.word	0x200009f0
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <_tx_thread_time_slice+0x88>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf8:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8004cfc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004cfe:	b672      	cpsid	i
    return(int_posture);
 8004d00:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004d02:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004d04:	4b1b      	ldr	r3, [pc, #108]	; (8004d74 <_tx_thread_time_slice+0x8c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d024      	beq.n	8004d5a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d120      	bne.n	8004d5a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	4a14      	ldr	r2, [pc, #80]	; (8004d78 <_tx_thread_time_slice+0x90>)
 8004d26:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d013      	beq.n	8004d5a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d10d      	bne.n	8004d5a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	6a12      	ldr	r2, [r2, #32]
 8004d46:	490d      	ldr	r1, [pc, #52]	; (8004d7c <_tx_thread_time_slice+0x94>)
 8004d48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004d4c:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <_tx_thread_time_slice+0x98>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <_tx_thread_time_slice+0x94>)
 8004d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d56:	4a0b      	ldr	r2, [pc, #44]	; (8004d84 <_tx_thread_time_slice+0x9c>)
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f383 8810 	msr	PRIMASK, r3
}
 8004d64:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	200009ec 	.word	0x200009ec
 8004d74:	20000a94 	.word	0x20000a94
 8004d78:	20000ff0 	.word	0x20000ff0
 8004d7c:	20000a04 	.word	0x20000a04
 8004d80:	20000a00 	.word	0x20000a00
 8004d84:	200009f0 	.word	0x200009f0

08004d88 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08a      	sub	sp, #40	; 0x28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	617b      	str	r3, [r7, #20]
    return(posture);
 8004d9a:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004d9c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d9e:	b672      	cpsid	i
    return(int_posture);
 8004da0:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8004da2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d10e      	bne.n	8004dca <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <_tx_thread_timeout+0x74>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3301      	adds	r3, #1
 8004db2:	4a12      	ldr	r2, [pc, #72]	; (8004dfc <_tx_thread_timeout+0x74>)
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dc4:	f7ff fd78 	bl	80048b8 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004dc8:	e013      	b.n	8004df2 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dce:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f383 8810 	msr	PRIMASK, r3
}
 8004de2:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	69b9      	ldr	r1, [r7, #24]
 8004dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004df0:	4798      	blx	r3
}
 8004df2:	bf00      	nop
 8004df4:	3728      	adds	r7, #40	; 0x28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000a84 	.word	0x20000a84

08004e00 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e06:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0a:	607b      	str	r3, [r7, #4]
    return(posture);
 8004e0c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004e0e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e10:	b672      	cpsid	i
    return(int_posture);
 8004e12:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004e14:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004e16:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <_tx_timer_expiration_process+0x3c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <_tx_timer_expiration_process+0x3c>)
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004e2c:	4804      	ldr	r0, [pc, #16]	; (8004e40 <_tx_timer_expiration_process+0x40>)
 8004e2e:	f7ff fd43 	bl	80048b8 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004e32:	bf00      	nop
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000a84 	.word	0x20000a84
 8004e40:	20000b34 	.word	0x20000b34

08004e44 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004e44:	b590      	push	{r4, r7, lr}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <_tx_timer_initialize+0xa8>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004e50:	4b27      	ldr	r3, [pc, #156]	; (8004ef0 <_tx_timer_initialize+0xac>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004e56:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <_tx_timer_initialize+0xb0>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <_tx_timer_initialize+0xb4>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004e62:	4b26      	ldr	r3, [pc, #152]	; (8004efc <_tx_timer_initialize+0xb8>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4824      	ldr	r0, [pc, #144]	; (8004f00 <_tx_timer_initialize+0xbc>)
 8004e6e:	f000 fb8b 	bl	8005588 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004e72:	4b24      	ldr	r3, [pc, #144]	; (8004f04 <_tx_timer_initialize+0xc0>)
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <_tx_timer_initialize+0xbc>)
 8004e76:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004e78:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <_tx_timer_initialize+0xc4>)
 8004e7a:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <_tx_timer_initialize+0xbc>)
 8004e7c:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004e7e:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <_tx_timer_initialize+0xc8>)
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <_tx_timer_initialize+0xcc>)
 8004e82:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004e84:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <_tx_timer_initialize+0xc8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <_tx_timer_initialize+0xc8>)
 8004e8c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <_tx_timer_initialize+0xd0>)
 8004e90:	4a21      	ldr	r2, [pc, #132]	; (8004f18 <_tx_timer_initialize+0xd4>)
 8004e92:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004e94:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <_tx_timer_initialize+0xd8>)
 8004e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e9a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <_tx_timer_initialize+0xdc>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <_tx_timer_initialize+0xd0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <_tx_timer_initialize+0xd8>)
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	491d      	ldr	r1, [pc, #116]	; (8004f20 <_tx_timer_initialize+0xdc>)
 8004eac:	6809      	ldr	r1, [r1, #0]
 8004eae:	481c      	ldr	r0, [pc, #112]	; (8004f20 <_tx_timer_initialize+0xdc>)
 8004eb0:	6800      	ldr	r0, [r0, #0]
 8004eb2:	2400      	movs	r4, #0
 8004eb4:	9405      	str	r4, [sp, #20]
 8004eb6:	2400      	movs	r4, #0
 8004eb8:	9404      	str	r4, [sp, #16]
 8004eba:	9003      	str	r0, [sp, #12]
 8004ebc:	9102      	str	r1, [sp, #8]
 8004ebe:	9201      	str	r2, [sp, #4]
 8004ec0:	9300      	str	r3, [sp, #0]
 8004ec2:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <_tx_timer_initialize+0xe0>)
 8004ec4:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <_tx_timer_initialize+0xe4>)
 8004ec6:	4919      	ldr	r1, [pc, #100]	; (8004f2c <_tx_timer_initialize+0xe8>)
 8004ec8:	4819      	ldr	r0, [pc, #100]	; (8004f30 <_tx_timer_initialize+0xec>)
 8004eca:	f7ff facd 	bl	8004468 <_tx_thread_create>
 8004ece:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e5      	bne.n	8004ea2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <_tx_timer_initialize+0xf0>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <_tx_timer_initialize+0xf4>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000a90 	.word	0x20000a90
 8004ef0:	20000ff0 	.word	0x20000ff0
 8004ef4:	20000a94 	.word	0x20000a94
 8004ef8:	20000b24 	.word	0x20000b24
 8004efc:	20000b30 	.word	0x20000b30
 8004f00:	20000a98 	.word	0x20000a98
 8004f04:	20000b18 	.word	0x20000b18
 8004f08:	20000b20 	.word	0x20000b20
 8004f0c:	20000b1c 	.word	0x20000b1c
 8004f10:	20000b14 	.word	0x20000b14
 8004f14:	20000be4 	.word	0x20000be4
 8004f18:	20000bf0 	.word	0x20000bf0
 8004f1c:	20000be8 	.word	0x20000be8
 8004f20:	20000bec 	.word	0x20000bec
 8004f24:	4154494d 	.word	0x4154494d
 8004f28:	08005069 	.word	0x08005069
 8004f2c:	08005634 	.word	0x08005634
 8004f30:	20000b34 	.word	0x20000b34
 8004f34:	20000b28 	.word	0x20000b28
 8004f38:	20000b2c 	.word	0x20000b2c

08004f3c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	; 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d04a      	beq.n	8004fe6 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d046      	beq.n	8004fe6 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d142      	bne.n	8004fe6 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d902      	bls.n	8004f6c <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8004f66:	231f      	movs	r3, #31
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	e002      	b.n	8004f72 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <_tx_timer_system_activate+0xb4>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004f7e:	4b1d      	ldr	r3, [pc, #116]	; (8004ff4 <_tx_timer_system_activate+0xb8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d30b      	bcc.n	8004fa0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8004f88:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <_tx_timer_system_activate+0xb8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	109b      	asrs	r3, r3, #2
 8004f92:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8004f94:	4b18      	ldr	r3, [pc, #96]	; (8004ff8 <_tx_timer_system_activate+0xbc>)
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d109      	bne.n	8004fbc <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	e011      	b.n	8004fe0 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8004fe6:	bf00      	nop
 8004fe8:	3724      	adds	r7, #36	; 0x24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr
 8004ff0:	20000b20 	.word	0x20000b20
 8004ff4:	20000b1c 	.word	0x20000b1c
 8004ff8:	20000b18 	.word	0x20000b18

08004ffc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d026      	beq.n	800505e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d108      	bne.n	8005030 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	429a      	cmp	r2, r3
 8005026:	d117      	bne.n	8005058 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e013      	b.n	8005058 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	429a      	cmp	r2, r3
 800504a:	d105      	bne.n	8005058 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]
    }
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b098      	sub	sp, #96	; 0x60
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005070:	2300      	movs	r3, #0
 8005072:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a73      	ldr	r2, [pc, #460]	; (8005244 <_tx_timer_thread_entry+0x1dc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	f040 80de 	bne.w	800523a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800507e:	f3ef 8310 	mrs	r3, PRIMASK
 8005082:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005088:	b672      	cpsid	i
    return(int_posture);
 800508a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800508c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800508e:	4b6e      	ldr	r3, [pc, #440]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f107 020c 	add.w	r2, r7, #12
 80050a2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80050ac:	4b66      	ldr	r3, [pc, #408]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	4a65      	ldr	r2, [pc, #404]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 80050b4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80050b6:	4b64      	ldr	r3, [pc, #400]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b64      	ldr	r3, [pc, #400]	; (800524c <_tx_timer_thread_entry+0x1e4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d103      	bne.n	80050ca <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80050c2:	4b63      	ldr	r3, [pc, #396]	; (8005250 <_tx_timer_thread_entry+0x1e8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a60      	ldr	r2, [pc, #384]	; (8005248 <_tx_timer_thread_entry+0x1e0>)
 80050c8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80050ca:	4b62      	ldr	r3, [pc, #392]	; (8005254 <_tx_timer_thread_entry+0x1ec>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	f383 8810 	msr	PRIMASK, r3
}
 80050da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050dc:	f3ef 8310 	mrs	r3, PRIMASK
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80050e6:	b672      	cpsid	i
    return(int_posture);
 80050e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80050ec:	e07f      	b.n	80051ee <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80050fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	429a      	cmp	r2, r3
 8005102:	d102      	bne.n	800510a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e00e      	b.n	8005128 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005114:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800511a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800511c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511e:	f107 020c 	add.w	r2, r7, #12
 8005122:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005126:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b20      	cmp	r3, #32
 800512e:	d911      	bls.n	8005154 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005142:	f107 0208 	add.w	r2, r7, #8
 8005146:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800514c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800514e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	e01a      	b.n	800518a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005166:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d009      	beq.n	8005184 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005172:	f107 0208 	add.w	r2, r7, #8
 8005176:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800517c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	e002      	b.n	800518a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800518a:	4a33      	ldr	r2, [pc, #204]	; (8005258 <_tx_timer_thread_entry+0x1f0>)
 800518c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	f383 8810 	msr	PRIMASK, r3
}
 800519a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800519c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80051a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80051a6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051a8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80051b2:	b672      	cpsid	i
    return(int_posture);
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80051b6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <_tx_timer_thread_entry+0x1f0>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d105      	bne.n	80051d2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	2200      	movs	r2, #0
 80051ca:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80051cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80051ce:	f7ff feb5 	bl	8004f3c <_tx_timer_system_activate>
 80051d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051de:	f3ef 8310 	mrs	r3, PRIMASK
 80051e2:	623b      	str	r3, [r7, #32]
    return(posture);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80051e6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80051e8:	b672      	cpsid	i
    return(int_posture);
 80051ea:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80051ec:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f47f af7c 	bne.w	80050ee <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80051f6:	4b17      	ldr	r3, [pc, #92]	; (8005254 <_tx_timer_thread_entry+0x1ec>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d116      	bne.n	800522c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80051fe:	4b17      	ldr	r3, [pc, #92]	; (800525c <_tx_timer_thread_entry+0x1f4>)
 8005200:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005204:	2203      	movs	r2, #3
 8005206:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800520a:	2201      	movs	r2, #1
 800520c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <_tx_timer_thread_entry+0x1f8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a12      	ldr	r2, [pc, #72]	; (8005260 <_tx_timer_thread_entry+0x1f8>)
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005224:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005226:	f7ff fc47 	bl	8004ab8 <_tx_thread_system_suspend>
 800522a:	e728      	b.n	800507e <_tx_timer_thread_entry+0x16>
 800522c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f383 8810 	msr	PRIMASK, r3
}
 8005236:	bf00      	nop
            TX_DISABLE
 8005238:	e721      	b.n	800507e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800523a:	bf00      	nop
 800523c:	3760      	adds	r7, #96	; 0x60
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	4154494d 	.word	0x4154494d
 8005248:	20000b20 	.word	0x20000b20
 800524c:	20000b1c 	.word	0x20000b1c
 8005250:	20000b18 	.word	0x20000b18
 8005254:	20000b24 	.word	0x20000b24
 8005258:	20000b30 	.word	0x20000b30
 800525c:	20000b34 	.word	0x20000b34
 8005260:	20000a84 	.word	0x20000a84

08005264 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b092      	sub	sp, #72	; 0x48
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005272:	2300      	movs	r3, #0
 8005274:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d102      	bne.n	8005282 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800527c:	2302      	movs	r3, #2
 800527e:	647b      	str	r3, [r7, #68]	; 0x44
 8005280:	e075      	b.n	800536e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005284:	2b34      	cmp	r3, #52	; 0x34
 8005286:	d002      	beq.n	800528e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005288:	2302      	movs	r3, #2
 800528a:	647b      	str	r3, [r7, #68]	; 0x44
 800528c:	e06f      	b.n	800536e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800528e:	f3ef 8310 	mrs	r3, PRIMASK
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005298:	b672      	cpsid	i
    return(int_posture);
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800529e:	4b3b      	ldr	r3, [pc, #236]	; (800538c <_txe_byte_pool_create+0x128>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	3301      	adds	r3, #1
 80052a4:	4a39      	ldr	r2, [pc, #228]	; (800538c <_txe_byte_pool_create+0x128>)
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80052b4:	4b36      	ldr	r3, [pc, #216]	; (8005390 <_txe_byte_pool_create+0x12c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	643b      	str	r3, [r7, #64]	; 0x40
 80052be:	e009      	b.n	80052d4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d00b      	beq.n	80052e0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80052ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052d0:	3301      	adds	r3, #1
 80052d2:	643b      	str	r3, [r7, #64]	; 0x40
 80052d4:	4b2f      	ldr	r3, [pc, #188]	; (8005394 <_txe_byte_pool_create+0x130>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3f0      	bcc.n	80052c0 <_txe_byte_pool_create+0x5c>
 80052de:	e000      	b.n	80052e2 <_txe_byte_pool_create+0x7e>
                break;
 80052e0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052e2:	f3ef 8310 	mrs	r3, PRIMASK
 80052e6:	623b      	str	r3, [r7, #32]
    return(posture);
 80052e8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80052ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80052ec:	b672      	cpsid	i
    return(int_posture);
 80052ee:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80052f2:	4b26      	ldr	r3, [pc, #152]	; (800538c <_txe_byte_pool_create+0x128>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	4a24      	ldr	r2, [pc, #144]	; (800538c <_txe_byte_pool_create+0x128>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	f383 8810 	msr	PRIMASK, r3
}
 8005306:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005308:	f7ff fa9e 	bl	8004848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005310:	429a      	cmp	r2, r3
 8005312:	d102      	bne.n	800531a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005314:	2302      	movs	r3, #2
 8005316:	647b      	str	r3, [r7, #68]	; 0x44
 8005318:	e029      	b.n	800536e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005320:	2303      	movs	r3, #3
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
 8005324:	e023      	b.n	800536e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b63      	cmp	r3, #99	; 0x63
 800532a:	d802      	bhi.n	8005332 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800532c:	2305      	movs	r3, #5
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	e01d      	b.n	800536e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <_txe_byte_pool_create+0x134>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <_txe_byte_pool_create+0x138>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d101      	bne.n	8005344 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005340:	2313      	movs	r3, #19
 8005342:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005344:	f3ef 8305 	mrs	r3, IPSR
 8005348:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800534a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <_txe_byte_pool_create+0x13c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4313      	orrs	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005356:	f3ef 8305 	mrs	r3, IPSR
 800535a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800535c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <_txe_byte_pool_create+0x13c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005368:	d201      	bcs.n	800536e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800536a:	2313      	movs	r3, #19
 800536c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800536e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7fe ff70 	bl	8004260 <_tx_byte_pool_create>
 8005380:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005384:	4618      	mov	r0, r3
 8005386:	3748      	adds	r7, #72	; 0x48
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000a84 	.word	0x20000a84
 8005390:	200009dc 	.word	0x200009dc
 8005394:	200009e0 	.word	0x200009e0
 8005398:	200009ec 	.word	0x200009ec
 800539c:	20000b34 	.word	0x20000b34
 80053a0:	2000000c 	.word	0x2000000c

080053a4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b09a      	sub	sp, #104	; 0x68
 80053a8:	af06      	add	r7, sp, #24
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80053b2:	2300      	movs	r3, #0
 80053b4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80053bc:	230e      	movs	r3, #14
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c0:	e0bb      	b.n	800553a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80053c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053c4:	2bb0      	cmp	r3, #176	; 0xb0
 80053c6:	d002      	beq.n	80053ce <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80053c8:	230e      	movs	r3, #14
 80053ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053cc:	e0b5      	b.n	800553a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053ce:	f3ef 8310 	mrs	r3, PRIMASK
 80053d2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80053d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80053d8:	b672      	cpsid	i
    return(int_posture);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80053de:	4b64      	ldr	r3, [pc, #400]	; (8005570 <_txe_thread_create+0x1cc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3301      	adds	r3, #1
 80053e4:	4a62      	ldr	r2, [pc, #392]	; (8005570 <_txe_thread_create+0x1cc>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80053f8:	4b5e      	ldr	r3, [pc, #376]	; (8005574 <_txe_thread_create+0x1d0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80053fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8005402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005404:	3b01      	subs	r3, #1
 8005406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005408:	4413      	add	r3, r2
 800540a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005410:	2300      	movs	r3, #0
 8005412:	647b      	str	r3, [r7, #68]	; 0x44
 8005414:	e02b      	b.n	800546e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	429a      	cmp	r2, r3
 800541c:	d101      	bne.n	8005422 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800541e:	2301      	movs	r3, #1
 8005420:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	2b01      	cmp	r3, #1
 8005426:	d028      	beq.n	800547a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8005428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800542e:	429a      	cmp	r2, r3
 8005430:	d308      	bcc.n	8005444 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005438:	429a      	cmp	r2, r3
 800543a:	d203      	bcs.n	8005444 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800543c:	2300      	movs	r3, #0
 800543e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544a:	429a      	cmp	r2, r3
 800544c:	d308      	bcc.n	8005460 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800544e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005454:	429a      	cmp	r2, r3
 8005456:	d203      	bcs.n	8005460 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005458:	2300      	movs	r3, #0
 800545a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800546a:	3301      	adds	r3, #1
 800546c:	647b      	str	r3, [r7, #68]	; 0x44
 800546e:	4b42      	ldr	r3, [pc, #264]	; (8005578 <_txe_thread_create+0x1d4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005474:	429a      	cmp	r2, r3
 8005476:	d3ce      	bcc.n	8005416 <_txe_thread_create+0x72>
 8005478:	e000      	b.n	800547c <_txe_thread_create+0xd8>
                break;
 800547a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800547c:	f3ef 8310 	mrs	r3, PRIMASK
 8005480:	61fb      	str	r3, [r7, #28]
    return(posture);
 8005482:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005484:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005486:	b672      	cpsid	i
    return(int_posture);
 8005488:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800548a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800548c:	4b38      	ldr	r3, [pc, #224]	; (8005570 <_txe_thread_create+0x1cc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3b01      	subs	r3, #1
 8005492:	4a37      	ldr	r2, [pc, #220]	; (8005570 <_txe_thread_create+0x1cc>)
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005498:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80054a2:	f7ff f9d1 	bl	8004848 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d102      	bne.n	80054b4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80054ae:	230e      	movs	r3, #14
 80054b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054b2:	e042      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80054b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d102      	bne.n	80054c0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80054ba:	2303      	movs	r3, #3
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054be:	e03c      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80054c6:	2303      	movs	r3, #3
 80054c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ca:	e036      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80054cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ce:	2bc7      	cmp	r3, #199	; 0xc7
 80054d0:	d802      	bhi.n	80054d8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80054d2:	2305      	movs	r3, #5
 80054d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d6:	e030      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80054d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054da:	2b1f      	cmp	r3, #31
 80054dc:	d902      	bls.n	80054e4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80054de:	230f      	movs	r3, #15
 80054e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e2:	e02a      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80054e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d902      	bls.n	80054f2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80054ec:	2318      	movs	r3, #24
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	e023      	b.n	800553a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80054f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d902      	bls.n	80054fe <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80054f8:	2310      	movs	r3, #16
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fc:	e01d      	b.n	800553a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80054fe:	4b1f      	ldr	r3, [pc, #124]	; (800557c <_txe_thread_create+0x1d8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <_txe_thread_create+0x1dc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d101      	bne.n	8005510 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800550c:	2313      	movs	r3, #19
 800550e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005510:	f3ef 8305 	mrs	r3, IPSR
 8005514:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005516:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005518:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <_txe_thread_create+0x1e0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4313      	orrs	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005522:	f3ef 8305 	mrs	r3, IPSR
 8005526:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8005528:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800552a:	4b16      	ldr	r3, [pc, #88]	; (8005584 <_txe_thread_create+0x1e0>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005534:	d201      	bcs.n	800553a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005536:	2313      	movs	r3, #19
 8005538:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d112      	bne.n	8005566 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8005540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005546:	9304      	str	r3, [sp, #16]
 8005548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554a:	9303      	str	r3, [sp, #12]
 800554c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800554e:	9302      	str	r3, [sp, #8]
 8005550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	68b9      	ldr	r1, [r7, #8]
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe ff82 	bl	8004468 <_tx_thread_create>
 8005564:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8005566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005568:	4618      	mov	r0, r3
 800556a:	3750      	adds	r7, #80	; 0x50
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20000a84 	.word	0x20000a84
 8005574:	200009f4 	.word	0x200009f4
 8005578:	200009f8 	.word	0x200009f8
 800557c:	200009ec 	.word	0x200009ec
 8005580:	20000b34 	.word	0x20000b34
 8005584:	2000000c 	.word	0x2000000c

08005588 <memset>:
 8005588:	4402      	add	r2, r0
 800558a:	4603      	mov	r3, r0
 800558c:	4293      	cmp	r3, r2
 800558e:	d100      	bne.n	8005592 <memset+0xa>
 8005590:	4770      	bx	lr
 8005592:	f803 1b01 	strb.w	r1, [r3], #1
 8005596:	e7f9      	b.n	800558c <memset+0x4>

08005598 <__libc_init_array>:
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	4d0d      	ldr	r5, [pc, #52]	; (80055d0 <__libc_init_array+0x38>)
 800559c:	4c0d      	ldr	r4, [pc, #52]	; (80055d4 <__libc_init_array+0x3c>)
 800559e:	1b64      	subs	r4, r4, r5
 80055a0:	10a4      	asrs	r4, r4, #2
 80055a2:	2600      	movs	r6, #0
 80055a4:	42a6      	cmp	r6, r4
 80055a6:	d109      	bne.n	80055bc <__libc_init_array+0x24>
 80055a8:	4d0b      	ldr	r5, [pc, #44]	; (80055d8 <__libc_init_array+0x40>)
 80055aa:	4c0c      	ldr	r4, [pc, #48]	; (80055dc <__libc_init_array+0x44>)
 80055ac:	f000 f818 	bl	80055e0 <_init>
 80055b0:	1b64      	subs	r4, r4, r5
 80055b2:	10a4      	asrs	r4, r4, #2
 80055b4:	2600      	movs	r6, #0
 80055b6:	42a6      	cmp	r6, r4
 80055b8:	d105      	bne.n	80055c6 <__libc_init_array+0x2e>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c0:	4798      	blx	r3
 80055c2:	3601      	adds	r6, #1
 80055c4:	e7ee      	b.n	80055a4 <__libc_init_array+0xc>
 80055c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ca:	4798      	blx	r3
 80055cc:	3601      	adds	r6, #1
 80055ce:	e7f2      	b.n	80055b6 <__libc_init_array+0x1e>
 80055d0:	080056e8 	.word	0x080056e8
 80055d4:	080056e8 	.word	0x080056e8
 80055d8:	080056e8 	.word	0x080056e8
 80055dc:	080056ec 	.word	0x080056ec

080055e0 <_init>:
 80055e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e2:	bf00      	nop
 80055e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e6:	bc08      	pop	{r3}
 80055e8:	469e      	mov	lr, r3
 80055ea:	4770      	bx	lr

080055ec <_fini>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr
