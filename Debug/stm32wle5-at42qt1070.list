
stm32wle5-at42qt1070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005540  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005770  08005770  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005770  08005770  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005770  08005770  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000010  08005788  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  08005788  00020ff4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e86  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004903  00000000  00000000  00038f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c0  00000000  00000000  0003d808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001186  00000000  00000000  0003efc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d617  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df59  00000000  00000000  0005d765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abe94  00000000  00000000  0007b6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b30  00000000  00000000  00127554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000109  00000000  00000000  0012d084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005668 	.word	0x08005668

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005668 	.word	0x08005668

08000180 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000180:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000182:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000186:	4919      	ldr	r1, [pc, #100]	; (80001ec <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000188:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800018e:	4917      	ldr	r1, [pc, #92]	; (80001ec <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000190:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000192:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000194:	4817      	ldr	r0, [pc, #92]	; (80001f4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000196:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000198:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800019c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800019e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80001a2:	4915      	ldr	r1, [pc, #84]	; (80001f8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 80001a4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 80001a6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 80001aa:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 80001ac:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 80001b0:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 80001b4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 80001b8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001bc:	490f      	ldr	r1, [pc, #60]	; (80001fc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 80001be:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 80001c2:	4770      	bx	lr

080001c4 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 80001c4:	f7ff bffe 	b.w	80001c4 <__tx_BadHandler>

080001c8 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 80001c8:	f7ff bffe 	b.w	80001c8 <__tx_HardfaultHandler>

080001cc <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 80001cc:	f7ff bffe 	b.w	80001cc <__tx_SVCallHandler>

080001d0 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 80001d0:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 80001d8:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80001da:	f000 f881 	bl	80002e0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001e2:	4770      	bx	lr

080001e4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80001e4:	f7ff bffe 	b.w	80001e4 <__tx_NMIHandler>

080001e8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80001e8:	f7ff bffe 	b.w	80001e8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ec:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f0:	200009e8 	.word	0x200009e8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80001f8:	000752ff 	.word	0x000752ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001fc:	40ff0000 	.word	0x40ff0000

08000200 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000200:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000204:	4a22      	ldr	r2, [pc, #136]	; (8000290 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000206:	6010      	str	r0, [r2, #0]
    BIC     r0, r0, #4                              // Clear the FPCA bit
    MSR     CONTROL, r0                             // Setup new CONTROL register
#endif

    /* Enable interrupts */
    CPSIE   i
 8000208:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800020a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800020e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000212:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000216:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800021a:	f3bf 8f6f 	isb	sy

0800021e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800021e:	e7fe      	b.n	800021e <__tx_wait_here>

08000220 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  // Build NULL value
 8000224:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000228:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800022a:	b169      	cbz	r1, 8000248 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800022c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800022e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000232:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000236:	4c19      	ldr	r4, [pc, #100]	; (800029c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000238:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800023c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800023e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000242:	b10d      	cbz	r5, 8000248 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000244:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000246:	6023      	str	r3, [r4, #0]

08000248 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000248:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800024a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800024c:	b189      	cbz	r1, 8000272 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800024e:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000250:	b662      	cpsie	i

08000252 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000252:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000254:	4c11      	ldr	r4, [pc, #68]	; (800029c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000256:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000258:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800025c:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800025e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000260:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000264:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000268:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800026c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000270:	4770      	bx	lr

08000272 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000272:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000274:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000276:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000278:	b909      	cbnz	r1, 800027e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800027a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800027c:	e7f9      	b.n	8000272 <__tx_ts_wait>

0800027e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800027e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000282:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000286:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800028a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800028c:	e7e1      	b.n	8000252 <__tx_ts_restore>
 800028e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000290:	20000a84 	.word	0x20000a84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000294:	200009ec 	.word	0x200009ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000298:	200009f0 	.word	0x200009f0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800029c:	20000ff0 	.word	0x20000ff0

080002a0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80002a0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80002a2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80002a6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80002aa:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80002ae:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80002b0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80002b4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80002b6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80002b8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80002ba:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80002bc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80002be:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80002c0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80002c2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80002c4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80002c6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80002c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80002cc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80002d2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80002d4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80002d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80002dc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80002de:	4770      	bx	lr

080002e0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80002e0:	4922      	ldr	r1, [pc, #136]	; (800036c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80002e2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80002e4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80002e8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80002ec:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80002ee:	b13a      	cbz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80002f4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80002f6:	b91a      	cbnz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80002fa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80002fe:	6018      	str	r0, [r3, #0]

08000300 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000300:	491d      	ldr	r1, [pc, #116]	; (8000378 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000302:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000304:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000306:	b122      	cbz	r2, 8000312 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800030a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800030e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000310:	e008      	b.n	8000324 <__tx_timer_done>

08000312 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000312:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000318:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800031a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800031c:	d101      	bne.n	8000322 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000320:	6818      	ldr	r0, [r3, #0]

08000322 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000322:	6008      	str	r0, [r1, #0]

08000324 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000326:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000328:	b912      	cbnz	r2, 8000330 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800032c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800032e:	b1d0      	cbz	r0, 8000366 <__tx_timer_nothing_expired>

08000330 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000330:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000334:	4911      	ldr	r1, [pc, #68]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000336:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000338:	b108      	cbz	r0, 800033e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800033a:	f004 fda5 	bl	8004e88 <_tx_timer_expiration_process>

0800033e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000340:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000342:	b172      	cbz	r2, 8000362 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000344:	f004 fd14 	bl	8004d70 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800034a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800034c:	b949      	cbnz	r1, 8000362 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000350:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000354:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800035c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800035e:	d000      	beq.n	8000362 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000360:	6002      	str	r2, [r0, #0]

08000362 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000366 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000366:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800036a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800036c:	20000a90 	.word	0x20000a90
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000370:	20000ff0 	.word	0x20000ff0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000374:	20000a94 	.word	0x20000a94
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000378:	20000b20 	.word	0x20000b20
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800037c:	20000b24 	.word	0x20000b24
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000380:	20000b1c 	.word	0x20000b1c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000384:	20000b18 	.word	0x20000b18
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000388:	20000a84 	.word	0x20000a84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	200009ec 	.word	0x200009ec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000390:	200009f0 	.word	0x200009f0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000394:	e000ed04 	.word	0xe000ed04

08000398 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80003a4:	2334      	movs	r3, #52	; 0x34
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <tx_application_define+0x40>)
 80003ae:	490b      	ldr	r1, [pc, #44]	; (80003dc <tx_application_define+0x44>)
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <tx_application_define+0x48>)
 80003b2:	f004 ff9b 	bl	80052ec <_txe_byte_pool_create>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <tx_application_define+0x48>)
 80003be:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80003c0:	68b8      	ldr	r0, [r7, #8]
 80003c2:	f000 f80f 	bl	80003e4 <App_ThreadX_Init>
 80003c6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d000      	beq.n	80003d0 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80003ce:	e7fe      	b.n	80003ce <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	08005680 	.word	0x08005680
 80003e0:	2000042c 	.word	0x2000042c

080003e4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af08      	add	r7, sp, #32
 80003ea:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */
	/* Allocate the stack for thread 0.  */

	/* Create the main thread.  */
	tx_thread_create(&thread_0, 			// Thread Pointer: This is a pointer to the TX_THREAD structure that represents the thread being created. This structure holds information about the thread, such as its stack, entry function, priority, and state.
 80003f0:	23b0      	movs	r3, #176	; 0xb0
 80003f2:	9306      	str	r3, [sp, #24]
 80003f4:	2301      	movs	r3, #1
 80003f6:	9305      	str	r3, [sp, #20]
 80003f8:	2300      	movs	r3, #0
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	2301      	movs	r3, #1
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <App_ThreadX_Init+0x40>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <App_ThreadX_Init+0x44>)
 8000412:	4906      	ldr	r1, [pc, #24]	; (800042c <App_ThreadX_Init+0x48>)
 8000414:	4806      	ldr	r0, [pc, #24]	; (8000430 <App_ThreadX_Init+0x4c>)
 8000416:	f005 f809 	bl	800542c <_txe_thread_create>
					TX_AUTO_START);			// Auto Start: Specifies whether the thread should start automatically after creation (TX_AUTO_START) or if it should be manually started later.


  /* USER CODE END App_ThreadX_Init */

  return ret;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000460 	.word	0x20000460
 8000428:	08000441 	.word	0x08000441
 800042c:	08005694 	.word	0x08005694
 8000430:	20000860 	.word	0x20000860

08000434 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000438:	f004 f830 	bl	800449c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}

08000440 <thread_ui_control>:

/* USER CODE BEGIN 1 */
/* Azure RTOS thread entry function */
static void thread_ui_control(ULONG thread_input)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
    /* Your thread code here */
	uint8_t key = 0;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

    while (1)
    {
        /* Thread actions */
    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 800044c:	2101      	movs	r1, #1
 800044e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000452:	f000 fdb6 	bl	8000fc2 <HAL_GPIO_TogglePin>

    	key = main_key_status_read();
 8000456:	f000 f8fd 	bl	8000654 <main_key_status_read>
 800045a:	4603      	mov	r3, r0
 800045c:	73fb      	strb	r3, [r7, #15]

        tx_thread_sleep(10); // Example: Sleep for 100 ticks
 800045e:	200a      	movs	r0, #10
 8000460:	f004 f9b6 	bl	80047d0 <_tx_thread_sleep>
    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
 8000464:	e7f2      	b.n	800044c <thread_ui_control+0xc>

08000466 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800046e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	4313      	orrs	r3, r2
 800047c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800047e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4013      	ands	r3, r2
 8000488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800048a:	68fb      	ldr	r3, [r7, #12]
}
 800048c:	bf00      	nop
 800048e:	3714      	adds	r7, #20
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000496:	b580      	push	{r7, lr}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fa95 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f807 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a2:	f000 f897 	bl	80005d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004a6:	f000 f855 	bl	8000554 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80004aa:	f7ff ffc3 	bl	8000434 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80004ae:	e7fe      	b.n	80004ae <main+0x18>

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b09a      	sub	sp, #104	; 0x68
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0320 	add.w	r3, r7, #32
 80004ba:	2248      	movs	r2, #72	; 0x48
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f005 f8a6 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
 80004d4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004d6:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <SystemClock_Config+0xa0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <SystemClock_Config+0xa0>)
 80004e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <SystemClock_Config+0xa0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004f2:	2320      	movs	r3, #32
 80004f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004f6:	2301      	movs	r3, #1
 80004f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80004fe:	23b0      	movs	r3, #176	; 0xb0
 8000500:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000502:	2300      	movs	r3, #0
 8000504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 0320 	add.w	r3, r7, #32
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fc14 	bl	8002d38 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000516:	f000 f8db 	bl	80006d0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800051a:	234f      	movs	r3, #79	; 0x4f
 800051c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000526:	2300      	movs	r3, #0
 8000528:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2102      	movs	r1, #2
 8000538:	4618      	mov	r0, r3
 800053a:	f002 ff7f 	bl	800343c <HAL_RCC_ClockConfig>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000544:	f000 f8c4 	bl	80006d0 <Error_Handler>
  }
}
 8000548:	bf00      	nop
 800054a:	3768      	adds	r7, #104	; 0x68
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	58000400 	.word	0x58000400

08000554 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_I2C1_Init+0x74>)
 800055a:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <MX_I2C1_Init+0x78>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303EFD;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <MX_I2C1_Init+0x7c>)
 8000562:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056a:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <MX_I2C1_Init+0x74>)
 800056c:	2201      	movs	r2, #1
 800056e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000576:	4b14      	ldr	r3, [pc, #80]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <MX_I2C1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <MX_I2C1_Init+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <MX_I2C1_Init+0x74>)
 8000590:	f000 fd52 	bl	8001038 <HAL_I2C_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059a:	f000 f899 	bl	80006d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059e:	2100      	movs	r1, #0
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <MX_I2C1_Init+0x74>)
 80005a2:	f002 f894 	bl	80026ce <HAL_I2CEx_ConfigAnalogFilter>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005ac:	f000 f890 	bl	80006d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <MX_I2C1_Init+0x74>)
 80005b4:	f002 f8d5 	bl	8002762 <HAL_I2CEx_ConfigDigitalFilter>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005be:	f000 f887 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000910 	.word	0x20000910
 80005cc:	40005400 	.word	0x40005400
 80005d0:	20303efd 	.word	0x20303efd

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ff3c 	bl	8000466 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2002      	movs	r0, #2
 80005f0:	f7ff ff39 	bl	8000466 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2101      	movs	r1, #1
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fcca 	bl	8000f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fb5c 	bl	8000cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000622:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000626:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4619      	mov	r1, r3
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_GPIO_Init+0x7c>)
 8000632:	f000 fb4f 	bl	8000cd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2100      	movs	r1, #0
 800063a:	2029      	movs	r0, #41	; 0x29
 800063c:	f000 fab5 	bl	8000baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000640:	2029      	movs	r0, #41	; 0x29
 8000642:	f000 facc 	bl	8000bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000646:	bf00      	nop
 8000648:	3718      	adds	r7, #24
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	48000400 	.word	0x48000400

08000654 <main_key_status_read>:

/* USER CODE BEGIN 4 */
uint8_t main_key_status_read(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
	uint8_t key_status_address = 3;
 800065a:	2303      	movs	r3, #3
 800065c:	71fb      	strb	r3, [r7, #7]

	uint8_t key_status = 0;
 800065e:	2300      	movs	r3, #0
 8000660:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_GetState(&hi2c1);
 8000662:	4811      	ldr	r0, [pc, #68]	; (80006a8 <main_key_status_read+0x54>)
 8000664:	f001 f918 	bl	8001898 <HAL_I2C_GetState>

	key_status = HAL_I2C_IsDeviceReady(&hi2c1, AT42QT1070_SLAVE_ADDRESS, 100, 1000);
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	2264      	movs	r2, #100	; 0x64
 800066e:	2136      	movs	r1, #54	; 0x36
 8000670:	480d      	ldr	r0, [pc, #52]	; (80006a8 <main_key_status_read+0x54>)
 8000672:	f000 ff5b 	bl	800152c <HAL_I2C_IsDeviceReady>
 8000676:	4603      	mov	r3, r0
 8000678:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Master_Transmit(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status_address, 1, 1000);
 800067a:	1dfa      	adds	r2, r7, #7
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	2136      	movs	r1, #54	; 0x36
 8000686:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main_key_status_read+0x54>)
 8000688:	f000 fd66 	bl	8001158 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status, 1, 1000);
 800068c:	1dba      	adds	r2, r7, #6
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2301      	movs	r3, #1
 8000696:	2136      	movs	r1, #54	; 0x36
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <main_key_status_read+0x54>)
 800069a:	f000 fe51 	bl	8001340 <HAL_I2C_Master_Receive>

	return key_status;
 800069e:	79bb      	ldrb	r3, [r7, #6]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000910 	.word	0x20000910

080006ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d101      	bne.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006be:	f000 f9a3 	bl	8000a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40014800 	.word	0x40014800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>

080006da <LL_AHB2_GRP1_EnableClock>:
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4013      	ands	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006fe:	68fb      	ldr	r3, [r7, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800070a:	b480      	push	{r7}
 800070c:	b085      	sub	sp, #20
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000716:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4313      	orrs	r3, r2
 8000720:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000726:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4013      	ands	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800072e:	68fb      	ldr	r3, [r7, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
	...

08000748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	; 0x58
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f004 ff51 	bl	8005610 <memset>
  if(hi2c->Instance==I2C1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <HAL_I2C_MspInit+0xa8>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d137      	bne.n	80007e8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000778:	2340      	movs	r3, #64	; 0x40
 800077a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000780:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4618      	mov	r0, r3
 8000788:	f003 fa26 	bl	8003bd8 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000792:	f7ff ff9d 	bl	80006d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff ff9f 	bl	80006da <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800079c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a2:	2312      	movs	r3, #18
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ae:	2304      	movs	r3, #4
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fa8a 	bl	8000cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80007c4:	f7ff ffa1 	bl	800070a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	201e      	movs	r0, #30
 80007ce:	f000 f9ec 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007d2:	201e      	movs	r0, #30
 80007d4:	f000 fa03 	bl	8000bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	201f      	movs	r0, #31
 80007de:	f000 f9e4 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80007e2:	201f      	movs	r0, #31
 80007e4:	f000 f9fb 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007e8:	bf00      	nop
 80007ea:	3758      	adds	r7, #88	; 0x58
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40005400 	.word	0x40005400

080007f4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000800:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4313      	orrs	r3, r2
 800080a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800080c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000818:	68fb      	ldr	r3, [r7, #12]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	; 0x30
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800083a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800083e:	f7ff ffd9 	bl	80007f4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000842:	f107 0208 	add.w	r2, r7, #8
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f002 ffdf 	bl	8003810 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000852:	f002 ffcb 	bl	80037ec <HAL_RCC_GetPCLK2Freq>
 8000856:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <HAL_InitTick+0xbc>)
 800085c:	fba2 2303 	umull	r2, r3, r2, r3
 8000860:	0c9b      	lsrs	r3, r3, #18
 8000862:	3b01      	subs	r3, #1
 8000864:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <HAL_InitTick+0xc0>)
 8000868:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <HAL_InitTick+0xc4>)
 800086a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <HAL_InitTick+0xc0>)
 800086e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000872:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_InitTick+0xc0>)
 8000876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000878:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_InitTick+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_InitTick+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000886:	4817      	ldr	r0, [pc, #92]	; (80008e4 <HAL_InitTick+0xc0>)
 8000888:	f003 fac0 	bl	8003e0c <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000892:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11b      	bne.n	80008d2 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800089a:	4812      	ldr	r0, [pc, #72]	; (80008e4 <HAL_InitTick+0xc0>)
 800089c:	f003 fb16 	bl	8003ecc <HAL_TIM_Base_Start_IT>
 80008a0:	4603      	mov	r3, r0
 80008a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80008a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d111      	bne.n	80008d2 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008ae:	201d      	movs	r0, #29
 80008b0:	f000 f995 	bl	8000bde <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d808      	bhi.n	80008cc <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80008ba:	2200      	movs	r2, #0
 80008bc:	6879      	ldr	r1, [r7, #4]
 80008be:	201d      	movs	r0, #29
 80008c0:	f000 f973 	bl	8000baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008c4:	4a09      	ldr	r2, [pc, #36]	; (80008ec <HAL_InitTick+0xc8>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	e002      	b.n	80008d2 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	20000964 	.word	0x20000964
 80008e8:	40014800 	.word	0x40014800
 80008ec:	20000004 	.word	0x20000004

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <TIM17_IRQHandler+0x10>)
 8000922:	f003 fb1f 	bl	8003f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000964 	.word	0x20000964

08000930 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <I2C1_EV_IRQHandler+0x10>)
 8000936:	f000 ff00 	bl	800173a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000910 	.word	0x20000910

08000944 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <I2C1_ER_IRQHandler+0x10>)
 800094a:	f000 ff10 	bl	800176e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000910 	.word	0x20000910

08000958 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800095c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000960:	f000 fb48 	bl	8000ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000976:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000978:	f7ff fff6 	bl	8000968 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a2:	f004 fe3d 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fd76 	bl	8000496 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   r0, =_estack
 80009ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b8:	08005778 	.word	0x08005778
  ldr r2, =_sbss
 80009bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009c0:	20000ff4 	.word	0x20000ff4

080009c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f000 f8de 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80009d8:	f002 fef4 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <HAL_Init+0x3c>)
 80009e0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e2:	200f      	movs	r0, #15
 80009e4:	f7ff ff1e 	bl	8000824 <HAL_InitTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e001      	b.n	80009f8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f4:	f7ff fea1 	bl	800073a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000000 	.word	0x20000000

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200009b0 	.word	0x200009b0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	200009b0 	.word	0x200009b0

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff4f 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff66 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ffb4 	bl	8000b30 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff83 	bl	8000adc <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff59 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d005      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2204      	movs	r2, #4
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	e047      	b.n	8000cae <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f022 020e 	bic.w	r2, r2, #14
 8000c2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	f003 021c 	and.w	r2, r3, #28
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00c      	beq.n	8000c8e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000c8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2201      	movs	r2, #1
 8000c92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	4798      	blx	r3
    }
  }
  return status;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cc6:	b2db      	uxtb	r3, r3
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
	...

08000cd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e140      	b.n	8000f66 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 8132 	beq.w	8000f60 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 808c 	beq.w	8000f60 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	2207      	movs	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1bc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <HAL_GPIO_Init+0x2b4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1b8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <HAL_GPIO_Init+0x2b8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1b4>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e004      	b.n	8000e92 <HAL_GPIO_Init+0x1be>
 8000e88:	2307      	movs	r3, #7
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_Init+0x1be>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <HAL_GPIO_Init+0x1be>
 8000e90:	2300      	movs	r3, #0
 8000e92:	697a      	ldr	r2, [r7, #20]
 8000e94:	f002 0203 	and.w	r2, r2, #3
 8000e98:	0092      	lsls	r2, r2, #2
 8000e9a:	4093      	lsls	r3, r2
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ea2:	4938      	ldr	r1, [pc, #224]	; (8000f84 <HAL_GPIO_Init+0x2b0>)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ed4:	4a2e      	ldr	r2, [pc, #184]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eda:	4b2d      	ldr	r3, [pc, #180]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000efe:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f0a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f38:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_GPIO_Init+0x2bc>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f47f aeb7 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40010000 	.word	0x40010000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	58000800 	.word	0x58000800

08000f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa4:	787b      	ldrb	r3, [r7, #1]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000faa:	887a      	ldrh	r2, [r7, #2]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fb2:	887a      	ldrh	r2, [r7, #2]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd4:	887a      	ldrh	r2, [r7, #2]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	041a      	lsls	r2, r3, #16
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43d9      	mvns	r1, r3
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	400b      	ands	r3, r1
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001000:	68da      	ldr	r2, [r3, #12]
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f806 	bl	8001024 <HAL_GPIO_EXTI_Callback>
  }
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58000800 	.word	0x58000800

08001024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e081      	b.n	800114e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d106      	bne.n	8001064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff fb72 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2224      	movs	r2, #36	; 0x24
 8001068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001088:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001098:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	e006      	b.n	80010c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80010be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d104      	bne.n	80010d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	695b      	ldr	r3, [r3, #20]
 80010fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69d9      	ldr	r1, [r3, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1a      	ldr	r2, [r3, #32]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2220      	movs	r2, #32
 800113a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	461a      	mov	r2, r3
 8001164:	460b      	mov	r3, r1
 8001166:	817b      	strh	r3, [r7, #10]
 8001168:	4613      	mov	r3, r2
 800116a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b20      	cmp	r3, #32
 8001176:	f040 80da 	bne.w	800132e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001180:	2b01      	cmp	r3, #1
 8001182:	d101      	bne.n	8001188 <HAL_I2C_Master_Transmit+0x30>
 8001184:	2302      	movs	r3, #2
 8001186:	e0d3      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001190:	f7ff fc4c 	bl	8000a2c <HAL_GetTick>
 8001194:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2319      	movs	r3, #25
 800119c:	2201      	movs	r2, #1
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 fff0 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0be      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2221      	movs	r2, #33	; 0x21
 80011b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2210      	movs	r2, #16
 80011be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	893a      	ldrh	r2, [r7, #8]
 80011d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d90e      	bls.n	8001202 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	8979      	ldrh	r1, [r7, #10]
 80011f2:	4b51      	ldr	r3, [pc, #324]	; (8001338 <HAL_I2C_Master_Transmit+0x1e0>)
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f001 f9da 	bl	80025b4 <I2C_TransferConfig>
 8001200:	e06c      	b.n	80012dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001206:	b29a      	uxth	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001210:	b2da      	uxtb	r2, r3
 8001212:	8979      	ldrh	r1, [r7, #10]
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <HAL_I2C_Master_Transmit+0x1e0>)
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f001 f9c9 	bl	80025b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001222:	e05b      	b.n	80012dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	6a39      	ldr	r1, [r7, #32]
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 ffed 	bl	8002208 <I2C_WaitOnTXISFlagUntilTimeout>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e07b      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001252:	b29b      	uxth	r3, r3
 8001254:	3b01      	subs	r3, #1
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001260:	3b01      	subs	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800126c:	b29b      	uxth	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d034      	beq.n	80012dc <HAL_I2C_Master_Transmit+0x184>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001276:	2b00      	cmp	r3, #0
 8001278:	d130      	bne.n	80012dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	2200      	movs	r2, #0
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 ff7f 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e04d      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001298:	b29b      	uxth	r3, r3
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d90e      	bls.n	80012bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	22ff      	movs	r2, #255	; 0xff
 80012a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	8979      	ldrh	r1, [r7, #10]
 80012ac:	2300      	movs	r3, #0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f001 f97d 	bl	80025b4 <I2C_TransferConfig>
 80012ba:	e00f      	b.n	80012dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	8979      	ldrh	r1, [r7, #10]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f001 f96c 	bl	80025b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d19e      	bne.n	8001224 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	6a39      	ldr	r1, [r7, #32]
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f000 ffcc 	bl	8002288 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e01a      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2220      	movs	r2, #32
 8001300:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6859      	ldr	r1, [r3, #4]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_I2C_Master_Transmit+0x1e4>)
 800130e:	400b      	ands	r3, r1
 8001310:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2220      	movs	r2, #32
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800132a:	2300      	movs	r3, #0
 800132c:	e000      	b.n	8001330 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800132e:	2302      	movs	r3, #2
  }
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	80002000 	.word	0x80002000
 800133c:	fe00e800 	.word	0xfe00e800

08001340 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	461a      	mov	r2, r3
 800134c:	460b      	mov	r3, r1
 800134e:	817b      	strh	r3, [r7, #10]
 8001350:	4613      	mov	r3, r2
 8001352:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b20      	cmp	r3, #32
 800135e:	f040 80db 	bne.w	8001518 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_I2C_Master_Receive+0x30>
 800136c:	2302      	movs	r3, #2
 800136e:	e0d4      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001378:	f7ff fb58 	bl	8000a2c <HAL_GetTick>
 800137c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2319      	movs	r3, #25
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 fefc 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0bf      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2222      	movs	r2, #34	; 0x22
 800139e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2210      	movs	r2, #16
 80013a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	893a      	ldrh	r2, [r7, #8]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2bff      	cmp	r3, #255	; 0xff
 80013ca:	d90e      	bls.n	80013ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	22ff      	movs	r2, #255	; 0xff
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	8979      	ldrh	r1, [r7, #10]
 80013da:	4b52      	ldr	r3, [pc, #328]	; (8001524 <HAL_I2C_Master_Receive+0x1e4>)
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f001 f8e6 	bl	80025b4 <I2C_TransferConfig>
 80013e8:	e06d      	b.n	80014c6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	8979      	ldrh	r1, [r7, #10]
 80013fc:	4b49      	ldr	r3, [pc, #292]	; (8001524 <HAL_I2C_Master_Receive+0x1e4>)
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f001 f8d5 	bl	80025b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800140a:	e05c      	b.n	80014c6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	6a39      	ldr	r1, [r7, #32]
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 ff75 	bl	8002300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e07c      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800143c:	3b01      	subs	r3, #1
 800143e:	b29a      	uxth	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001448:	b29b      	uxth	r3, r3
 800144a:	3b01      	subs	r3, #1
 800144c:	b29a      	uxth	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001456:	b29b      	uxth	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	d034      	beq.n	80014c6 <HAL_I2C_Master_Receive+0x186>
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d130      	bne.n	80014c6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	6a3b      	ldr	r3, [r7, #32]
 800146a:	2200      	movs	r2, #0
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 fe8a 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e04d      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001482:	b29b      	uxth	r3, r3
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d90e      	bls.n	80014a6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	22ff      	movs	r2, #255	; 0xff
 800148c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001492:	b2da      	uxtb	r2, r3
 8001494:	8979      	ldrh	r1, [r7, #10]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f001 f888 	bl	80025b4 <I2C_TransferConfig>
 80014a4:	e00f      	b.n	80014c6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	8979      	ldrh	r1, [r7, #10]
 80014b8:	2300      	movs	r3, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f001 f877 	bl	80025b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d19d      	bne.n	800140c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f000 fed7 	bl	8002288 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e01a      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2220      	movs	r2, #32
 80014ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_I2C_Master_Receive+0x1e8>)
 80014f8:	400b      	ands	r3, r1
 80014fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2220      	movs	r2, #32
 8001500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	e000      	b.n	800151a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001518:	2302      	movs	r3, #2
  }
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	80002400 	.word	0x80002400
 8001528:	fe00e800 	.word	0xfe00e800

0800152c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	; 0x28
 8001530:	af02      	add	r7, sp, #8
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	460b      	mov	r3, r1
 800153a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b20      	cmp	r3, #32
 800154a:	f040 80f1 	bne.w	8001730 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800155c:	d101      	bne.n	8001562 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800155e:	2302      	movs	r3, #2
 8001560:	e0e7      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <HAL_I2C_IsDeviceReady+0x44>
 800156c:	2302      	movs	r3, #2
 800156e:	e0e0      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_I2C_IsDeviceReady+0x72>
 800158e:	897b      	ldrh	r3, [r7, #10]
 8001590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001594:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800159c:	e004      	b.n	80015a8 <HAL_I2C_IsDeviceReady+0x7c>
 800159e:	897b      	ldrh	r3, [r7, #10]
 80015a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015a4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fa3d 	bl	8000a2c <HAL_GetTick>
 80015b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	2b20      	cmp	r3, #32
 80015c0:	bf0c      	ite	eq
 80015c2:	2301      	moveq	r3, #1
 80015c4:	2300      	movne	r3, #0
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015e0:	e034      	b.n	800164c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d01a      	beq.n	8001620 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015ea:	f7ff fa1f 	bl	8000a2c <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d302      	bcc.n	8001600 <HAL_I2C_IsDeviceReady+0xd4>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10f      	bne.n	8001620 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2220      	movs	r2, #32
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f043 0220 	orr.w	r2, r3, #32
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e088      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0320 	and.w	r3, r3, #32
 800162a:	2b20      	cmp	r3, #32
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b10      	cmp	r3, #16
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800164c:	7ffb      	ldrb	r3, [r7, #31]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_I2C_IsDeviceReady+0x12c>
 8001652:	7fbb      	ldrb	r3, [r7, #30]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0c4      	beq.n	80015e2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b10      	cmp	r3, #16
 8001664:	d01a      	beq.n	800169c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	2120      	movs	r1, #32
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 fd89 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e058      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2220      	movs	r2, #32
 8001686:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	e04a      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	2120      	movs	r1, #32
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 fd6e 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e03d      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2220      	movs	r2, #32
 80016c4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d118      	bne.n	8001700 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016dc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	2120      	movs	r1, #32
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 fd4d 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e01c      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2220      	movs	r2, #32
 80016fe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	f63f af3b 	bhi.w	8001586 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0220 	orr.w	r2, r3, #32
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001730:	2302      	movs	r3, #2
  }
}
 8001732:	4618      	mov	r0, r3
 8001734:	3720      	adds	r7, #32
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
  }
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00f      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f043 0201 	orr.w	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00f      	beq.n	80017da <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00a      	beq.n	80017da <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f043 0208 	orr.w	r2, r3, #8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00f      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00a      	beq.n	8001804 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f043 0202 	orr.w	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001802:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 030b 	and.w	r3, r3, #11
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fb7e 	bl	8001f18 <I2C_ITError>
  }
}
 800181c:	bf00      	nop
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
 8001854:	4613      	mov	r3, r2
 8001856:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a6:	b2db      	uxtb	r3, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <I2C_Slave_ISR_IT+0x24>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e0e1      	b.n	8001a9a <I2C_Slave_ISR_IT+0x1e8>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d008      	beq.n	80018fa <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80018f2:	6939      	ldr	r1, [r7, #16]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 f9b5 	bl	8001c64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d04b      	beq.n	800199c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800190a:	2b00      	cmp	r3, #0
 800190c:	d046      	beq.n	800199c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d128      	bne.n	800196a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b28      	cmp	r3, #40	; 0x28
 8001922:	d108      	bne.n	8001936 <I2C_Slave_ISR_IT+0x84>
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800192a:	d104      	bne.n	8001936 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 fa9e 	bl	8001e70 <I2C_ITListenCplt>
 8001934:	e031      	b.n	800199a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b29      	cmp	r3, #41	; 0x29
 8001940:	d10e      	bne.n	8001960 <I2C_Slave_ISR_IT+0xae>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001948:	d00a      	beq.n	8001960 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2210      	movs	r2, #16
 8001950:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 fbd7 	bl	8002106 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f926 	bl	8001baa <I2C_ITSlaveSeqCplt>
 800195e:	e01c      	b.n	800199a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001968:	e08f      	b.n	8001a8a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2210      	movs	r2, #16
 8001970:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f043 0204 	orr.w	r2, r3, #4
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <I2C_Slave_ISR_IT+0xda>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198a:	d17e      	bne.n	8001a8a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	4619      	mov	r1, r3
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 fac0 	bl	8001f18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001998:	e077      	b.n	8001a8a <I2C_Slave_ISR_IT+0x1d8>
 800199a:	e076      	b.n	8001a8a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d02f      	beq.n	8001a06 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d02a      	beq.n	8001a06 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d018      	beq.n	80019ec <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d14b      	bne.n	8001a8e <I2C_Slave_ISR_IT+0x1dc>
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019fc:	d047      	beq.n	8001a8e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f8d3 	bl	8001baa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001a04:	e043      	b.n	8001a8e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d009      	beq.n	8001a24 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001a1a:	6939      	ldr	r1, [r7, #16]
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f000 f840 	bl	8001aa2 <I2C_ITAddrCplt>
 8001a22:	e035      	b.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d030      	beq.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d02b      	beq.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d018      	beq.n	8001a74 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	851a      	strh	r2, [r3, #40]	; 0x28
 8001a72:	e00d      	b.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7a:	d002      	beq.n	8001a82 <I2C_Slave_ISR_IT+0x1d0>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f891 	bl	8001baa <I2C_ITSlaveSeqCplt>
 8001a88:	e002      	b.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001a8a:	bf00      	nop
 8001a8c:	e000      	b.n	8001a90 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001a8e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001ab8:	2b28      	cmp	r3, #40	; 0x28
 8001aba:	d16a      	bne.n	8001b92 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	0c1b      	lsrs	r3, r3, #16
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001ada:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001af6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d138      	bne.n	8001b72 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001b00:	897b      	ldrh	r3, [r7, #10]
 8001b02:	09db      	lsrs	r3, r3, #7
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	89bb      	ldrh	r3, [r7, #12]
 8001b08:	4053      	eors	r3, r2
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	f003 0306 	and.w	r3, r3, #6
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d11c      	bne.n	8001b4e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001b14:	897b      	ldrh	r3, [r7, #10]
 8001b16:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d13b      	bne.n	8001ba2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2208      	movs	r2, #8
 8001b36:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b40:	89ba      	ldrh	r2, [r7, #12]
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	4619      	mov	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe7e 	bl	8001848 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001b4c:	e029      	b.n	8001ba2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fd5c 	bl	8002614 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b64:	89ba      	ldrh	r2, [r7, #12]
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff fe6c 	bl	8001848 <HAL_I2C_AddrCallback>
}
 8001b70:	e017      	b.n	8001ba2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 fd4c 	bl	8002614 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b84:	89ba      	ldrh	r2, [r7, #12]
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe5c 	bl	8001848 <HAL_I2C_AddrCallback>
}
 8001b90:	e007      	b.n	8001ba2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2208      	movs	r2, #8
 8001b98:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d008      	beq.n	8001bde <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e00c      	b.n	8001bf8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bf6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b29      	cmp	r3, #41	; 0x29
 8001c02:	d112      	bne.n	8001c2a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2228      	movs	r2, #40	; 0x28
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2221      	movs	r2, #33	; 0x21
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c12:	2101      	movs	r1, #1
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fcfd 	bl	8002614 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fdfe 	bl	8001824 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001c28:	e017      	b.n	8001c5a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b2a      	cmp	r3, #42	; 0x2a
 8001c34:	d111      	bne.n	8001c5a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2228      	movs	r2, #40	; 0x28
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2222      	movs	r2, #34	; 0x22
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001c44:	2102      	movs	r1, #2
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fce4 	bl	8002614 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff fdee 	bl	8001836 <HAL_I2C_SlaveRxCpltCallback>
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2220      	movs	r2, #32
 8001c88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	2b21      	cmp	r3, #33	; 0x21
 8001c8e:	d002      	beq.n	8001c96 <I2C_ITSlaveCplt+0x32>
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	2b29      	cmp	r3, #41	; 0x29
 8001c94:	d108      	bne.n	8001ca8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001c96:	f248 0101 	movw	r1, #32769	; 0x8001
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 fcba 	bl	8002614 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2221      	movs	r2, #33	; 0x21
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca6:	e00d      	b.n	8001cc4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	2b22      	cmp	r3, #34	; 0x22
 8001cac:	d002      	beq.n	8001cb4 <I2C_ITSlaveCplt+0x50>
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb2:	d107      	bne.n	8001cc4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001cb4:	f248 0102 	movw	r1, #32770	; 0x8002
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fcab 	bl	8002614 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2222      	movs	r2, #34	; 0x22
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <I2C_ITSlaveCplt+0x204>)
 8001ce0:	400b      	ands	r3, r1
 8001ce2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 fa0e 	bl	8002106 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01f      	beq.n	8001d4c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d1a:	e017      	b.n	8001d4c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00c      	beq.n	8001d98 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	3b01      	subs	r3, #1
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f043 0204 	orr.w	r2, r3, #4
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8a4 	bl	8001f18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b28      	cmp	r3, #40	; 0x28
 8001dda:	d141      	bne.n	8001e60 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ddc:	6979      	ldr	r1, [r7, #20]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f846 	bl	8001e70 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001de4:	e03c      	b.n	8001e60 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dee:	d014      	beq.n	8001e1a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff feda 	bl	8001baa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <I2C_ITSlaveCplt+0x208>)
 8001dfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fd25 	bl	8001862 <HAL_I2C_ListenCpltCallback>
}
 8001e18:	e022      	b.n	8001e60 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b22      	cmp	r3, #34	; 0x22
 8001e24:	d10e      	bne.n	8001e44 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff fcfa 	bl	8001836 <HAL_I2C_SlaveRxCpltCallback>
}
 8001e42:	e00d      	b.n	8001e60 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fce2 	bl	8001824 <HAL_I2C_SlaveTxCpltCallback>
}
 8001e60:	bf00      	nop
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	fe00e800 	.word	0xfe00e800
 8001e6c:	ffff0000 	.word	0xffff0000

08001e70 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	; (8001f14 <I2C_ITListenCplt+0xa4>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d022      	beq.n	8001eec <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	f043 0204 	orr.w	r2, r3, #4
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001eec:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fb8f 	bl	8002614 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2210      	movs	r2, #16
 8001efc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fcab 	bl	8001862 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	ffff0000 	.word	0xffff0000

08001f18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	; (80020ac <I2C_ITError+0x194>)
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b28      	cmp	r3, #40	; 0x28
 8001f4e:	d005      	beq.n	8001f5c <I2C_ITError+0x44>
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b29      	cmp	r3, #41	; 0x29
 8001f54:	d002      	beq.n	8001f5c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b2a      	cmp	r3, #42	; 0x2a
 8001f5a:	d10b      	bne.n	8001f74 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f5c:	2103      	movs	r1, #3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fb58 	bl	8002614 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2228      	movs	r2, #40	; 0x28
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a50      	ldr	r2, [pc, #320]	; (80020b0 <I2C_ITError+0x198>)
 8001f70:	635a      	str	r2, [r3, #52]	; 0x34
 8001f72:	e011      	b.n	8001f98 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001f74:	f248 0103 	movw	r1, #32771	; 0x8003
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fb4b 	bl	8002614 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b60      	cmp	r3, #96	; 0x60
 8001f88:	d003      	beq.n	8001f92 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d039      	beq.n	800201a <I2C_ITError+0x102>
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d002      	beq.n	8001fb2 <I2C_ITError+0x9a>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b21      	cmp	r3, #33	; 0x21
 8001fb0:	d133      	bne.n	800201a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fc0:	d107      	bne.n	8001fd2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe6e 	bl	8000cb8 <HAL_DMA_GetState>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d017      	beq.n	8002012 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	4a33      	ldr	r2, [pc, #204]	; (80020b4 <I2C_ITError+0x19c>)
 8001fe8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fdff 	bl	8000bfa <HAL_DMA_Abort_IT>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04d      	beq.n	800209e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800200c:	4610      	mov	r0, r2
 800200e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002010:	e045      	b.n	800209e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f850 	bl	80020b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002018:	e041      	b.n	800209e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	2b00      	cmp	r3, #0
 8002020:	d039      	beq.n	8002096 <I2C_ITError+0x17e>
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b12      	cmp	r3, #18
 8002026:	d002      	beq.n	800202e <I2C_ITError+0x116>
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b22      	cmp	r3, #34	; 0x22
 800202c:	d133      	bne.n	8002096 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203c:	d107      	bne.n	800204e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fe30 	bl	8000cb8 <HAL_DMA_GetState>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d017      	beq.n	800208e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <I2C_ITError+0x19c>)
 8002064:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fdc1 	bl	8000bfa <HAL_DMA_Abort_IT>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d011      	beq.n	80020a2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002088:	4610      	mov	r0, r2
 800208a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800208c:	e009      	b.n	80020a2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f812 	bl	80020b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002094:	e005      	b.n	80020a2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f80e 	bl	80020b8 <I2C_TreatErrorCallback>
  }
}
 800209c:	e002      	b.n	80020a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800209e:	bf00      	nop
 80020a0:	e000      	b.n	80020a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80020a2:	bf00      	nop
}
 80020a4:	bf00      	nop
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	ffff0000 	.word	0xffff0000
 80020b0:	080018b3 	.word	0x080018b3
 80020b4:	0800214d 	.word	0x0800214d

080020b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b60      	cmp	r3, #96	; 0x60
 80020ca:	d10e      	bne.n	80020ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fbcf 	bl	8001886 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020e8:	e009      	b.n	80020fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fbbb 	bl	8001874 <HAL_I2C_ErrorCallback>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d103      	bne.n	8002124 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2200      	movs	r2, #0
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d007      	beq.n	8002142 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0201 	orr.w	r2, r2, #1
 8002140:	619a      	str	r2, [r3, #24]
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	2200      	movs	r2, #0
 8002168:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2200      	movs	r2, #0
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f7ff ff9c 	bl	80020b8 <I2C_TreatErrorCallback>
}
 8002180:	bf00      	nop
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002198:	e022      	b.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d01e      	beq.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a2:	f7fe fc43 	bl	8000a2c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d302      	bcc.n	80021b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d113      	bne.n	80021e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f043 0220 	orr.w	r2, r3, #32
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e00f      	b.n	8002200 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d0cd      	beq.n	800219a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002214:	e02c      	b.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f8ea 	bl	80023f4 <I2C_IsErrorOccurred>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e02a      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d01e      	beq.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7fe fbfb 	bl	8000a2c <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	429a      	cmp	r2, r3
 8002240:	d302      	bcc.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d113      	bne.n	8002270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f043 0220 	orr.w	r2, r3, #32
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b02      	cmp	r3, #2
 800227c:	d1cb      	bne.n	8002216 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002294:	e028      	b.n	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f8aa 	bl	80023f4 <I2C_IsErrorOccurred>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e026      	b.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7fe fbbf 	bl	8000a2c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d113      	bne.n	80022e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e007      	b.n	80022f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d1cf      	bne.n	8002296 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800230c:	e064      	b.n	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f86e 	bl	80023f4 <I2C_IsErrorOccurred>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e062      	b.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b20      	cmp	r3, #32
 800232e:	d138      	bne.n	80023a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b04      	cmp	r3, #4
 800233c:	d105      	bne.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e04e      	b.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d107      	bne.n	8002368 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2210      	movs	r2, #16
 800235e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2204      	movs	r2, #4
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
 8002366:	e002      	b.n	800236e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2220      	movs	r2, #32
 8002374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002382:	400b      	ands	r3, r1
 8002384:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e022      	b.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a2:	f7fe fb43 	bl	8000a2c <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d302      	bcc.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10f      	bne.n	80023d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e007      	b.n	80023e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d193      	bne.n	800230e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fe00e800 	.word	0xfe00e800

080023f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	d068      	beq.n	80024f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2210      	movs	r2, #16
 8002426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002428:	e049      	b.n	80024be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d045      	beq.n	80024be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fafb 	bl	8000a2c <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_IsErrorOccurred+0x54>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d13a      	bne.n	80024be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800245a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246a:	d121      	bne.n	80024b0 <I2C_IsErrorOccurred+0xbc>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002472:	d01d      	beq.n	80024b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b20      	cmp	r3, #32
 8002478:	d01a      	beq.n	80024b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800248a:	f7fe facf 	bl	8000a2c <HAL_GetTick>
 800248e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002490:	e00e      	b.n	80024b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002492:	f7fe facb 	bl	8000a2c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b19      	cmp	r3, #25
 800249e:	d907      	bls.n	80024b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f043 0320 	orr.w	r3, r3, #32
 80024a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80024ae:	e006      	b.n	80024be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 0320 	and.w	r3, r3, #32
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d1e9      	bne.n	8002492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d003      	beq.n	80024d4 <I2C_IsErrorOccurred+0xe0>
 80024cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0aa      	beq.n	800242a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	f043 0308 	orr.w	r3, r3, #8
 800252c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00b      	beq.n	8002560 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	f043 0302 	orr.w	r3, r3, #2
 800254e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01c      	beq.n	80025a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fdcc 	bl	8002106 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <I2C_IsErrorOccurred+0x1bc>)
 800257a:	400b      	ands	r3, r1
 800257c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80025a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	4613      	mov	r3, r2
 80025c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025cc:	7a7b      	ldrb	r3, [r7, #9]
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	4313      	orrs	r3, r2
 80025de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	0d5b      	lsrs	r3, r3, #21
 80025ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <I2C_TransferConfig+0x5c>)
 80025f4:	430b      	orrs	r3, r1
 80025f6:	43db      	mvns	r3, r3
 80025f8:	ea02 0103 	and.w	r1, r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002606:	bf00      	nop
 8002608:	371c      	adds	r7, #28
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	03ff63ff 	.word	0x03ff63ff

08002614 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00f      	beq.n	800264e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002634:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002642:	2b28      	cmp	r3, #40	; 0x28
 8002644:	d003      	beq.n	800264e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800264c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00f      	beq.n	8002678 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800265e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800266c:	2b28      	cmp	r3, #40	; 0x28
 800266e:	d003      	beq.n	8002678 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002676:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002678:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800267c:	2b00      	cmp	r3, #0
 800267e:	da03      	bge.n	8002688 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002686:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002688:	887b      	ldrh	r3, [r7, #2]
 800268a:	2b10      	cmp	r3, #16
 800268c:	d103      	bne.n	8002696 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002694:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	2b20      	cmp	r3, #32
 800269a:	d103      	bne.n	80026a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f043 0320 	orr.w	r3, r3, #32
 80026a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	2b40      	cmp	r3, #64	; 0x40
 80026a8:	d103      	bne.n	80026b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43da      	mvns	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	400a      	ands	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d138      	bne.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e032      	b.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2224      	movs	r2, #36	; 0x24
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002720:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6819      	ldr	r1, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b20      	cmp	r3, #32
 8002776:	d139      	bne.n	80027ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002782:	2302      	movs	r3, #2
 8002784:	e033      	b.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2224      	movs	r2, #36	; 0x24
 8002792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	e000      	b.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
  }
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr

080027f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <HAL_PWR_EnableBkUpAccess+0x18>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a03      	ldr	r2, [pc, #12]	; (8002810 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	58000400 	.word	0x58000400

08002814 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_PWREx_GetVoltageRange+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	58000400 	.word	0x58000400

0800282c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800283c:	d101      	bne.n	8002842 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr
 800284c:	58000400 	.word	0x58000400

08002850 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800289a:	d101      	bne.n	80028a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
}
 80028da:	bf00      	nop
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f4:	d101      	bne.n	80028fa <LL_RCC_HSE_IsReady+0x18>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_RCC_HSE_IsReady+0x1a>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d101      	bne.n	8002954 <LL_RCC_HSI_IsReady+0x18>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <LL_RCC_HSI_IsReady+0x1a>
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d101      	bne.n	800299e <LL_RCC_LSE_IsReady+0x18>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <LL_RCC_LSE_IsReady+0x1a>
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029c0:	bf00      	nop
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d101      	bne.n	8002a00 <LL_RCC_LSI_IsReady+0x18>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <LL_RCC_LSI_IsReady+0x1a>
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a34:	f023 0301 	bic.w	r3, r3, #1
 8002a38:	6013      	str	r3, [r2, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d101      	bne.n	8002a58 <LL_RCC_MSI_IsReady+0x16>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <LL_RCC_MSI_IsReady+0x18>
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002a62:	b480      	push	{r7}
 8002a64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d101      	bne.n	8002a78 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 0203 	bic.w	r2, r3, #3
 8002aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b083      	sub	sp, #12
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	608b      	str	r3, [r1, #8]
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bc80      	pop	{r7}
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c42:	d101      	bne.n	8002c48 <LL_RCC_PLL_IsReady+0x18>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <LL_RCC_PLL_IsReady+0x1a>
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c52:	b480      	push	{r7}
 8002c54:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	0a1b      	lsrs	r3, r3, #8
 8002c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cbe:	d101      	bne.n	8002cc4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce2:	d101      	bne.n	8002ce8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d04:	d101      	bne.n	8002d0a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d26:	d101      	bne.n	8002d2c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
	...

08002d38 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e36f      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4a:	f7ff fed8 	bl	8002afe <LL_RCC_GetSysClkSource>
 8002d4e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d50:	f7ff ffa1 	bl	8002c96 <LL_RCC_PLL_GetMainSource>
 8002d54:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80c4 	beq.w	8002eec <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x3e>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d176      	bne.n	8002e5e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d173      	bne.n	8002e5e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e353      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d005      	beq.n	8002da0 <HAL_RCC_OscConfig+0x68>
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d9e:	e006      	b.n	8002dae <HAL_RCC_OscConfig+0x76>
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d222      	bcs.n	8002df8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd68 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e331      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd0:	f043 0308 	orr.w	r3, r3, #8
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fe5d 	bl	8002ab0 <LL_RCC_MSI_SetCalibTrimming>
 8002df6:	e021      	b.n	8002e3c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e02:	f043 0308 	orr.w	r3, r3, #8
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe44 	bl	8002ab0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fd2d 	bl	800388c <RCC_SetFlashLatencyFromMSIRange>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e2f6      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002e3c:	f000 fcc2 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4aa7      	ldr	r2, [pc, #668]	; (80030e0 <HAL_RCC_OscConfig+0x3a8>)
 8002e44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002e46:	4ba7      	ldr	r3, [pc, #668]	; (80030e4 <HAL_RCC_OscConfig+0x3ac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd fcea 	bl	8000824 <HAL_InitTick>
 8002e50:	4603      	mov	r3, r0
 8002e52:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002e54:	7cfb      	ldrb	r3, [r7, #19]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d047      	beq.n	8002eea <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	e2e5      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d02c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e66:	f7ff fdd0 	bl	8002a0a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6a:	f7fd fddf 	bl	8000a2c <HAL_GetTick>
 8002e6e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e72:	f7fd fddb 	bl	8000a2c <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e2d2      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e84:	f7ff fddd 	bl	8002a42 <LL_RCC_MSI_IsReady>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f1      	beq.n	8002e72 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e98:	f043 0308 	orr.w	r3, r3, #8
 8002e9c:	6013      	str	r3, [r2, #0]
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fdf9 	bl	8002ab0 <LL_RCC_MSI_SetCalibTrimming>
 8002ebe:	e015      	b.n	8002eec <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec0:	f7ff fdb1 	bl	8002a26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ec4:	f7fd fdb2 	bl	8000a2c <HAL_GetTick>
 8002ec8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ecc:	f7fd fdae 	bl	8000a2c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e2a5      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002ede:	f7ff fdb0 	bl	8002a42 <LL_RCC_MSI_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f1      	bne.n	8002ecc <HAL_RCC_OscConfig+0x194>
 8002ee8:	e000      	b.n	8002eec <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002eea:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d058      	beq.n	8002faa <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d005      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1d2>
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d108      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d14b      	bne.n	8002faa <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e289      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d102      	bne.n	8002f3c <HAL_RCC_OscConfig+0x204>
 8002f36:	f7ff fcb8 	bl	80028aa <LL_RCC_HSE_Enable>
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCC_OscConfig+0x220>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002f44:	d104      	bne.n	8002f50 <HAL_RCC_OscConfig+0x218>
 8002f46:	f7ff fc83 	bl	8002850 <LL_RCC_HSE_EnableTcxo>
 8002f4a:	f7ff fcae 	bl	80028aa <LL_RCC_HSE_Enable>
 8002f4e:	e003      	b.n	8002f58 <HAL_RCC_OscConfig+0x220>
 8002f50:	f7ff fcb9 	bl	80028c6 <LL_RCC_HSE_Disable>
 8002f54:	f7ff fc8a 	bl	800286c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d012      	beq.n	8002f86 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fd fd64 	bl	8000a2c <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fd fd60 	bl	8000a2c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e257      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002f7a:	f7ff fcb2 	bl	80028e2 <LL_RCC_HSE_IsReady>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f1      	beq.n	8002f68 <HAL_RCC_OscConfig+0x230>
 8002f84:	e011      	b.n	8002faa <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fd fd51 	bl	8000a2c <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8e:	f7fd fd4d 	bl	8000a2c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e244      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002fa0:	f7ff fc9f 	bl	80028e2 <LL_RCC_HSE_IsReady>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f1      	bne.n	8002f8e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d046      	beq.n	8003044 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x290>
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d10e      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e22a      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fcc0 	bl	800295e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fde:	e031      	b.n	8003044 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d019      	beq.n	800301c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe8:	f7ff fc8c 	bl	8002904 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fd fd1e 	bl	8000a2c <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7fd fd1a 	bl	8000a2c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e211      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003006:	f7ff fc99 	bl	800293c <LL_RCC_HSI_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f1      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fca2 	bl	800295e <LL_RCC_HSI_SetCalibTrimming>
 800301a:	e013      	b.n	8003044 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800301c:	f7ff fc80 	bl	8002920 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fd fd04 	bl	8000a2c <HAL_GetTick>
 8003024:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fd fd00 	bl	8000a2c <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e1f7      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800303a:	f7ff fc7f 	bl	800293c <LL_RCC_HSI_IsReady>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1f1      	bne.n	8003028 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0308 	and.w	r3, r3, #8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d06e      	beq.n	800312e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d056      	beq.n	8003106 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003060:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	429a      	cmp	r2, r3
 800306e:	d031      	beq.n	80030d4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d006      	beq.n	8003088 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e1d0      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d013      	beq.n	80030ba <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003092:	f7ff fc99 	bl	80029c8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003096:	f7fd fcc9 	bl	8000a2c <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fd fcc5 	bl	8000a2c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b11      	cmp	r3, #17
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1bc      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80030b0:	f7ff fc9a 	bl	80029e8 <LL_RCC_LSI_IsReady>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f1      	bne.n	800309e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	f023 0210 	bic.w	r2, r3, #16
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d4:	f7ff fc68 	bl	80029a8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d8:	f7fd fca8 	bl	8000a2c <HAL_GetTick>
 80030dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80030de:	e00c      	b.n	80030fa <HAL_RCC_OscConfig+0x3c2>
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fd fca0 	bl	8000a2c <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b11      	cmp	r3, #17
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e197      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80030fa:	f7ff fc75 	bl	80029e8 <LL_RCC_LSI_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f1      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3b0>
 8003104:	e013      	b.n	800312e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003106:	f7ff fc5f 	bl	80029c8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310a:	f7fd fc8f 	bl	8000a2c <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003112:	f7fd fc8b 	bl	8000a2c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b11      	cmp	r3, #17
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e182      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003124:	f7ff fc60 	bl	80029e8 <LL_RCC_LSI_IsReady>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f1      	bne.n	8003112 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0304 	and.w	r3, r3, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80d8 	beq.w	80032ec <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800313c:	f7ff fb76 	bl	800282c <LL_PWR_IsEnabledBkUpAccess>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d113      	bne.n	800316e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003146:	f7ff fb57 	bl	80027f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314a:	f7fd fc6f 	bl	8000a2c <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003152:	f7fd fc6b 	bl	8000a2c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e162      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003164:	f7ff fb62 	bl	800282c <LL_PWR_IsEnabledBkUpAccess>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f1      	beq.n	8003152 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d07b      	beq.n	800326e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b85      	cmp	r3, #133	; 0x85
 800317c:	d003      	beq.n	8003186 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d109      	bne.n	800319a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fc47 	bl	8000a2c <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80031a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fd fc39 	bl	8000a2c <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e12e      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031cc:	f7ff fbdb 	bl	8002986 <LL_RCC_LSE_IsReady>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ef      	beq.n	80031b6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b81      	cmp	r3, #129	; 0x81
 80031dc:	d003      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b85      	cmp	r3, #133	; 0x85
 80031e4:	d121      	bne.n	800322a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fd fc21 	bl	8000a2c <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd fc13 	bl	8000a2c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e108      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ec      	beq.n	8003202 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003228:	e060      	b.n	80032ec <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd fbff 	bl	8000a2c <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fd fbf1 	bl	8000a2c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0e6      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800325c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1ec      	bne.n	8003246 <HAL_RCC_OscConfig+0x50e>
 800326c:	e03e      	b.n	80032ec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd fbdd 	bl	8000a2c <HAL_GetTick>
 8003272:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd fbcf 	bl	8000a2c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	; 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e0c4      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ec      	bne.n	800328a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b0:	f7fd fbbc 	bl	8000a2c <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fbae 	bl	8000a2c <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e0a3      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80032e2:	f7ff fb50 	bl	8002986 <LL_RCC_LSE_IsReady>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ef      	bne.n	80032cc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8099 	beq.w	8003428 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	d06c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b02      	cmp	r3, #2
 8003302:	d14b      	bne.n	800339c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003304:	f7ff fc86 	bl	8002c14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fd fb90 	bl	8000a2c <HAL_GetTick>
 800330c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd fb8c 	bl	8000a2c <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b0a      	cmp	r3, #10
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e083      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003322:	f7ff fc85 	bl	8002c30 <LL_RCC_PLL_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f1      	bne.n	8003310 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x6fc>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003344:	0212      	lsls	r2, r2, #8
 8003346:	4311      	orrs	r1, r2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003352:	4311      	orrs	r1, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003358:	430a      	orrs	r2, r1
 800335a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335e:	4313      	orrs	r3, r2
 8003360:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003362:	f7ff fc49 	bl	8002bf8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fd fb59 	bl	8000a2c <HAL_GetTick>
 800337a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800337e:	f7fd fb55 	bl	8000a2c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b0a      	cmp	r3, #10
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e04c      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003390:	f7ff fc4e 	bl	8002c30 <LL_RCC_PLL_IsReady>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f1      	beq.n	800337e <HAL_RCC_OscConfig+0x646>
 800339a:	e045      	b.n	8003428 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339c:	f7ff fc3a 	bl	8002c14 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fd fb44 	bl	8000a2c <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fb40 	bl	8000a2c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b0a      	cmp	r3, #10
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e037      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80033ba:	f7ff fc39 	bl	8002c30 <LL_RCC_PLL_IsReady>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f1      	bne.n	80033a8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <HAL_RCC_OscConfig+0x700>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	60cb      	str	r3, [r1, #12]
 80033d4:	e028      	b.n	8003428 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e023      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0203 	and.w	r2, r3, #3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d115      	bne.n	8003424 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003402:	429a      	cmp	r2, r3
 8003404:	d10e      	bne.n	8003424 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	429a      	cmp	r2, r3
 8003414:	d106      	bne.n	8003424 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	11c1808c 	.word	0x11c1808c
 8003438:	eefefffc 	.word	0xeefefffc

0800343c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e10f      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d91b      	bls.n	8003496 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b86      	ldr	r3, [pc, #536]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4984      	ldr	r1, [pc, #528]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346e:	f7fd fadd 	bl	8000a2c <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003474:	e008      	b.n	8003488 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003476:	f7fd fad9 	bl	8000a2c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e0f3      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003488:	4b7b      	ldr	r3, [pc, #492]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d1ef      	bne.n	8003476 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d016      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fb34 	bl	8002b14 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034ac:	f7fd fabe 	bl	8000a2c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b4:	f7fd faba 	bl	8000a2c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e0d4      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034c6:	f7ff fbf1 	bl	8002cac <LL_RCC_IsActiveFlag_HPRE>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f1      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fb2a 	bl	8002b3a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034e6:	f7fd faa1 	bl	8000a2c <HAL_GetTick>
 80034ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ee:	f7fd fa9d 	bl	8000a2c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e0b7      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003500:	f7ff fbe5 	bl	8002cce <LL_RCC_IsActiveFlag_SHDHPRE>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f1      	beq.n	80034ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff fb23 	bl	8002b66 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003520:	f7fd fa84 	bl	8000a2c <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003528:	f7fd fa80 	bl	8000a2c <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e09a      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800353a:	f7ff fbda 	bl	8002cf2 <LL_RCC_IsActiveFlag_PPRE1>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f1      	beq.n	8003528 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d017      	beq.n	8003580 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fb18 	bl	8002b8c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800355c:	f7fd fa66 	bl	8000a2c <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003564:	f7fd fa62 	bl	8000a2c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e07c      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003576:	f7ff fbcd 	bl	8002d14 <LL_RCC_IsActiveFlag_PPRE2>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f1      	beq.n	8003564 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d043      	beq.n	8003614 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003594:	f7ff f9a5 	bl	80028e2 <LL_RCC_HSE_IsReady>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11e      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e066      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035aa:	f7ff fb41 	bl	8002c30 <LL_RCC_PLL_IsReady>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d113      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e05b      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035c0:	f7ff fa3f 	bl	8002a42 <LL_RCC_MSI_IsReady>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d108      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e050      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035ce:	f7ff f9b5 	bl	800293c <LL_RCC_HSI_IsReady>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e049      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff fa79 	bl	8002ad8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e6:	f7fd fa21 	bl	8000a2c <HAL_GetTick>
 80035ea:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ec:	e00a      	b.n	8003604 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ee:	f7fd fa1d 	bl	8000a2c <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e035      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003604:	f7ff fa7b 	bl	8002afe <LL_RCC_GetSysClkSource>
 8003608:	4602      	mov	r2, r0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1ec      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d21b      	bcs.n	800365a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b15      	ldr	r3, [pc, #84]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4913      	ldr	r1, [pc, #76]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003632:	f7fd f9fb 	bl	8000a2c <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	e008      	b.n	800364c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800363a:	f7fd f9f7 	bl	8000a2c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e011      	b.n	8003670 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x23c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800365a:	f000 f8b3 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 800365e:	4603      	mov	r3, r0
 8003660:	4a06      	ldr	r2, [pc, #24]	; (800367c <HAL_RCC_ClockConfig+0x240>)
 8003662:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003664:	4b06      	ldr	r3, [pc, #24]	; (8003680 <HAL_RCC_ClockConfig+0x244>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7fd f8db 	bl	8000824 <HAL_InitTick>
 800366e:	4603      	mov	r3, r0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	58004000 	.word	0x58004000
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003692:	f7ff fa34 	bl	8002afe <LL_RCC_GetSysClkSource>
 8003696:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003698:	f7ff fafd 	bl	8002c96 <LL_RCC_PLL_GetMainSource>
 800369c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_GetSysClockFreq+0x2c>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d139      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d136      	bne.n	800371e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036b0:	f7ff f9d7 	bl	8002a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d115      	bne.n	80036e6 <HAL_RCC_GetSysClockFreq+0x62>
 80036ba:	f7ff f9d2 	bl	8002a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_GetSysClockFreq+0x4e>
 80036c4:	f7ff f9dd 	bl	8002a82 <LL_RCC_MSI_GetRange>
 80036c8:	4603      	mov	r3, r0
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	e005      	b.n	80036de <HAL_RCC_GetSysClockFreq+0x5a>
 80036d2:	f7ff f9e1 	bl	8002a98 <LL_RCC_MSI_GetRangeAfterStandby>
 80036d6:	4603      	mov	r3, r0
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a36      	ldr	r2, [pc, #216]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x134>)
 80036e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e4:	e014      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x8c>
 80036e6:	f7ff f9bc 	bl	8002a62 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d106      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x7a>
 80036f0:	f7ff f9c7 	bl	8002a82 <LL_RCC_MSI_GetRange>
 80036f4:	4603      	mov	r3, r0
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	e005      	b.n	800370a <HAL_RCC_GetSysClockFreq+0x86>
 80036fe:	f7ff f9cb 	bl	8002a98 <LL_RCC_MSI_GetRangeAfterStandby>
 8003702:	4603      	mov	r3, r0
 8003704:	091b      	lsrs	r3, r3, #4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x134>)
 800370c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003710:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d115      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800371c:	e012      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d102      	bne.n	800372a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e00c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d109      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003730:	f7ff f8aa 	bl	8002888 <LL_RCC_HSE_IsEnabledDiv2>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d102      	bne.n	8003740 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800373a:	4b20      	ldr	r3, [pc, #128]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	e001      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003742:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003744:	f7ff f9db 	bl	8002afe <LL_RCC_GetSysClkSource>
 8003748:	4603      	mov	r3, r0
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d12f      	bne.n	80037ae <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800374e:	f7ff faa2 	bl	8002c96 <LL_RCC_PLL_GetMainSource>
 8003752:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0xde>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0xe4>
 8003760:	e00d      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003764:	60fb      	str	r3, [r7, #12]
        break;
 8003766:	e00d      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003768:	f7ff f88e 	bl	8002888 <LL_RCC_HSE_IsEnabledDiv2>
 800376c:	4603      	mov	r3, r0
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_RCC_GetSysClockFreq+0x138>)
 8003774:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800377a:	60fb      	str	r3, [r7, #12]
        break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	60fb      	str	r3, [r7, #12]
        break;
 8003782:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003784:	f7ff fa65 	bl	8002c52 <LL_RCC_PLL_GetN>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	fb03 f402 	mul.w	r4, r3, r2
 8003790:	f7ff fa76 	bl	8002c80 <LL_RCC_PLL_GetDivider>
 8003794:	4603      	mov	r3, r0
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	3301      	adds	r3, #1
 800379a:	fbb4 f4f3 	udiv	r4, r4, r3
 800379e:	f7ff fa64 	bl	8002c6a <LL_RCC_PLL_GetR>
 80037a2:	4603      	mov	r3, r0
 80037a4:	0f5b      	lsrs	r3, r3, #29
 80037a6:	3301      	adds	r3, #1
 80037a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80037ac:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd90      	pop	{r4, r7, pc}
 80037b8:	08005730 	.word	0x08005730
 80037bc:	00f42400 	.word	0x00f42400
 80037c0:	01e84800 	.word	0x01e84800

080037c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c4:	b598      	push	{r3, r4, r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80037c8:	f7ff ff5c 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80037cc:	4604      	mov	r4, r0
 80037ce:	f7ff f9f0 	bl	8002bb2 <LL_RCC_GetAHBPrescaler>
 80037d2:	4603      	mov	r3, r0
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	4a03      	ldr	r2, [pc, #12]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	bd98      	pop	{r3, r4, r7, pc}
 80037e8:	080056d0 	.word	0x080056d0

080037ec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ec:	b598      	push	{r3, r4, r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037f0:	f7ff ffe8 	bl	80037c4 <HAL_RCC_GetHCLKFreq>
 80037f4:	4604      	mov	r4, r0
 80037f6:	f7ff f9f4 	bl	8002be2 <LL_RCC_GetAPB2Prescaler>
 80037fa:	4603      	mov	r3, r0
 80037fc:	0adb      	lsrs	r3, r3, #11
 80037fe:	4a03      	ldr	r2, [pc, #12]	; (800380c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd98      	pop	{r3, r4, r7, pc}
 800380c:	08005710 	.word	0x08005710

08003810 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d02d      	beq.n	800387c <HAL_RCC_GetClockConfig+0x6c>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d02a      	beq.n	800387c <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	224f      	movs	r2, #79	; 0x4f
 800382a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 020c 	and.w	r2, r3, #12
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003864:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetClockConfig+0x78>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0207 	and.w	r2, r3, #7
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	601a      	str	r2, [r3, #0]
  }
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	58004000 	.word	0x58004000

0800388c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	4a10      	ldr	r2, [pc, #64]	; (80038e0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80038a4:	f7ff f990 	bl	8002bc8 <LL_RCC_GetAHB3Prescaler>
 80038a8:	4603      	mov	r3, r0
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80038b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038bc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0c9c      	lsrs	r4, r3, #18
 80038c8:	f7fe ffa4 	bl	8002814 <HAL_PWREx_GetVoltageRange>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4619      	mov	r1, r3
 80038d0:	4620      	mov	r0, r4
 80038d2:	f000 f80b 	bl	80038ec <RCC_SetFlashLatency>
 80038d6:	4603      	mov	r3, r0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	08005730 	.word	0x08005730
 80038e4:	080056d0 	.word	0x080056d0
 80038e8:	431bde83 	.word	0x431bde83

080038ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80038f6:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <RCC_SetFlashLatency+0xf4>)
 80038f8:	f107 0320 	add.w	r3, r7, #32
 80038fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003900:	6018      	str	r0, [r3, #0]
 8003902:	3304      	adds	r3, #4
 8003904:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003906:	4a37      	ldr	r2, [pc, #220]	; (80039e4 <RCC_SetFlashLatency+0xf8>)
 8003908:	f107 0318 	add.w	r3, r7, #24
 800390c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003910:	6018      	str	r0, [r3, #0]
 8003912:	3304      	adds	r3, #4
 8003914:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <RCC_SetFlashLatency+0xfc>)
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	ca07      	ldmia	r2, {r0, r1, r2}
 800391e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392c:	d11b      	bne.n	8003966 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800392e:	2300      	movs	r3, #0
 8003930:	633b      	str	r3, [r7, #48]	; 0x30
 8003932:	e014      	b.n	800395e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	3338      	adds	r3, #56	; 0x38
 800393a:	443b      	add	r3, r7
 800393c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4293      	cmp	r3, r2
 8003946:	d807      	bhi.n	8003958 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	3338      	adds	r3, #56	; 0x38
 800394e:	443b      	add	r3, r7
 8003950:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003954:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003956:	e021      	b.n	800399c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	3301      	adds	r3, #1
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
 800395e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003960:	2b02      	cmp	r3, #2
 8003962:	d9e7      	bls.n	8003934 <RCC_SetFlashLatency+0x48>
 8003964:	e01a      	b.n	800399c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003966:	2300      	movs	r3, #0
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	e014      	b.n	8003996 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	3338      	adds	r3, #56	; 0x38
 8003972:	443b      	add	r3, r7
 8003974:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4293      	cmp	r3, r2
 800397e:	d807      	bhi.n	8003990 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	3338      	adds	r3, #56	; 0x38
 8003986:	443b      	add	r3, r7
 8003988:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800398c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800398e:	e005      	b.n	800399c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003992:	3301      	adds	r3, #1
 8003994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003998:	2b02      	cmp	r3, #2
 800399a:	d9e7      	bls.n	800396c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800399c:	4b13      	ldr	r3, [pc, #76]	; (80039ec <RCC_SetFlashLatency+0x100>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f023 0207 	bic.w	r2, r3, #7
 80039a4:	4911      	ldr	r1, [pc, #68]	; (80039ec <RCC_SetFlashLatency+0x100>)
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80039ac:	f7fd f83e 	bl	8000a2c <HAL_GetTick>
 80039b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039b2:	e008      	b.n	80039c6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039b4:	f7fd f83a 	bl	8000a2c <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e007      	b.n	80039d6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <RCC_SetFlashLatency+0x100>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1ef      	bne.n	80039b4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3738      	adds	r7, #56	; 0x38
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080056a0 	.word	0x080056a0
 80039e4:	080056a8 	.word	0x080056a8
 80039e8:	080056b0 	.word	0x080056b0
 80039ec:	58004000 	.word	0x58004000

080039f0 <LL_RCC_LSE_IsReady>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d101      	bne.n	8003a08 <LL_RCC_LSE_IsReady+0x18>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <LL_RCC_LSE_IsReady+0x1a>
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <LL_RCC_SetUSARTClockSource>:
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0c1b      	lsrs	r3, r3, #16
 8003a26:	43db      	mvns	r3, r3
 8003a28:	401a      	ands	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetI2SClockSource>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <LL_RCC_SetLPUARTClockSource>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bc80      	pop	{r7}
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_SetI2CClockSource>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <LL_RCC_SetLPTIMClockSource>:
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <LL_RCC_SetRNGClockSource>:
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_SetADCClockSource>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_SetRTCClockSource>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_GetRTCClockSource>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <LL_RCC_ForceBackupDomainReset>:
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bae:	bf00      	nop
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bce:	bf00      	nop
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003be4:	2300      	movs	r3, #0
 8003be6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003be8:	2300      	movs	r3, #0
 8003bea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d058      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003bf8:	f7fe fdfe 	bl	80027f8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfc:	f7fc ff16 	bl	8000a2c <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c02:	e009      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fc ff12 	bl	8000a2c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	74fb      	strb	r3, [r7, #19]
        break;
 8003c16:	e006      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003c18:	4b7b      	ldr	r3, [pc, #492]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d1ee      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d13c      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003c2c:	f7ff ffa7 	bl	8003b7e <LL_RCC_GetRTCClockSource>
 8003c30:	4602      	mov	r2, r0
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d00f      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c46:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c48:	f7ff ffa5 	bl	8003b96 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c4c:	f7ff ffb3 	bl	8003bb6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d014      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fc fee2 	bl	8000a2c <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fc fede 	bl	8000a2c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d902      	bls.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	74fb      	strb	r3, [r7, #19]
            break;
 8003c82:	e004      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003c84:	f7ff feb4 	bl	80039f0 <LL_RCC_LSE_IsReady>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5b 	bl	8003b54 <LL_RCC_SetRTCClockSource>
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	74bb      	strb	r3, [r7, #18]
 8003ca4:	e001      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fea9 	bl	8003a12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fe9e 	bl	8003a12 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fec0 	bl	8003a6c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fee6 	bl	8003ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff fedb 	bl	8003ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d004      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fed0 	bl	8003ace <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d004      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7ff fea9 	bl	8003a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fe9e 	bl	8003a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff fe93 	bl	8003a96 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d011      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fe5e 	bl	8003a42 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fea5 	bl	8003b00 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d107      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fea3 	bl	8003b2a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dec:	d107      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003dfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58000400 	.word	0x58000400

08003e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e049      	b.n	8003eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f841 	bl	8003eba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f000 f9ce 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d001      	beq.n	8003ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e036      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_TIM_Base_Start_IT+0x90>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x44>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d115      	bne.n	8003f3c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689a      	ldr	r2, [r3, #8]
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_TIM_Base_Start_IT+0x94>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d015      	beq.n	8003f4e <HAL_TIM_Base_Start_IT+0x82>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f28:	d011      	beq.n	8003f4e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0201 	orr.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	e008      	b.n	8003f4e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e000      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	00010007 	.word	0x00010007

08003f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0202 	mvn.w	r2, #2
 8003f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f904 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8f7 	bl	80041a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f906 	bl	80041c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d122      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d11b      	bne.n	8004014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0204 	mvn.w	r2, #4
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8da 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8cd 	bl	80041a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8dc 	bl	80041c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b08      	cmp	r3, #8
 8004020:	d122      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b08      	cmp	r3, #8
 800402e:	d11b      	bne.n	8004068 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0208 	mvn.w	r2, #8
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8b0 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8a3 	bl	80041a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8b2 	bl	80041c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b10      	cmp	r3, #16
 8004074:	d122      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d11b      	bne.n	80040bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2208      	movs	r2, #8
 8004092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f886 	bl	80041b4 <HAL_TIM_IC_CaptureCallback>
 80040a8:	e005      	b.n	80040b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f879 	bl	80041a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f888 	bl	80041c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d10e      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fae2 	bl	80006ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f2:	2b80      	cmp	r3, #128	; 0x80
 80040f4:	d10e      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b80      	cmp	r3, #128	; 0x80
 8004102:	d107      	bne.n	8004114 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f8d7 	bl	80042c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004122:	d10e      	bne.n	8004142 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412e:	2b80      	cmp	r3, #128	; 0x80
 8004130:	d107      	bne.n	8004142 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800413a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8c9 	bl	80042d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	2b40      	cmp	r3, #64	; 0x40
 800414e:	d10e      	bne.n	800416e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d107      	bne.n	800416e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f835 	bl	80041d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b20      	cmp	r3, #32
 800417a:	d10e      	bne.n	800419a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d107      	bne.n	800419a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f06f 0220 	mvn.w	r2, #32
 8004192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f88b 	bl	80042b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr

080041b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
	...

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <TIM_Base_SetConfig+0xb8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0x20>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d108      	bne.n	800421e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4313      	orrs	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <TIM_Base_SetConfig+0xb8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x52>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x52>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <TIM_Base_SetConfig+0xbc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x52>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <TIM_Base_SetConfig+0xc0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a0b      	ldr	r2, [pc, #44]	; (80042a4 <TIM_Base_SetConfig+0xb8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d007      	beq.n	800428c <TIM_Base_SetConfig+0xa0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <TIM_Base_SetConfig+0xbc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d003      	beq.n	800428c <TIM_Base_SetConfig+0xa0>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <TIM_Base_SetConfig+0xc0>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d103      	bne.n	8004294 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	615a      	str	r2, [r3, #20]
}
 800429a:	bf00      	nop
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40014800 	.word	0x40014800

080042b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	bc80      	pop	{r7}
 80042c0:	4770      	bx	lr

080042c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bc80      	pop	{r7}
 80042d2:	4770      	bx	lr

080042d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
	...

080042e8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08e      	sub	sp, #56	; 0x38
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80042f6:	2234      	movs	r2, #52	; 0x34
 80042f8:	2100      	movs	r1, #0
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f001 f988 	bl	8005610 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f1a3 0208 	sub.w	r2, r3, #8
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2202      	movs	r2, #2
 8004334:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800433a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4413      	add	r3, r2
 8004340:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8004342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004344:	3b04      	subs	r3, #4
 8004346:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8004350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004354:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	3b04      	subs	r3, #4
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800435c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004372:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8004378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437a:	3304      	adds	r3, #4
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	4a1f      	ldr	r2, [pc, #124]	; (8004404 <_tx_byte_pool_create+0x11c>)
 8004386:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800438e:	f3ef 8310 	mrs	r3, PRIMASK
 8004392:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8004394:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8004396:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004398:	b672      	cpsid	i
#endif
    return(int_posture);
 800439a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800439c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4a19      	ldr	r2, [pc, #100]	; (8004408 <_tx_byte_pool_create+0x120>)
 80043a2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <_tx_byte_pool_create+0x124>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <_tx_byte_pool_create+0x128>)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
 80043be:	e011      	b.n	80043e4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <_tx_byte_pool_create+0x128>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a3a      	ldr	r2, [r7, #32]
 80043e2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <_tx_byte_pool_create+0x124>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <_tx_byte_pool_create+0x124>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f383 8810 	msr	PRIMASK, r3
}
 80043f8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3738      	adds	r7, #56	; 0x38
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	ffffeeee 	.word	0xffffeeee
 8004408:	42595445 	.word	0x42595445
 800440c:	200009e0 	.word	0x200009e0
 8004410:	200009dc 	.word	0x200009dc

08004414 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004418:	f000 f960 	bl	80046dc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800441c:	f000 fd56 	bl	8004ecc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004420:	4b12      	ldr	r3, [pc, #72]	; (800446c <_tx_initialize_high_level+0x58>)
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <_tx_initialize_high_level+0x5c>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <_tx_initialize_high_level+0x60>)
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	4b11      	ldr	r3, [pc, #68]	; (8004478 <_tx_initialize_high_level+0x64>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <_tx_initialize_high_level+0x68>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <_tx_initialize_high_level+0x6c>)
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <_tx_initialize_high_level+0x70>)
 8004446:	2200      	movs	r2, #0
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <_tx_initialize_high_level+0x74>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <_tx_initialize_high_level+0x78>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <_tx_initialize_high_level+0x7c>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800445c:	4b0d      	ldr	r3, [pc, #52]	; (8004494 <_tx_initialize_high_level+0x80>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	4b0d      	ldr	r3, [pc, #52]	; (8004498 <_tx_initialize_high_level+0x84>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
#endif
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200009b4 	.word	0x200009b4
 8004470:	200009b8 	.word	0x200009b8
 8004474:	200009bc 	.word	0x200009bc
 8004478:	200009c0 	.word	0x200009c0
 800447c:	200009c4 	.word	0x200009c4
 8004480:	200009c8 	.word	0x200009c8
 8004484:	200009d4 	.word	0x200009d4
 8004488:	200009d8 	.word	0x200009d8
 800448c:	200009dc 	.word	0x200009dc
 8004490:	200009e0 	.word	0x200009e0
 8004494:	200009cc 	.word	0x200009cc
 8004498:	200009d0 	.word	0x200009d0

0800449c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80044a0:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <_tx_initialize_kernel_enter+0x48>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80044a8:	d00c      	beq.n	80044c4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <_tx_initialize_kernel_enter+0x48>)
 80044ac:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80044b0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80044b2:	f7fb fe65 	bl	8000180 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80044b6:	f7ff ffad 	bl	8004414 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <_tx_initialize_kernel_enter+0x4c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <_tx_initialize_kernel_enter+0x4c>)
 80044c2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <_tx_initialize_kernel_enter+0x48>)
 80044c6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80044ca:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <_tx_initialize_kernel_enter+0x50>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7fb ff61 	bl	8000398 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80044d6:	4b03      	ldr	r3, [pc, #12]	; (80044e4 <_tx_initialize_kernel_enter+0x48>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80044dc:	f7fb fe90 	bl	8000200 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	2000000c 	.word	0x2000000c
 80044e8:	20000a84 	.word	0x20000a84
 80044ec:	200009e4 	.word	0x200009e4

080044f0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b092      	sub	sp, #72	; 0x48
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80044fe:	2300      	movs	r3, #0
 8004500:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004502:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004504:	21ef      	movs	r1, #239	; 0xef
 8004506:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004508:	f001 f882 	bl	8005610 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800450c:	22b0      	movs	r2, #176	; 0xb0
 800450e:	2100      	movs	r1, #0
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f001 f87d 	bl	8005610 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800452c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004532:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004538:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800453e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004546:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800454c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	3b01      	subs	r3, #1
 800455e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004560:	4413      	add	r3, r2
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004568:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800456a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800456c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456e:	429a      	cmp	r2, r3
 8004570:	d007      	beq.n	8004582 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004580:	e006      	b.n	8004590 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800458c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2203      	movs	r2, #3
 8004594:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a48      	ldr	r2, [pc, #288]	; (80046bc <_tx_thread_create+0x1cc>)
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80045a2:	4947      	ldr	r1, [pc, #284]	; (80046c0 <_tx_thread_create+0x1d0>)
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f7fb fe7b 	bl	80002a0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045aa:	f3ef 8310 	mrs	r3, PRIMASK
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80045b2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80045b4:	b672      	cpsid	i
    return(int_posture);
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4a41      	ldr	r2, [pc, #260]	; (80046c4 <_tx_thread_create+0x1d4>)
 80045be:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80045c0:	4b41      	ldr	r3, [pc, #260]	; (80046c8 <_tx_thread_create+0x1d8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10b      	bne.n	80045e0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80045c8:	4a40      	ldr	r2, [pc, #256]	; (80046cc <_tx_thread_create+0x1dc>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80045de:	e016      	b.n	800460e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80045e0:	4b3a      	ldr	r3, [pc, #232]	; (80046cc <_tx_thread_create+0x1dc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80045e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ec:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80045ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004602:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800460a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800460e:	4b2e      	ldr	r3, [pc, #184]	; (80046c8 <_tx_thread_create+0x1d8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <_tx_thread_create+0x1d8>)
 8004616:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004618:	4b2d      	ldr	r3, [pc, #180]	; (80046d0 <_tx_thread_create+0x1e0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <_tx_thread_create+0x1e0>)
 8004620:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004624:	2b01      	cmp	r3, #1
 8004626:	d129      	bne.n	800467c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004628:	f3ef 8305 	mrs	r3, IPSR
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004630:	4b28      	ldr	r3, [pc, #160]	; (80046d4 <_tx_thread_create+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800463a:	d30d      	bcc.n	8004658 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800463c:	4b26      	ldr	r3, [pc, #152]	; (80046d8 <_tx_thread_create+0x1e8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800464a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800464e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c
 8004656:	e001      	b.n	800465c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	647b      	str	r3, [r7, #68]	; 0x44
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f969 	bl	8004940 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800466e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01e      	beq.n	80046b2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c
 800467a:	e01a      	b.n	80046b2 <_tx_thread_create+0x1c2>
 800467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004688:	f3ef 8310 	mrs	r3, PRIMASK
 800468c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800468e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004690:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004692:	b672      	cpsid	i
    return(int_posture);
 8004694:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004696:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004698:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <_tx_thread_create+0x1e0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3b01      	subs	r3, #1
 800469e:	4a0c      	ldr	r2, [pc, #48]	; (80046d0 <_tx_thread_create+0x1e0>)
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	f383 8810 	msr	PRIMASK, r3
}
 80046ac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80046ae:	f000 f90f 	bl	80048d0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3748      	adds	r7, #72	; 0x48
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	08004e11 	.word	0x08004e11
 80046c0:	08004755 	.word	0x08004755
 80046c4:	54485244 	.word	0x54485244
 80046c8:	200009f8 	.word	0x200009f8
 80046cc:	200009f4 	.word	0x200009f4
 80046d0:	20000a84 	.word	0x20000a84
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	200009f0 	.word	0x200009f0

080046dc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <_tx_thread_initialize+0x50>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <_tx_thread_initialize+0x54>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	4b11      	ldr	r3, [pc, #68]	; (8004734 <_tx_thread_initialize+0x58>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <_tx_thread_initialize+0x5c>)
 80046f4:	2220      	movs	r2, #32
 80046f6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80046f8:	2280      	movs	r2, #128	; 0x80
 80046fa:	2100      	movs	r1, #0
 80046fc:	480f      	ldr	r0, [pc, #60]	; (800473c <_tx_thread_initialize+0x60>)
 80046fe:	f000 ff87 	bl	8005610 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <_tx_thread_initialize+0x64>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004708:	4b0e      	ldr	r3, [pc, #56]	; (8004744 <_tx_thread_initialize+0x68>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800470e:	4b0e      	ldr	r3, [pc, #56]	; (8004748 <_tx_thread_initialize+0x6c>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004714:	4b0d      	ldr	r3, [pc, #52]	; (800474c <_tx_thread_initialize+0x70>)
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800471a:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <_tx_thread_initialize+0x74>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8004722:	4a0b      	ldr	r2, [pc, #44]	; (8004750 <_tx_thread_initialize+0x74>)
 8004724:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004726:	bf00      	nop
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	200009ec 	.word	0x200009ec
 8004730:	200009f0 	.word	0x200009f0
 8004734:	200009fc 	.word	0x200009fc
 8004738:	20000a00 	.word	0x20000a00
 800473c:	20000a04 	.word	0x20000a04
 8004740:	200009f4 	.word	0x200009f4
 8004744:	200009f8 	.word	0x200009f8
 8004748:	20000a84 	.word	0x20000a84
 800474c:	20000a88 	.word	0x20000a88
 8004750:	20000a8c 	.word	0x20000a8c

08004754 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800475a:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <_tx_thread_shell_entry+0x70>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <_tx_thread_shell_entry+0x74>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <_tx_thread_shell_entry+0x74>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800477c:	f3ef 8310 	mrs	r3, PRIMASK
 8004780:	60bb      	str	r3, [r7, #8]
    return(posture);
 8004782:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8004784:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004786:	b672      	cpsid	i
    return(int_posture);
 8004788:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800478a:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2201      	movs	r2, #1
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2201      	movs	r2, #1
 8004796:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2200      	movs	r2, #0
 800479c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <_tx_thread_shell_entry+0x78>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <_tx_thread_shell_entry+0x78>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f000 f9c3 	bl	8004b40 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200009ec 	.word	0x200009ec
 80047c8:	20000a88 	.word	0x20000a88
 80047cc:	20000a84 	.word	0x20000a84

080047d0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80047d8:	f3ef 8310 	mrs	r3, PRIMASK
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80047e2:	b672      	cpsid	i
    return(int_posture);
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80047e6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80047e8:	4b35      	ldr	r3, [pc, #212]	; (80048c0 <_tx_thread_sleep+0xf0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80047ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <_tx_thread_sleep+0x36>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f383 8810 	msr	PRIMASK, r3
}
 80047fe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004800:	2313      	movs	r3, #19
 8004802:	637b      	str	r3, [r7, #52]	; 0x34
 8004804:	e056      	b.n	80048b4 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004806:	f3ef 8305 	mrs	r3, IPSR
 800480a:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800480c:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800480e:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <_tx_thread_sleep+0xf4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4313      	orrs	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <_tx_thread_sleep+0x5a>
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004824:	2313      	movs	r3, #19
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
 8004828:	e044      	b.n	80048b4 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <_tx_thread_sleep+0xf8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d108      	bne.n	8004844 <_tx_thread_sleep+0x74>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f383 8810 	msr	PRIMASK, r3
}
 800483c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800483e:	2313      	movs	r3, #19
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e037      	b.n	80048b4 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <_tx_thread_sleep+0x8c>
 800484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f383 8810 	msr	PRIMASK, r3
}
 8004854:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004856:	2300      	movs	r3, #0
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
 800485a:	e02b      	b.n	80048b4 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <_tx_thread_sleep+0xfc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <_tx_thread_sleep+0xa6>
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f383 8810 	msr	PRIMASK, r3
}
 800486e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8004870:	2313      	movs	r3, #19
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
 8004874:	e01e      	b.n	80048b4 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2204      	movs	r2, #4
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	2201      	movs	r2, #1
 8004880:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800488a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004890:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <_tx_thread_sleep+0xfc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3301      	adds	r3, #1
 8004896:	4a0d      	ldr	r2, [pc, #52]	; (80048cc <_tx_thread_sleep+0xfc>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80048a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048a8:	f000 f94a 	bl	8004b40 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3738      	adds	r7, #56	; 0x38
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	200009ec 	.word	0x200009ec
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	20000b34 	.word	0x20000b34
 80048cc:	20000a84 	.word	0x20000a84

080048d0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80048d6:	4b16      	ldr	r3, [pc, #88]	; (8004930 <_tx_thread_system_preempt_check+0x60>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d121      	bne.n	8004926 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80048e2:	4b14      	ldr	r3, [pc, #80]	; (8004934 <_tx_thread_system_preempt_check+0x64>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <_tx_thread_system_preempt_check+0x68>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d017      	beq.n	8004926 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <_tx_thread_system_preempt_check+0x6c>)
 80048f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80048fe:	f3ef 8305 	mrs	r3, IPSR
 8004902:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004904:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004910:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004912:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004914:	b662      	cpsie	i
}
 8004916:	bf00      	nop
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004924:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004926:	bf00      	nop
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	20000a84 	.word	0x20000a84
 8004934:	200009ec 	.word	0x200009ec
 8004938:	200009f0 	.word	0x200009f0
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b096      	sub	sp, #88	; 0x58
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004948:	f3ef 8310 	mrs	r3, PRIMASK
 800494c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800494e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004950:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004952:	b672      	cpsid	i
    return(int_posture);
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004956:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	334c      	adds	r3, #76	; 0x4c
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fb8d 	bl	8005084 <_tx_timer_system_deactivate>
 800496a:	e002      	b.n	8004972 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004972:	4b6c      	ldr	r3, [pc, #432]	; (8004b24 <_tx_thread_system_resume+0x1e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	4a6a      	ldr	r2, [pc, #424]	; (8004b24 <_tx_thread_system_resume+0x1e4>)
 800497a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 8083 	bne.w	8004a8c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 8097 	beq.w	8004abe <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	2b00      	cmp	r3, #0
 8004996:	d172      	bne.n	8004a7e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80049a4:	4a60      	ldr	r2, [pc, #384]	; (8004b28 <_tx_thread_system_resume+0x1e8>)
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ac:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80049ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d154      	bne.n	8004a5e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80049b4:	495c      	ldr	r1, [pc, #368]	; (8004b28 <_tx_thread_system_resume+0x1e8>)
 80049b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80049ca:	2201      	movs	r2, #1
 80049cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80049d4:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <_tx_thread_system_resume+0x1ec>)
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049da:	4313      	orrs	r3, r2
 80049dc:	4a53      	ldr	r2, [pc, #332]	; (8004b2c <_tx_thread_system_resume+0x1ec>)
 80049de:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80049e0:	4b53      	ldr	r3, [pc, #332]	; (8004b30 <_tx_thread_system_resume+0x1f0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d269      	bcs.n	8004abe <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80049ea:	4a51      	ldr	r2, [pc, #324]	; (8004b30 <_tx_thread_system_resume+0x1f0>)
 80049ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ee:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <_tx_thread_system_resume+0x1f4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80049f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d103      	bne.n	8004a04 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80049fc:	4a4d      	ldr	r2, [pc, #308]	; (8004b34 <_tx_thread_system_resume+0x1f4>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e05c      	b.n	8004abe <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8004a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d257      	bcs.n	8004abe <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8004a0e:	4a49      	ldr	r2, [pc, #292]	; (8004b34 <_tx_thread_system_resume+0x1f4>)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004a20:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <_tx_thread_system_resume+0x1e4>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d174      	bne.n	8004b16 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004a2c:	4b42      	ldr	r3, [pc, #264]	; (8004b38 <_tx_thread_system_resume+0x1f8>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004a34:	f3ef 8305 	mrs	r3, IPSR
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a40:	f3ef 8310 	mrs	r3, PRIMASK
 8004a44:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8004a48:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004a4a:	b662      	cpsie	i
}
 8004a4c:	bf00      	nop
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f383 8810 	msr	PRIMASK, r3
}
 8004a58:	bf00      	nop
}
 8004a5a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8004a5c:	e05b      	b.n	8004b16 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a7a:	621a      	str	r2, [r3, #32]
 8004a7c:	e01f      	b.n	8004abe <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2203      	movs	r2, #3
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
 8004a8a:	e018      	b.n	8004abe <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d014      	beq.n	8004abe <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d010      	beq.n	8004abe <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d106      	bne.n	8004ab2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
 8004ab0:	e005      	b.n	8004abe <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2203      	movs	r2, #3
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <_tx_thread_system_resume+0x1fc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f383 8810 	msr	PRIMASK, r3
}
 8004ace:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <_tx_thread_system_resume+0x1f4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d020      	beq.n	8004b1c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <_tx_thread_system_resume+0x1e4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11a      	bne.n	8004b1c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <_tx_thread_system_resume+0x1f8>)
 8004ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004aee:	f3ef 8305 	mrs	r3, IPSR
 8004af2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004af4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10f      	bne.n	8004b1a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004afa:	f3ef 8310 	mrs	r3, PRIMASK
 8004afe:	613b      	str	r3, [r7, #16]
    return(posture);
 8004b00:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8004b02:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004b04:	b662      	cpsie	i
}
 8004b06:	bf00      	nop
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f383 8810 	msr	PRIMASK, r3
}
 8004b12:	bf00      	nop
}
 8004b14:	e001      	b.n	8004b1a <_tx_thread_system_resume+0x1da>
                                return;
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <_tx_thread_system_resume+0x1dc>
 8004b1a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8004b1c:	3758      	adds	r7, #88	; 0x58
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000a84 	.word	0x20000a84
 8004b28:	20000a04 	.word	0x20000a04
 8004b2c:	200009fc 	.word	0x200009fc
 8004b30:	20000a00 	.word	0x20000a00
 8004b34:	200009f0 	.word	0x200009f0
 8004b38:	e000ed04 	.word	0xe000ed04
 8004b3c:	200009ec 	.word	0x200009ec

08004b40 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b09e      	sub	sp, #120	; 0x78
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8004b48:	4b81      	ldr	r3, [pc, #516]	; (8004d50 <_tx_thread_system_suspend+0x210>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b52:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8004b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8004b56:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b58:	b672      	cpsid	i
    return(int_posture);
 8004b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8004b5c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d112      	bne.n	8004b8c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8004b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d008      	beq.n	8004b84 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8004b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b78:	d004      	beq.n	8004b84 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	334c      	adds	r3, #76	; 0x4c
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa20 	bl	8004fc4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	4a72      	ldr	r2, [pc, #456]	; (8004d54 <_tx_thread_system_suspend+0x214>)
 8004b8a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004b8c:	4b72      	ldr	r3, [pc, #456]	; (8004d58 <_tx_thread_system_suspend+0x218>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	4a71      	ldr	r2, [pc, #452]	; (8004d58 <_tx_thread_system_suspend+0x218>)
 8004b94:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 80a6 	bne.w	8004cec <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8004bb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d015      	beq.n	8004be6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8004bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bca:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8004bcc:	4a63      	ldr	r2, [pc, #396]	; (8004d5c <_tx_thread_system_suspend+0x21c>)
 8004bce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d157      	bne.n	8004c8a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8004bda:	4960      	ldr	r1, [pc, #384]	; (8004d5c <_tx_thread_system_suspend+0x21c>)
 8004bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bde:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004be4:	e051      	b.n	8004c8a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8004be6:	4a5d      	ldr	r2, [pc, #372]	; (8004d5c <_tx_thread_system_suspend+0x21c>)
 8004be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bea:	2100      	movs	r1, #0
 8004bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8004bfa:	4b59      	ldr	r3, [pc, #356]	; (8004d60 <_tx_thread_system_suspend+0x220>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c00:	43db      	mvns	r3, r3
 8004c02:	4013      	ands	r3, r2
 8004c04:	4a56      	ldr	r2, [pc, #344]	; (8004d60 <_tx_thread_system_suspend+0x220>)
 8004c06:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8004c08:	2300      	movs	r3, #0
 8004c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8004c0c:	4b54      	ldr	r3, [pc, #336]	; (8004d60 <_tx_thread_system_suspend+0x220>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d12b      	bne.n	8004c70 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004c18:	4b52      	ldr	r3, [pc, #328]	; (8004d64 <_tx_thread_system_suspend+0x224>)
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8004c1e:	4b52      	ldr	r3, [pc, #328]	; (8004d68 <_tx_thread_system_suspend+0x228>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2a:	f383 8810 	msr	PRIMASK, r3
}
 8004c2e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004c30:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <_tx_thread_system_suspend+0x218>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8004c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 8081 	bne.w	8004d40 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004c3e:	4b4b      	ldr	r3, [pc, #300]	; (8004d6c <_tx_thread_system_suspend+0x22c>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004c46:	f3ef 8305 	mrs	r3, IPSR
 8004c4a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8004c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10c      	bne.n	8004c6c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c52:	f3ef 8310 	mrs	r3, PRIMASK
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004c5c:	b662      	cpsie	i
}
 8004c5e:	bf00      	nop
 8004c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c62:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c66:	f383 8810 	msr	PRIMASK, r3
}
 8004c6a:	bf00      	nop
}
 8004c6c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8004c6e:	e067      	b.n	8004d40 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8004c70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c7a:	fab3 f383 	clz	r3, r3
 8004c7e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8004c80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c84:	4413      	add	r3, r2
 8004c86:	4a37      	ldr	r2, [pc, #220]	; (8004d64 <_tx_thread_system_suspend+0x224>)
 8004c88:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8004c8a:	4b37      	ldr	r3, [pc, #220]	; (8004d68 <_tx_thread_system_suspend+0x228>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d12b      	bne.n	8004cec <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004c94:	4b33      	ldr	r3, [pc, #204]	; (8004d64 <_tx_thread_system_suspend+0x224>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a30      	ldr	r2, [pc, #192]	; (8004d5c <_tx_thread_system_suspend+0x21c>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	4a32      	ldr	r2, [pc, #200]	; (8004d68 <_tx_thread_system_suspend+0x228>)
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	f383 8810 	msr	PRIMASK, r3
}
 8004cac:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <_tx_thread_system_suspend+0x218>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d144      	bne.n	8004d44 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004cba:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <_tx_thread_system_suspend+0x22c>)
 8004cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004cc2:	f3ef 8305 	mrs	r3, IPSR
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10c      	bne.n	8004ce8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004cd8:	b662      	cpsie	i
}
 8004cda:	bf00      	nop
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	f383 8810 	msr	PRIMASK, r3
}
 8004ce6:	bf00      	nop
}
 8004ce8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8004cea:	e02b      	b.n	8004d44 <_tx_thread_system_suspend+0x204>
 8004cec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <_tx_thread_system_suspend+0x228>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d022      	beq.n	8004d48 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <_tx_thread_system_suspend+0x218>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8004d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d11c      	bne.n	8004d48 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004d0e:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <_tx_thread_system_suspend+0x22c>)
 8004d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d14:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d16:	f3ef 8305 	mrs	r3, IPSR
 8004d1a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004d1c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10c      	bne.n	8004d3c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d22:	f3ef 8310 	mrs	r3, PRIMASK
 8004d26:	617b      	str	r3, [r7, #20]
    return(posture);
 8004d28:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8004d2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004d2c:	b662      	cpsie	i
}
 8004d2e:	bf00      	nop
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	bf00      	nop
}
 8004d3c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8004d3e:	e003      	b.n	8004d48 <_tx_thread_system_suspend+0x208>
                return;
 8004d40:	bf00      	nop
 8004d42:	e002      	b.n	8004d4a <_tx_thread_system_suspend+0x20a>
            return;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <_tx_thread_system_suspend+0x20a>
    return;
 8004d48:	bf00      	nop
}
 8004d4a:	3778      	adds	r7, #120	; 0x78
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200009ec 	.word	0x200009ec
 8004d54:	20000ff0 	.word	0x20000ff0
 8004d58:	20000a84 	.word	0x20000a84
 8004d5c:	20000a04 	.word	0x20000a04
 8004d60:	200009fc 	.word	0x200009fc
 8004d64:	20000a00 	.word	0x20000a00
 8004d68:	200009f0 	.word	0x200009f0
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <_tx_thread_time_slice+0x88>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d80:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004d82:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8004d84:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d86:	b672      	cpsid	i
    return(int_posture);
 8004d88:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8004d8a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <_tx_thread_time_slice+0x8c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d024      	beq.n	8004de2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d120      	bne.n	8004de2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <_tx_thread_time_slice+0x90>)
 8004dae:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d013      	beq.n	8004de2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d10d      	bne.n	8004de2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	6a12      	ldr	r2, [r2, #32]
 8004dce:	490d      	ldr	r1, [pc, #52]	; (8004e04 <_tx_thread_time_slice+0x94>)
 8004dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <_tx_thread_time_slice+0x98>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <_tx_thread_time_slice+0x94>)
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	4a0b      	ldr	r2, [pc, #44]	; (8004e0c <_tx_thread_time_slice+0x9c>)
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f383 8810 	msr	PRIMASK, r3
}
 8004dec:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	200009ec 	.word	0x200009ec
 8004dfc:	20000a94 	.word	0x20000a94
 8004e00:	20000ff0 	.word	0x20000ff0
 8004e04:	20000a04 	.word	0x20000a04
 8004e08:	20000a00 	.word	0x20000a00
 8004e0c:	200009f0 	.word	0x200009f0

08004e10 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e20:	617b      	str	r3, [r7, #20]
    return(posture);
 8004e22:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8004e24:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e26:	b672      	cpsid	i
    return(int_posture);
 8004e28:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8004e2a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d10e      	bne.n	8004e52 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8004e34:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <_tx_thread_timeout+0x74>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <_tx_thread_timeout+0x74>)
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e4c:	f7ff fd78 	bl	8004940 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8004e50:	e013      	b.n	8004e7a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e56:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f383 8810 	msr	PRIMASK, r3
}
 8004e6a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	69b9      	ldr	r1, [r7, #24]
 8004e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e78:	4798      	blx	r3
}
 8004e7a:	bf00      	nop
 8004e7c:	3728      	adds	r7, #40	; 0x28
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000a84 	.word	0x20000a84

08004e88 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e92:	607b      	str	r3, [r7, #4]
    return(posture);
 8004e94:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8004e96:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e98:	b672      	cpsid	i
    return(int_posture);
 8004e9a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8004e9c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <_tx_timer_expiration_process+0x3c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	4a07      	ldr	r2, [pc, #28]	; (8004ec4 <_tx_timer_expiration_process+0x3c>)
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f383 8810 	msr	PRIMASK, r3
}
 8004eb2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8004eb4:	4804      	ldr	r0, [pc, #16]	; (8004ec8 <_tx_timer_expiration_process+0x40>)
 8004eb6:	f7ff fd43 	bl	8004940 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000a84 	.word	0x20000a84
 8004ec8:	20000b34 	.word	0x20000b34

08004ecc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b089      	sub	sp, #36	; 0x24
 8004ed0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8004ed2:	4b28      	ldr	r3, [pc, #160]	; (8004f74 <_tx_timer_initialize+0xa8>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8004ed8:	4b27      	ldr	r3, [pc, #156]	; (8004f78 <_tx_timer_initialize+0xac>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8004ede:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <_tx_timer_initialize+0xb0>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <_tx_timer_initialize+0xb4>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8004eea:	4b26      	ldr	r3, [pc, #152]	; (8004f84 <_tx_timer_initialize+0xb8>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8004ef0:	2280      	movs	r2, #128	; 0x80
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	4824      	ldr	r0, [pc, #144]	; (8004f88 <_tx_timer_initialize+0xbc>)
 8004ef6:	f000 fb8b 	bl	8005610 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <_tx_timer_initialize+0xc0>)
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <_tx_timer_initialize+0xbc>)
 8004efe:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8004f00:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <_tx_timer_initialize+0xc4>)
 8004f02:	4a21      	ldr	r2, [pc, #132]	; (8004f88 <_tx_timer_initialize+0xbc>)
 8004f04:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004f06:	4b23      	ldr	r3, [pc, #140]	; (8004f94 <_tx_timer_initialize+0xc8>)
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <_tx_timer_initialize+0xcc>)
 8004f0a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004f0c:	4b21      	ldr	r3, [pc, #132]	; (8004f94 <_tx_timer_initialize+0xc8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4a20      	ldr	r2, [pc, #128]	; (8004f94 <_tx_timer_initialize+0xc8>)
 8004f14:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004f16:	4b21      	ldr	r3, [pc, #132]	; (8004f9c <_tx_timer_initialize+0xd0>)
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <_tx_timer_initialize+0xd4>)
 8004f1a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <_tx_timer_initialize+0xd8>)
 8004f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f22:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004f24:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <_tx_timer_initialize+0xdc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <_tx_timer_initialize+0xd0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	; (8004fa4 <_tx_timer_initialize+0xd8>)
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	491d      	ldr	r1, [pc, #116]	; (8004fa8 <_tx_timer_initialize+0xdc>)
 8004f34:	6809      	ldr	r1, [r1, #0]
 8004f36:	481c      	ldr	r0, [pc, #112]	; (8004fa8 <_tx_timer_initialize+0xdc>)
 8004f38:	6800      	ldr	r0, [r0, #0]
 8004f3a:	2400      	movs	r4, #0
 8004f3c:	9405      	str	r4, [sp, #20]
 8004f3e:	2400      	movs	r4, #0
 8004f40:	9404      	str	r4, [sp, #16]
 8004f42:	9003      	str	r0, [sp, #12]
 8004f44:	9102      	str	r1, [sp, #8]
 8004f46:	9201      	str	r2, [sp, #4]
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4b18      	ldr	r3, [pc, #96]	; (8004fac <_tx_timer_initialize+0xe0>)
 8004f4c:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <_tx_timer_initialize+0xe4>)
 8004f4e:	4919      	ldr	r1, [pc, #100]	; (8004fb4 <_tx_timer_initialize+0xe8>)
 8004f50:	4819      	ldr	r0, [pc, #100]	; (8004fb8 <_tx_timer_initialize+0xec>)
 8004f52:	f7ff facd 	bl	80044f0 <_tx_thread_create>
 8004f56:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1e5      	bne.n	8004f2a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8004f5e:	4b17      	ldr	r3, [pc, #92]	; (8004fbc <_tx_timer_initialize+0xf0>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <_tx_timer_initialize+0xf4>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000a90 	.word	0x20000a90
 8004f78:	20000ff0 	.word	0x20000ff0
 8004f7c:	20000a94 	.word	0x20000a94
 8004f80:	20000b24 	.word	0x20000b24
 8004f84:	20000b30 	.word	0x20000b30
 8004f88:	20000a98 	.word	0x20000a98
 8004f8c:	20000b18 	.word	0x20000b18
 8004f90:	20000b20 	.word	0x20000b20
 8004f94:	20000b1c 	.word	0x20000b1c
 8004f98:	20000b14 	.word	0x20000b14
 8004f9c:	20000be4 	.word	0x20000be4
 8004fa0:	20000bf0 	.word	0x20000bf0
 8004fa4:	20000be8 	.word	0x20000be8
 8004fa8:	20000bec 	.word	0x20000bec
 8004fac:	4154494d 	.word	0x4154494d
 8004fb0:	080050f1 	.word	0x080050f1
 8004fb4:	080056bc 	.word	0x080056bc
 8004fb8:	20000b34 	.word	0x20000b34
 8004fbc:	20000b28 	.word	0x20000b28
 8004fc0:	20000b2c 	.word	0x20000b2c

08004fc4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d04a      	beq.n	800506e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d046      	beq.n	800506e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d142      	bne.n	800506e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b20      	cmp	r3, #32
 8004fec:	d902      	bls.n	8004ff4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8004fee:	231f      	movs	r3, #31
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	e002      	b.n	8004ffa <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	; (8005078 <_tx_timer_system_activate+0xb4>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <_tx_timer_system_activate+0xb8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	429a      	cmp	r2, r3
 800500e:	d30b      	bcc.n	8005028 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <_tx_timer_system_activate+0xb8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69fa      	ldr	r2, [r7, #28]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	109b      	asrs	r3, r3, #2
 800501a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800501c:	4b18      	ldr	r3, [pc, #96]	; (8005080 <_tx_timer_system_activate+0xbc>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e011      	b.n	8005068 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800506e:	bf00      	nop
 8005070:	3724      	adds	r7, #36	; 0x24
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr
 8005078:	20000b20 	.word	0x20000b20
 800507c:	20000b1c 	.word	0x20000b1c
 8005080:	20000b18 	.word	0x20000b18

08005084 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d026      	beq.n	80050e6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d108      	bne.n	80050b8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d117      	bne.n	80050e0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	e013      	b.n	80050e0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d105      	bne.n	80050e0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	619a      	str	r2, [r3, #24]
    }
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr

080050f0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b098      	sub	sp, #96	; 0x60
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80050f8:	2300      	movs	r3, #0
 80050fa:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a73      	ldr	r2, [pc, #460]	; (80052cc <_tx_timer_thread_entry+0x1dc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	f040 80de 	bne.w	80052c2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005106:	f3ef 8310 	mrs	r3, PRIMASK
 800510a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800510c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800510e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005110:	b672      	cpsid	i
    return(int_posture);
 8005112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005114:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8005116:	4b6e      	ldr	r3, [pc, #440]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f107 020c 	add.w	r2, r7, #12
 800512a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800512c:	4b68      	ldr	r3, [pc, #416]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005134:	4b66      	ldr	r3, [pc, #408]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3304      	adds	r3, #4
 800513a:	4a65      	ldr	r2, [pc, #404]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 800513c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800513e:	4b64      	ldr	r3, [pc, #400]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b64      	ldr	r3, [pc, #400]	; (80052d4 <_tx_timer_thread_entry+0x1e4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d103      	bne.n	8005152 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800514a:	4b63      	ldr	r3, [pc, #396]	; (80052d8 <_tx_timer_thread_entry+0x1e8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a60      	ldr	r2, [pc, #384]	; (80052d0 <_tx_timer_thread_entry+0x1e0>)
 8005150:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005152:	4b62      	ldr	r3, [pc, #392]	; (80052dc <_tx_timer_thread_entry+0x1ec>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	f383 8810 	msr	PRIMASK, r3
}
 8005162:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005164:	f3ef 8310 	mrs	r3, PRIMASK
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800516e:	b672      	cpsid	i
    return(int_posture);
 8005170:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005172:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005174:	e07f      	b.n	8005276 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005184:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005188:	429a      	cmp	r2, r3
 800518a:	d102      	bne.n	8005192 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e00e      	b.n	80051b0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800519a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800519e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051a2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80051a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a6:	f107 020c 	add.w	r2, r7, #12
 80051aa:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80051ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ae:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d911      	bls.n	80051dc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80051b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80051c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80051c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ca:	f107 0208 	add.w	r2, r7, #8
 80051ce:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80051d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051d4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80051d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	e01a      	b.n	8005212 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80051dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80051e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80051e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ee:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80051f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80051f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fa:	f107 0208 	add.w	r2, r7, #8
 80051fe:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005204:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	e002      	b.n	8005212 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800520c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800520e:	2200      	movs	r2, #0
 8005210:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005212:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <_tx_timer_thread_entry+0x1f0>)
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8005224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800522a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800522e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005230:	f3ef 8310 	mrs	r3, PRIMASK
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800523a:	b672      	cpsid	i
    return(int_posture);
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800523e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005240:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <_tx_timer_thread_entry+0x1f0>)
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800524a:	429a      	cmp	r2, r3
 800524c:	d105      	bne.n	800525a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800524e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005254:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005256:	f7ff feb5 	bl	8004fc4 <_tx_timer_system_activate>
 800525a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005266:	f3ef 8310 	mrs	r3, PRIMASK
 800526a:	623b      	str	r3, [r7, #32]
    return(posture);
 800526c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800526e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005270:	b672      	cpsid	i
    return(int_posture);
 8005272:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005274:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f af7c 	bne.w	8005176 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800527e:	4b17      	ldr	r3, [pc, #92]	; (80052dc <_tx_timer_thread_entry+0x1ec>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d116      	bne.n	80052b4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <_tx_timer_thread_entry+0x1f4>)
 8005288:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	2203      	movs	r2, #3
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005292:	2201      	movs	r2, #1
 8005294:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005296:	4b14      	ldr	r3, [pc, #80]	; (80052e8 <_tx_timer_thread_entry+0x1f8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3301      	adds	r3, #1
 800529c:	4a12      	ldr	r2, [pc, #72]	; (80052e8 <_tx_timer_thread_entry+0x1f8>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f383 8810 	msr	PRIMASK, r3
}
 80052aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80052ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80052ae:	f7ff fc47 	bl	8004b40 <_tx_thread_system_suspend>
 80052b2:	e728      	b.n	8005106 <_tx_timer_thread_entry+0x16>
 80052b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f383 8810 	msr	PRIMASK, r3
}
 80052be:	bf00      	nop
            TX_DISABLE
 80052c0:	e721      	b.n	8005106 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80052c2:	bf00      	nop
 80052c4:	3760      	adds	r7, #96	; 0x60
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	4154494d 	.word	0x4154494d
 80052d0:	20000b20 	.word	0x20000b20
 80052d4:	20000b1c 	.word	0x20000b1c
 80052d8:	20000b18 	.word	0x20000b18
 80052dc:	20000b24 	.word	0x20000b24
 80052e0:	20000b30 	.word	0x20000b30
 80052e4:	20000b34 	.word	0x20000b34
 80052e8:	20000a84 	.word	0x20000a84

080052ec <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b092      	sub	sp, #72	; 0x48
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80052fa:	2300      	movs	r3, #0
 80052fc:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005304:	2302      	movs	r3, #2
 8005306:	647b      	str	r3, [r7, #68]	; 0x44
 8005308:	e075      	b.n	80053f6 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800530c:	2b34      	cmp	r3, #52	; 0x34
 800530e:	d002      	beq.n	8005316 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005310:	2302      	movs	r3, #2
 8005312:	647b      	str	r3, [r7, #68]	; 0x44
 8005314:	e06f      	b.n	80053f6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005316:	f3ef 8310 	mrs	r3, PRIMASK
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800531e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005320:	b672      	cpsid	i
    return(int_posture);
 8005322:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005326:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <_txe_byte_pool_create+0x128>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3301      	adds	r3, #1
 800532c:	4a39      	ldr	r2, [pc, #228]	; (8005414 <_txe_byte_pool_create+0x128>)
 800532e:	6013      	str	r3, [r2, #0]
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f383 8810 	msr	PRIMASK, r3
}
 800533a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800533c:	4b36      	ldr	r3, [pc, #216]	; (8005418 <_txe_byte_pool_create+0x12c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005342:	2300      	movs	r3, #0
 8005344:	643b      	str	r3, [r7, #64]	; 0x40
 8005346:	e009      	b.n	800535c <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534c:	429a      	cmp	r2, r3
 800534e:	d00b      	beq.n	8005368 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005358:	3301      	adds	r3, #1
 800535a:	643b      	str	r3, [r7, #64]	; 0x40
 800535c:	4b2f      	ldr	r3, [pc, #188]	; (800541c <_txe_byte_pool_create+0x130>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005362:	429a      	cmp	r2, r3
 8005364:	d3f0      	bcc.n	8005348 <_txe_byte_pool_create+0x5c>
 8005366:	e000      	b.n	800536a <_txe_byte_pool_create+0x7e>
                break;
 8005368:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800536a:	f3ef 8310 	mrs	r3, PRIMASK
 800536e:	623b      	str	r3, [r7, #32]
    return(posture);
 8005370:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005372:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005374:	b672      	cpsid	i
    return(int_posture);
 8005376:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005378:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800537a:	4b26      	ldr	r3, [pc, #152]	; (8005414 <_txe_byte_pool_create+0x128>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a24      	ldr	r2, [pc, #144]	; (8005414 <_txe_byte_pool_create+0x128>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005386:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	f383 8810 	msr	PRIMASK, r3
}
 800538e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005390:	f7ff fa9e 	bl	80048d0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d102      	bne.n	80053a2 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800539c:	2302      	movs	r3, #2
 800539e:	647b      	str	r3, [r7, #68]	; 0x44
 80053a0:	e029      	b.n	80053f6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80053a8:	2303      	movs	r3, #3
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
 80053ac:	e023      	b.n	80053f6 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b63      	cmp	r3, #99	; 0x63
 80053b2:	d802      	bhi.n	80053ba <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80053b4:	2305      	movs	r3, #5
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44
 80053b8:	e01d      	b.n	80053f6 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80053ba:	4b19      	ldr	r3, [pc, #100]	; (8005420 <_txe_byte_pool_create+0x134>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	4a18      	ldr	r2, [pc, #96]	; (8005424 <_txe_byte_pool_create+0x138>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d101      	bne.n	80053cc <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80053c8:	2313      	movs	r3, #19
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80053cc:	f3ef 8305 	mrs	r3, IPSR
 80053d0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80053d2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <_txe_byte_pool_create+0x13c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4313      	orrs	r3, r2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80053de:	f3ef 8305 	mrs	r3, IPSR
 80053e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80053e4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80053e6:	4b10      	ldr	r3, [pc, #64]	; (8005428 <_txe_byte_pool_create+0x13c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80053f0:	d201      	bcs.n	80053f6 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80053f2:	2313      	movs	r3, #19
 80053f4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7fe ff70 	bl	80042e8 <_tx_byte_pool_create>
 8005408:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800540a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800540c:	4618      	mov	r0, r3
 800540e:	3748      	adds	r7, #72	; 0x48
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	20000a84 	.word	0x20000a84
 8005418:	200009dc 	.word	0x200009dc
 800541c:	200009e0 	.word	0x200009e0
 8005420:	200009ec 	.word	0x200009ec
 8005424:	20000b34 	.word	0x20000b34
 8005428:	2000000c 	.word	0x2000000c

0800542c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b09a      	sub	sp, #104	; 0x68
 8005430:	af06      	add	r7, sp, #24
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800543a:	2300      	movs	r3, #0
 800543c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005444:	230e      	movs	r3, #14
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005448:	e0bb      	b.n	80055c2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800544a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800544c:	2bb0      	cmp	r3, #176	; 0xb0
 800544e:	d002      	beq.n	8005456 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005450:	230e      	movs	r3, #14
 8005452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005454:	e0b5      	b.n	80055c2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005456:	f3ef 8310 	mrs	r3, PRIMASK
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005460:	b672      	cpsid	i
    return(int_posture);
 8005462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005466:	4b64      	ldr	r3, [pc, #400]	; (80055f8 <_txe_thread_create+0x1cc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a62      	ldr	r2, [pc, #392]	; (80055f8 <_txe_thread_create+0x1cc>)
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005472:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	f383 8810 	msr	PRIMASK, r3
}
 800547a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8005480:	4b5e      	ldr	r3, [pc, #376]	; (80055fc <_txe_thread_create+0x1d0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800548a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548c:	3b01      	subs	r3, #1
 800548e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005490:	4413      	add	r3, r2
 8005492:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005498:	2300      	movs	r3, #0
 800549a:	647b      	str	r3, [r7, #68]	; 0x44
 800549c:	e02b      	b.n	80054f6 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d101      	bne.n	80054aa <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80054aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d028      	beq.n	8005502 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80054b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d308      	bcc.n	80054cc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80054ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d203      	bcs.n	80054cc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80054cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d308      	bcc.n	80054e8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054dc:	429a      	cmp	r2, r3
 80054de:	d203      	bcs.n	80054e8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80054e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80054f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054f2:	3301      	adds	r3, #1
 80054f4:	647b      	str	r3, [r7, #68]	; 0x44
 80054f6:	4b42      	ldr	r3, [pc, #264]	; (8005600 <_txe_thread_create+0x1d4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d3ce      	bcc.n	800549e <_txe_thread_create+0x72>
 8005500:	e000      	b.n	8005504 <_txe_thread_create+0xd8>
                break;
 8005502:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005504:	f3ef 8310 	mrs	r3, PRIMASK
 8005508:	61fb      	str	r3, [r7, #28]
    return(posture);
 800550a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800550c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800550e:	b672      	cpsid	i
    return(int_posture);
 8005510:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005514:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <_txe_thread_create+0x1cc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3b01      	subs	r3, #1
 800551a:	4a37      	ldr	r2, [pc, #220]	; (80055f8 <_txe_thread_create+0x1cc>)
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005520:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800552a:	f7ff f9d1 	bl	80048d0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005532:	429a      	cmp	r2, r3
 8005534:	d102      	bne.n	800553c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8005536:	230e      	movs	r3, #14
 8005538:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553a:	e042      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800553c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005542:	2303      	movs	r3, #3
 8005544:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005546:	e03c      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d102      	bne.n	8005554 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800554e:	2303      	movs	r3, #3
 8005550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005552:	e036      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005556:	2bc7      	cmp	r3, #199	; 0xc7
 8005558:	d802      	bhi.n	8005560 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800555a:	2305      	movs	r3, #5
 800555c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800555e:	e030      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8005560:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005562:	2b1f      	cmp	r3, #31
 8005564:	d902      	bls.n	800556c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8005566:	230f      	movs	r3, #15
 8005568:	64fb      	str	r3, [r7, #76]	; 0x4c
 800556a:	e02a      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800556c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800556e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005570:	429a      	cmp	r2, r3
 8005572:	d902      	bls.n	800557a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8005574:	2318      	movs	r3, #24
 8005576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005578:	e023      	b.n	80055c2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800557a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d902      	bls.n	8005586 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8005580:	2310      	movs	r3, #16
 8005582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005584:	e01d      	b.n	80055c2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <_txe_thread_create+0x1d8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <_txe_thread_create+0x1dc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d101      	bne.n	8005598 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005594:	2313      	movs	r3, #19
 8005596:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005598:	f3ef 8305 	mrs	r3, IPSR
 800559c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800559e:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80055a0:	4b1a      	ldr	r3, [pc, #104]	; (800560c <_txe_thread_create+0x1e0>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00b      	beq.n	80055c2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055aa:	f3ef 8305 	mrs	r3, IPSR
 80055ae:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80055b0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80055b2:	4b16      	ldr	r3, [pc, #88]	; (800560c <_txe_thread_create+0x1e0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80055bc:	d201      	bcs.n	80055c2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80055be:	2313      	movs	r3, #19
 80055c0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80055c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d112      	bne.n	80055ee <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80055c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ca:	9305      	str	r3, [sp, #20]
 80055cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d2:	9303      	str	r3, [sp, #12]
 80055d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055d6:	9302      	str	r3, [sp, #8]
 80055d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7fe ff82 	bl	80044f0 <_tx_thread_create>
 80055ec:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80055ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3750      	adds	r7, #80	; 0x50
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000a84 	.word	0x20000a84
 80055fc:	200009f4 	.word	0x200009f4
 8005600:	200009f8 	.word	0x200009f8
 8005604:	200009ec 	.word	0x200009ec
 8005608:	20000b34 	.word	0x20000b34
 800560c:	2000000c 	.word	0x2000000c

08005610 <memset>:
 8005610:	4402      	add	r2, r0
 8005612:	4603      	mov	r3, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	; (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	; (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	; (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	; (8005664 <__libc_init_array+0x44>)
 8005634:	f000 f818 	bl	8005668 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	08005770 	.word	0x08005770
 800565c:	08005770 	.word	0x08005770
 8005660:	08005770 	.word	0x08005770
 8005664:	08005774 	.word	0x08005774

08005668 <_init>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr

08005674 <_fini>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr
