
stm32wle5-at42qt1070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e10  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800607c  0800607c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800607c  0800607c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006080  08006080  00016080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006084  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a4  20000010  08006094  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015b4  08006094  000215b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce0c  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a39  00000000  00000000  0003ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  000428c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012bb  00000000  00000000  00044260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e858  00000000  00000000  0004551b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d9f  00000000  00000000  00063d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac771  00000000  00000000  00086b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005fa8  00000000  00000000  00133284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000109  00000000  00000000  0013922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000010 	.word	0x20000010
 800015c:	00000000 	.word	0x00000000
 8000160:	08005f38 	.word	0x08005f38

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000014 	.word	0x20000014
 800017c:	08005f38 	.word	0x08005f38

08000180 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000180:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000182:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000186:	4919      	ldr	r1, [pc, #100]	; (80001ec <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000188:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800018c:	4818      	ldr	r0, [pc, #96]	; (80001f0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800018e:	4917      	ldr	r1, [pc, #92]	; (80001ec <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000190:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000192:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000194:	4817      	ldr	r0, [pc, #92]	; (80001f4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000196:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000198:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800019c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800019e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 80001a2:	4915      	ldr	r1, [pc, #84]	; (80001f8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 80001a4:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 80001a6:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 80001aa:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 80001ac:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 80001b0:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 80001b4:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 80001b8:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001bc:	490f      	ldr	r1, [pc, #60]	; (80001fc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 80001be:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 80001c2:	4770      	bx	lr

080001c4 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 80001c4:	f7ff bffe 	b.w	80001c4 <__tx_BadHandler>

080001c8 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 80001c8:	f7ff bffe 	b.w	80001c8 <__tx_HardfaultHandler>

080001cc <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 80001cc:	f7ff bffe 	b.w	80001cc <__tx_SVCallHandler>

080001d0 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 80001d0:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001d6:	4770      	bx	lr

080001d8 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 80001d8:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80001da:	f000 f881 	bl	80002e0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 80001de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80001e2:	4770      	bx	lr

080001e4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80001e4:	f7ff bffe 	b.w	80001e4 <__tx_NMIHandler>

080001e8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80001e8:	f7ff bffe 	b.w	80001e8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ec:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001f0:	20000fa8 	.word	0x20000fa8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80001f8:	000752ff 	.word	0x000752ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80001fc:	40ff0000 	.word	0x40ff0000

08000200 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000200:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000204:	4a22      	ldr	r2, [pc, #136]	; (8000290 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000206:	6010      	str	r0, [r2, #0]
    BIC     r0, r0, #4                              // Clear the FPCA bit
    MSR     CONTROL, r0                             // Setup new CONTROL register
#endif

    /* Enable interrupts */
    CPSIE   i
 8000208:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 800020a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800020e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 8000212:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000216:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 800021a:	f3bf 8f6f 	isb	sy

0800021e <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800021e:	e7fe      	b.n	800021e <__tx_wait_here>

08000220 <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000220:	481c      	ldr	r0, [pc, #112]	; (8000294 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000222:	4a1d      	ldr	r2, [pc, #116]	; (8000298 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  // Build NULL value
 8000224:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000228:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 800022a:	b169      	cbz	r1, 8000248 <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 800022c:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800022e:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 8000232:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000236:	4c19      	ldr	r4, [pc, #100]	; (800029c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 8000238:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 800023c:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 800023e:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000242:	b10d      	cbz	r5, 8000248 <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 8000244:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 8000246:	6023      	str	r3, [r4, #0]

08000248 <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000248:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 800024a:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 800024c:	b189      	cbz	r1, 8000272 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 800024e:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000250:	b662      	cpsie	i

08000252 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000252:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 8000254:	4c11      	ldr	r4, [pc, #68]	; (800029c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 8000256:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 8000258:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 800025c:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 800025e:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000260:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000264:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000268:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800026c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000270:	4770      	bx	lr

08000272 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000272:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000274:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000276:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000278:	b909      	cbnz	r1, 800027e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800027a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800027c:	e7f9      	b.n	8000272 <__tx_ts_wait>

0800027e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800027e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000282:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000286:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800028a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800028c:	e7e1      	b.n	8000252 <__tx_ts_restore>
 800028e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000290:	20001044 	.word	0x20001044
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000294:	20000fac 	.word	0x20000fac
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000298:	20000fb0 	.word	0x20000fb0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800029c:	200015b0 	.word	0x200015b0

080002a0 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80002a0:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80002a2:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80002a6:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 80002aa:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 80002ae:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80002b0:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80002b4:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80002b6:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80002b8:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80002ba:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80002bc:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80002be:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80002c0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80002c2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80002c4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80002c6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80002c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80002cc:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80002ce:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80002d2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80002d4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80002d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80002da:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80002dc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80002de:	4770      	bx	lr

080002e0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80002e0:	4922      	ldr	r1, [pc, #136]	; (800036c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80002e2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80002e4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80002e8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80002ec:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80002ee:	b13a      	cbz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80002f0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80002f4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80002f6:	b91a      	cbnz	r2, 8000300 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80002fa:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80002fe:	6018      	str	r0, [r3, #0]

08000300 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000300:	491d      	ldr	r1, [pc, #116]	; (8000378 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000302:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000304:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000306:	b122      	cbz	r2, 8000312 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800030a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800030e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000310:	e008      	b.n	8000324 <__tx_timer_done>

08000312 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000312:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000316:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000318:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800031a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800031c:	d101      	bne.n	8000322 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000320:	6818      	ldr	r0, [r3, #0]

08000322 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000322:	6008      	str	r0, [r1, #0]

08000324 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000324:	4b13      	ldr	r3, [pc, #76]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000326:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000328:	b912      	cbnz	r2, 8000330 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800032a:	4914      	ldr	r1, [pc, #80]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800032c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800032e:	b1d0      	cbz	r0, 8000366 <__tx_timer_nothing_expired>

08000330 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000330:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000334:	4911      	ldr	r1, [pc, #68]	; (800037c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000336:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000338:	b108      	cbz	r0, 800033e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800033a:	f005 f8eb 	bl	8005514 <_tx_timer_expiration_process>

0800033e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000340:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000342:	b172      	cbz	r2, 8000362 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000344:	f005 f85a 	bl	80053fc <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800034a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800034c:	b949      	cbnz	r1, 8000362 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800034e:	480f      	ldr	r0, [pc, #60]	; (800038c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000350:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000352:	4a0f      	ldr	r2, [pc, #60]	; (8000390 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000354:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000356:	480f      	ldr	r0, [pc, #60]	; (8000394 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800035c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800035e:	d000      	beq.n	8000362 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000360:	6002      	str	r2, [r0, #0]

08000362 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000362:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000366 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000366:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800036a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800036c:	20001050 	.word	0x20001050
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000370:	200015b0 	.word	0x200015b0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000374:	20001054 	.word	0x20001054
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000378:	200010e0 	.word	0x200010e0
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800037c:	200010e4 	.word	0x200010e4
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000380:	200010dc 	.word	0x200010dc
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000384:	200010d8 	.word	0x200010d8
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000388:	20001044 	.word	0x20001044
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	20000fac 	.word	0x20000fac
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000390:	20000fb0 	.word	0x20000fb0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000394:	e000ed04 	.word	0xe000ed04

08000398 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af02      	add	r7, sp, #8
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80003a4:	2334      	movs	r3, #52	; 0x34
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <tx_application_define+0x40>)
 80003ae:	490b      	ldr	r1, [pc, #44]	; (80003dc <tx_application_define+0x44>)
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <tx_application_define+0x48>)
 80003b2:	f005 fae1 	bl	8005978 <_txe_byte_pool_create>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d109      	bne.n	80003d0 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80003bc:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <tx_application_define+0x48>)
 80003be:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80003c0:	68b8      	ldr	r0, [r7, #8]
 80003c2:	f000 f80f 	bl	80003e4 <App_ThreadX_Init>
 80003c6:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d000      	beq.n	80003d0 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80003ce:	e7fe      	b.n	80003ce <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000002c 	.word	0x2000002c
 80003dc:	08005f50 	.word	0x08005f50
 80003e0:	2000042c 	.word	0x2000042c

080003e4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af08      	add	r7, sp, #32
 80003ea:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */
	/* Allocate the stack for thread 0.  */

	/* Create the main thread.  */
	tx_thread_create(&thread_0, 			// Thread Pointer: This is a pointer to the TX_THREAD structure that represents the thread being created. This structure holds information about the thread, such as its stack, entry function, priority, and state.
 80003f0:	23b0      	movs	r3, #176	; 0xb0
 80003f2:	9306      	str	r3, [sp, #24]
 80003f4:	2300      	movs	r3, #0
 80003f6:	9305      	str	r3, [sp, #20]
 80003f8:	2300      	movs	r3, #0
 80003fa:	9304      	str	r3, [sp, #16]
 80003fc:	2301      	movs	r3, #1
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	2301      	movs	r3, #1
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <App_ThreadX_Init+0x78>)
 800040c:	9300      	str	r3, [sp, #0]
 800040e:	2300      	movs	r3, #0
 8000410:	4a13      	ldr	r2, [pc, #76]	; (8000460 <App_ThreadX_Init+0x7c>)
 8000412:	4914      	ldr	r1, [pc, #80]	; (8000464 <App_ThreadX_Init+0x80>)
 8000414:	4814      	ldr	r0, [pc, #80]	; (8000468 <App_ThreadX_Init+0x84>)
 8000416:	f005 fc45 	bl	8005ca4 <_txe_thread_create>
					1, 						// Priority: The priority of the thread, which determines its scheduling order relative to other threads in the system. Higher-priority threads are scheduled before lower-priority threads.
					1, 						// Preemption Threshold: This parameter is used to set the preemption threshold for the thread. It determines the minimum priority level at which the thread can be preempted by other threads. Setting it to TX_NO_PREEMPTION allows the thread to run without being preempted.
					TX_NO_TIME_SLICE,		// Time Slice: The time slice is the maximum amount of time (in ticks) that the thread can run before it is preempted if there are other ready threads of equal priority.
					TX_DONT_START);			// Auto Start: Specifies whether the thread should start automatically after creation (TX_AUTO_START) or if it should be manually started later.

	tx_thread_create(&thread_1, 			// Thread Pointer: This is a pointer to the TX_THREAD structure that represents the thread being created. This structure holds information about the thread, such as its stack, entry function, priority, and state.
 800041a:	23b0      	movs	r3, #176	; 0xb0
 800041c:	9306      	str	r3, [sp, #24]
 800041e:	2300      	movs	r3, #0
 8000420:	9305      	str	r3, [sp, #20]
 8000422:	2300      	movs	r3, #0
 8000424:	9304      	str	r3, [sp, #16]
 8000426:	2301      	movs	r3, #1
 8000428:	9303      	str	r3, [sp, #12]
 800042a:	2301      	movs	r3, #1
 800042c:	9302      	str	r3, [sp, #8]
 800042e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <App_ThreadX_Init+0x88>)
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2300      	movs	r3, #0
 800043a:	4a0d      	ldr	r2, [pc, #52]	; (8000470 <App_ThreadX_Init+0x8c>)
 800043c:	490d      	ldr	r1, [pc, #52]	; (8000474 <App_ThreadX_Init+0x90>)
 800043e:	480e      	ldr	r0, [pc, #56]	; (8000478 <App_ThreadX_Init+0x94>)
 8000440:	f005 fc30 	bl	8005ca4 <_txe_thread_create>
					1, 						// Priority: The priority of the thread, which determines its scheduling order relative to other threads in the system. Higher-priority threads are scheduled before lower-priority threads.
					1, 						// Preemption Threshold: This parameter is used to set the preemption threshold for the thread. It determines the minimum priority level at which the thread can be preempted by other threads. Setting it to TX_NO_PREEMPTION allows the thread to run without being preempted.
					TX_NO_TIME_SLICE,		// Time Slice: The time slice is the maximum amount of time (in ticks) that the thread can run before it is preempted if there are other ready threads of equal priority.
					TX_DONT_START);

    tx_thread_resume(&thread_0);
 8000444:	4808      	ldr	r0, [pc, #32]	; (8000468 <App_ThreadX_Init+0x84>)
 8000446:	f005 fd1f 	bl	8005e88 <_txe_thread_resume>
    tx_thread_resume(&thread_1);
 800044a:	480b      	ldr	r0, [pc, #44]	; (8000478 <App_ThreadX_Init+0x94>)
 800044c:	f005 fd1c 	bl	8005e88 <_txe_thread_resume>

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000450:	68fb      	ldr	r3, [r7, #12]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000460 	.word	0x20000460
 8000460:	08000489 	.word	0x08000489
 8000464:	08005f64 	.word	0x08005f64
 8000468:	20000c60 	.word	0x20000c60
 800046c:	20000860 	.word	0x20000860
 8000470:	080004e9 	.word	0x080004e9
 8000474:	08005f70 	.word	0x08005f70
 8000478:	20000d10 	.word	0x20000d10

0800047c <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000480:	f004 f93a 	bl	80046f8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <thread_new_state_update>:

/* USER CODE BEGIN 1 */
/* Azure RTOS thread entry function */
static void thread_new_state_update(ULONG thread_input)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
    /* Your thread code here */
	uint8_t key = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	73fb      	strb	r3, [r7, #15]

    // Create semaphore
    tx_semaphore_create(&external_gpio_semaphore, "gpio interrupt", 0);
 8000494:	231c      	movs	r3, #28
 8000496:	2200      	movs	r2, #0
 8000498:	490f      	ldr	r1, [pc, #60]	; (80004d8 <thread_new_state_update+0x50>)
 800049a:	4810      	ldr	r0, [pc, #64]	; (80004dc <thread_new_state_update+0x54>)
 800049c:	f005 fb0c 	bl	8005ab8 <_txe_semaphore_create>

    tx_semaphore_create(&periodic_read_semaphore, "periodic read", 0);
 80004a0:	231c      	movs	r3, #28
 80004a2:	2200      	movs	r2, #0
 80004a4:	490e      	ldr	r1, [pc, #56]	; (80004e0 <thread_new_state_update+0x58>)
 80004a6:	480f      	ldr	r0, [pc, #60]	; (80004e4 <thread_new_state_update+0x5c>)
 80004a8:	f005 fb06 	bl	8005ab8 <_txe_semaphore_create>

    while (1)
    {
        // Wait for semaphore
    	if (tx_semaphore_get(&external_gpio_semaphore, TX_NO_WAIT) == TX_SUCCESS)
 80004ac:	2100      	movs	r1, #0
 80004ae:	480b      	ldr	r0, [pc, #44]	; (80004dc <thread_new_state_update+0x54>)
 80004b0:	f005 fb98 	bl	8005be4 <_txe_semaphore_get>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d109      	bne.n	80004ce <thread_new_state_update+0x46>
    	{
    		key = main_key_status_read();
 80004ba:	f000 f93d 	bl	8000738 <main_key_status_read>
 80004be:	4603      	mov	r3, r0
 80004c0:	73fb      	strb	r3, [r7, #15]

    		if(key)
 80004c2:	7bfb      	ldrb	r3, [r7, #15]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <thread_new_state_update+0x46>
    		{
//    			tx_mutex_get(&periodic_read_mutex, TX_NO_WAIT);

    			tx_semaphore_put(&periodic_read_semaphore);
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <thread_new_state_update+0x5c>)
 80004ca:	f005 fbcd 	bl	8005c68 <_txe_semaphore_put>
        /* Thread actions */
//    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
//
//    	key = main_key_status_read();
//
        tx_thread_sleep(10); // Example: Sleep for 100 ticks
 80004ce:	200a      	movs	r0, #10
 80004d0:	f004 fcc4 	bl	8004e5c <_tx_thread_sleep>
    	if (tx_semaphore_get(&external_gpio_semaphore, TX_NO_WAIT) == TX_SUCCESS)
 80004d4:	e7ea      	b.n	80004ac <thread_new_state_update+0x24>
 80004d6:	bf00      	nop
 80004d8:	08005f7c 	.word	0x08005f7c
 80004dc:	20000dc0 	.word	0x20000dc0
 80004e0:	08005f8c 	.word	0x08005f8c
 80004e4:	20000ddc 	.word	0x20000ddc

080004e8 <thread_periodic_read>:
    }
}

static void thread_periodic_read(ULONG thread_input)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	/* Your thread code here */
	uint8_t key = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	73fb      	strb	r3, [r7, #15]


	while (1)
	{

		key = main_key_status_read();
 80004f4:	f000 f920 	bl	8000738 <main_key_status_read>
 80004f8:	4603      	mov	r3, r0
 80004fa:	73fb      	strb	r3, [r7, #15]

		if(tx_semaphore_get(&periodic_read_semaphore, TX_WAIT_FOREVER) == TX_SUCCESS)
 80004fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <thread_periodic_read+0x40>)
 8000502:	f005 fb6f 	bl	8005be4 <_txe_semaphore_get>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d109      	bne.n	8000520 <thread_periodic_read+0x38>
		{
			key = main_key_status_read();
 800050c:	f000 f914 	bl	8000738 <main_key_status_read>
 8000510:	4603      	mov	r3, r0
 8000512:	73fb      	strb	r3, [r7, #15]
//							1);
//
//			main_i2c_receive(0x1B << 1,
//							&key,
//							1);
			if(key)
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <thread_periodic_read+0x38>
			{
				tx_semaphore_put(&periodic_read_semaphore);
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <thread_periodic_read+0x40>)
 800051c:	f005 fba4 	bl	8005c68 <_txe_semaphore_put>
		/* Thread actions */
//    	HAL_GPIO_TogglePin(LED_PIN_GPIO_Port, LED_PIN_Pin);
//
//    	key = main_key_status_read();
//
        tx_thread_sleep(5); // Example: Sleep for 100 ticks
 8000520:	2005      	movs	r0, #5
 8000522:	f004 fc9b 	bl	8004e5c <_tx_thread_sleep>
		key = main_key_status_read();
 8000526:	e7e5      	b.n	80004f4 <thread_periodic_read+0xc>
 8000528:	20000ddc 	.word	0x20000ddc

0800052c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800053a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4313      	orrs	r3, r2
 8000542:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000548:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000550:	68fb      	ldr	r3, [r7, #12]
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fc76 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f816 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f8a6 	bl	80006b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800056c:	f000 f864 	bl	8000638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  at42qt1070_init(main_i2c_transmit,
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <main+0x28>)
 8000572:	4a05      	ldr	r2, [pc, #20]	; (8000588 <main+0x2c>)
 8000574:	4905      	ldr	r1, [pc, #20]	; (800058c <main+0x30>)
 8000576:	4806      	ldr	r0, [pc, #24]	; (8000590 <main+0x34>)
 8000578:	f000 fa9e 	bl	8000ab8 <at42qt1070_init>
		  	  	  main_i2c_receive,
				  main_change_pin_read,
				  HAL_GetTick);
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800057c:	f7ff ff7e 	bl	800047c <MX_ThreadX_Init>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x24>
 8000582:	bf00      	nop
 8000584:	08000eb5 	.word	0x08000eb5
 8000588:	080007c1 	.word	0x080007c1
 800058c:	08000791 	.word	0x08000791
 8000590:	08000761 	.word	0x08000761

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b09a      	sub	sp, #104	; 0x68
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2248      	movs	r2, #72	; 0x48
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 fc8e 	bl	8005ec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <SystemClock_Config+0xa0>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <SystemClock_Config+0xa0>)
 80005c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <SystemClock_Config+0xa0>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d6:	2320      	movs	r3, #32
 80005d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005da:	2301      	movs	r3, #1
 80005dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005de:	2300      	movs	r3, #0
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005e2:	23b0      	movs	r3, #176	; 0xb0
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fcd0 	bl	8002f94 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80005fa:	f000 f909 	bl	8000810 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005fe:	234f      	movs	r3, #79	; 0x4f
 8000600:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2102      	movs	r1, #2
 800061c:	4618      	mov	r0, r3
 800061e:	f003 f83b 	bl	8003698 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000628:	f000 f8f2 	bl	8000810 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3768      	adds	r7, #104	; 0x68
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	58000400 	.word	0x58000400

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_I2C1_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_I2C1_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303EFD;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_I2C1_Init+0x74>)
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x7c>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_I2C1_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_I2C1_Init+0x74>)
 8000674:	f000 ff22 	bl	80014bc <HAL_I2C_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067e:	f000 f8c7 	bl	8000810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <MX_I2C1_Init+0x74>)
 8000686:	f002 f950 	bl	800292a <HAL_I2CEx_ConfigAnalogFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000690:	f000 f8be 	bl	8000810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2C1_Init+0x74>)
 8000698:	f002 f991 	bl	80029be <HAL_I2CEx_ConfigDigitalFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f8b5 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000df8 	.word	0x20000df8
 80006b0:	40005400 	.word	0x40005400
 80006b4:	20303efd 	.word	0x20303efd

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff2d 	bl	800052c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2002      	movs	r0, #2
 80006d4:	f7ff ff2a 	bl	800052c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2101      	movs	r1, #1
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f000 feb3 	bl	800144a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80006e4:	2301      	movs	r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f000 fd2e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000706:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800070a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <MX_GPIO_Init+0x7c>)
 8000716:	f000 fd21 	bl	800115c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2029      	movs	r0, #41	; 0x29
 8000720:	f000 fc87 	bl	8001032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000724:	2029      	movs	r0, #41	; 0x29
 8000726:	f000 fc9e 	bl	8001066 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072a:	bf00      	nop
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	48000400 	.word	0x48000400

08000738 <main_key_status_read>:

/* USER CODE BEGIN 4 */
uint8_t main_key_status_read(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	uint8_t key_status = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]

	if(at42qt1070_callback())
 8000742:	f000 fa15 	bl	8000b70 <at42qt1070_callback>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d003      	beq.n	8000754 <main_key_status_read+0x1c>
	{
		key_status = at42qt1070_key_stete_get();
 800074c:	f000 fa3a 	bl	8000bc4 <at42qt1070_key_stete_get>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
//
//	HAL_I2C_Master_Transmit(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status_address, 1, 1000);
//
//	HAL_I2C_Master_Receive(&hi2c1, AT42QT1070_SLAVE_ADDRESS, &key_status, 1, 1000);

	return key_status;
 8000754:	79fb      	ldrb	r3, [r7, #7]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <main_i2c_transmit>:


HAL_StatusTypeDef main_i2c_transmit(uint16_t slave_address, uint8_t *data_buffer, uint16_t size)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af02      	add	r7, sp, #8
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Transmit(&hi2c1, slave_address, data_buffer, size, 1000);
 8000770:	88bb      	ldrh	r3, [r7, #4]
 8000772:	88f9      	ldrh	r1, [r7, #6]
 8000774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <main_i2c_transmit+0x2c>)
 800077e:	f000 ff2d 	bl	80015dc <HAL_I2C_Master_Transmit>
 8000782:	4603      	mov	r3, r0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000df8 	.word	0x20000df8

08000790 <main_i2c_receive>:

HAL_StatusTypeDef main_i2c_receive(uint16_t slave_address, uint8_t *data_buffer, uint16_t size)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af02      	add	r7, sp, #8
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4613      	mov	r3, r2
 800079e:	80bb      	strh	r3, [r7, #4]
	return HAL_I2C_Master_Receive(&hi2c1, slave_address, data_buffer, size, 1000);
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	88f9      	ldrh	r1, [r7, #6]
 80007a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <main_i2c_receive+0x2c>)
 80007ae:	f001 f809 	bl	80017c4 <HAL_I2C_Master_Receive>
 80007b2:	4603      	mov	r3, r0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000df8 	.word	0x20000df8

080007c0 <main_change_pin_read>:

GPIO_PinState main_change_pin_read(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <main_change_pin_read+0x14>)
 80007ca:	f000 fe27 	bl	800141c <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	48000400 	.word	0x48000400

080007d8 <main_interrupt_callback>:

void main_interrupt_callback(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	tx_semaphore_put(&external_gpio_semaphore);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <main_interrupt_callback+0x10>)
 80007de:	f005 fa43 	bl	8005c68 <_txe_semaphore_put>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000dc0 	.word	0x20000dc0

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80007fe:	f000 fb47 	bl	8000e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40014800 	.word	0x40014800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>

0800081a <LL_AHB2_GRP1_EnableClock>:
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4313      	orrs	r3, r2
 8000860:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4013      	ands	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800086e:	68fb      	ldr	r3, [r7, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
	...

08000888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b096      	sub	sp, #88	; 0x58
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2238      	movs	r2, #56	; 0x38
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 fb0b 	bl	8005ec4 <memset>
  if(hi2c->Instance==I2C1)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a1f      	ldr	r2, [pc, #124]	; (8000930 <HAL_I2C_MspInit+0xa8>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d137      	bne.n	8000928 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008b8:	2340      	movs	r3, #64	; 0x40
 80008ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008bc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80008c0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	4618      	mov	r0, r3
 80008c8:	f003 fab4 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008d2:	f7ff ff9d 	bl	8000810 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ff9f 	bl	800081a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ee:	2304      	movs	r3, #4
 80008f0:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fc2e 	bl	800115c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000900:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000904:	f7ff ffa1 	bl	800084a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	201e      	movs	r0, #30
 800090e:	f000 fb90 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000912:	201e      	movs	r0, #30
 8000914:	f000 fba7 	bl	8001066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	201f      	movs	r0, #31
 800091e:	f000 fb88 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000922:	201f      	movs	r0, #31
 8000924:	f000 fb9f 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3758      	adds	r7, #88	; 0x58
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40005400 	.word	0x40005400

08000934 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800093c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000940:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800094c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000950:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000958:	68fb      	ldr	r3, [r7, #12]
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08c      	sub	sp, #48	; 0x30
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800097a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800097e:	f7ff ffd9 	bl	8000934 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000982:	f107 0208 	add.w	r2, r7, #8
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f86d 	bl	8003a6c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000992:	f003 f859 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8000996:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_InitTick+0xbc>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	0c9b      	lsrs	r3, r3, #18
 80009a2:	3b01      	subs	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_InitTick+0xc0>)
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_InitTick+0xc4>)
 80009aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <HAL_InitTick+0xc0>)
 80009ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009b2:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80009b4:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <HAL_InitTick+0xc0>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <HAL_InitTick+0xc0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_InitTick+0xc0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 80009c6:	4817      	ldr	r0, [pc, #92]	; (8000a24 <HAL_InitTick+0xc0>)
 80009c8:	f003 fb4e 	bl	8004068 <HAL_TIM_Base_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d11b      	bne.n	8000a12 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80009da:	4812      	ldr	r0, [pc, #72]	; (8000a24 <HAL_InitTick+0xc0>)
 80009dc:	f003 fba4 	bl	8004128 <HAL_TIM_Base_Start_IT>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d111      	bne.n	8000a12 <HAL_InitTick+0xae>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80009ee:	201d      	movs	r0, #29
 80009f0:	f000 fb39 	bl	8001066 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d808      	bhi.n	8000a0c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80009fa:	2200      	movs	r2, #0
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	201d      	movs	r0, #29
 8000a00:	f000 fb17 	bl	8001032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <HAL_InitTick+0xc8>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e002      	b.n	8000a12 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3730      	adds	r7, #48	; 0x30
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20000e4c 	.word	0x20000e4c
 8000a28:	40014800 	.word	0x40014800
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 Global Interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <TIM17_IRQHandler+0x10>)
 8000a62:	f003 fbad 	bl	80041c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000e4c 	.word	0x20000e4c

08000a70 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <I2C1_EV_IRQHandler+0x10>)
 8000a76:	f000 ff9b 	bl	80019b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000df8 	.word	0x20000df8

08000a84 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error Interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <I2C1_ER_IRQHandler+0x10>)
 8000a8a:	f000 ffab 	bl	80019e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000df8 	.word	0x20000df8

08000a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000aa0:	f000 fcea 	bl	8001478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  main_interrupt_callback();
 8000aa4:	f7ff fe98 	bl	80007d8 <main_interrupt_callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <at42qt1070_init>:

/* PRIVATE FUNCTIONS DECLARATION ---------------------------------------------*/
static at42qt1070_event_e at42qt1070_key_event_type_handler(bool current_change_pin_state);
/* FUNCTION PROTOTYPES -------------------------------------------------------*/
void at42qt1070_init(uint8_t* send_function, uint8_t* receive_fucntion, uint8_t* change_state_read, uint32_t* get_tick)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
	at42qt1070_handler.i2c_send 		= send_function;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <at42qt1070_init+0x3c>)
 8000aca:	6013      	str	r3, [r2, #0]

	at42qt1070_handler.i2c_receive	 	= receive_fucntion;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <at42qt1070_init+0x3c>)
 8000ad0:	6053      	str	r3, [r2, #4]

	at42qt1070_handler.change_pin_read	= change_state_read;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <at42qt1070_init+0x3c>)
 8000ad6:	6093      	str	r3, [r2, #8]

	at42qt1070_handler.get_tick			= get_tick;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	4a06      	ldr	r2, [pc, #24]	; (8000af4 <at42qt1070_init+0x3c>)
 8000adc:	6113      	str	r3, [r2, #16]

	at42qt1070_handler.state.all 		= 0;
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <at42qt1070_init+0x3c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	761a      	strb	r2, [r3, #24]

	at42qt1070_handler.register_address = &register_set;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <at42qt1070_init+0x3c>)
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <at42qt1070_init+0x40>)
 8000ae8:	615a      	str	r2, [r3, #20]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000e98 	.word	0x20000e98
 8000af8:	0800606c 	.word	0x0800606c

08000afc <at42qt1070_key_stete_read>:
{
	return at42qt1070_handler.state.flag.unread_event;
}

bool at42qt1070_key_stete_read(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	if(at42qt1070_handler.i2c_send != NULL)
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d029      	beq.n	8000b5c <at42qt1070_key_stete_read+0x60>
	{
		at42qt1070_handler.i2c_send(AT42QT1070_SLAVE_ADDRESS,
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
									&at42qt1070_handler.register_address->at42qt1070_keystatus,
 8000b0c:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b0e:	6952      	ldr	r2, [r2, #20]
 8000b10:	1cd1      	adds	r1, r2, #3
		at42qt1070_handler.i2c_send(AT42QT1070_SLAVE_ADDRESS,
 8000b12:	2201      	movs	r2, #1
 8000b14:	2036      	movs	r0, #54	; 0x36
 8000b16:	4798      	blx	r3
									AT42QT1070_REGISTER_WEDTH);

		at42qt1070_handler.i2c_receive(AT42QT1070_SLAVE_ADDRESS,
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	4912      	ldr	r1, [pc, #72]	; (8000b68 <at42qt1070_key_stete_read+0x6c>)
 8000b20:	2036      	movs	r0, #54	; 0x36
 8000b22:	4798      	blx	r3
										&at42qt1070_handler.key_buffer,
										AT42QT1070_REGISTER_WEDTH);

		if(at42qt1070_handler.key_buffer)
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b26:	7b1b      	ldrb	r3, [r3, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d009      	beq.n	8000b40 <at42qt1070_key_stete_read+0x44>
		{
			circ_buffer_enqueue(&at42qt1070_handler.circ_buffer,
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	490e      	ldr	r1, [pc, #56]	; (8000b68 <at42qt1070_key_stete_read+0x6c>)
 8000b30:	480e      	ldr	r0, [pc, #56]	; (8000b6c <at42qt1070_key_stete_read+0x70>)
 8000b32:	f000 f8b9 	bl	8000ca8 <circ_buffer_enqueue>
								&at42qt1070_handler.key_buffer,
								AT42QT1070_REGISTER_WEDTH);

			at42qt1070_handler.state.flag.unread_event  = true;
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b38:	7e13      	ldrb	r3, [r2, #24]
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	7613      	strb	r3, [r2, #24]
		}



		//Clear the buffer content
		at42qt1070_handler.key_buffer = 0;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]

		return at42qt1070_handler.state.flag.unread_event;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <at42qt1070_key_stete_read+0x68>)
 8000b48:	7e1b      	ldrb	r3, [r3, #24]
 8000b4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	e000      	b.n	8000b5e <at42qt1070_key_stete_read+0x62>
	}
	return 0;
 8000b5c:	2300      	movs	r3, #0

}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000e98 	.word	0x20000e98
 8000b68:	20000ea4 	.word	0x20000ea4
 8000b6c:	20000eb2 	.word	0x20000eb2

08000b70 <at42qt1070_callback>:

bool at42qt1070_callback(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	if(at42qt1070_handler.change_pin_read != NULL)
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <at42qt1070_callback+0x50>)
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d01a      	beq.n	8000bb4 <at42qt1070_callback+0x44>
	{
		bool new_event = false;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]

		at42qt1070_change_pin_e pin_state = at42qt1070_handler.change_pin_read();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <at42qt1070_callback+0x50>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	4798      	blx	r3
 8000b88:	4603      	mov	r3, r0
 8000b8a:	71bb      	strb	r3, [r7, #6]

		at42qt1070_event_e event_type = at42qt1070_key_event_type_handler(pin_state);
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f833 	bl	8000c04 <at42qt1070_key_event_type_handler>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	717b      	strb	r3, [r7, #5]

		if(!pin_state)
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d103      	bne.n	8000bb0 <at42qt1070_callback+0x40>
		{
			new_event = at42qt1070_key_stete_read();
 8000ba8:	f7ff ffa8 	bl	8000afc <at42qt1070_key_stete_read>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
		}

		return new_event;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	e000      	b.n	8000bb6 <at42qt1070_callback+0x46>
	}
	return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000e98 	.word	0x20000e98

08000bc4 <at42qt1070_key_stete_get>:


uint8_t at42qt1070_key_stete_get(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

	uint8_t* key_number  = circ_buffer_dequeue(&at42qt1070_handler.circ_buffer,
 8000bca:	2100      	movs	r1, #0
 8000bcc:	480b      	ldr	r0, [pc, #44]	; (8000bfc <at42qt1070_key_stete_get+0x38>)
 8000bce:	f000 f8b9 	bl	8000d44 <circ_buffer_dequeue>
 8000bd2:	6078      	str	r0, [r7, #4]
												NULL);
	//Update the unread event flag
	at42qt1070_handler.state.flag.unread_event = circ_buffer_getNumArrays(&at42qt1070_handler.circ_buffer) ? 1 : 0;
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <at42qt1070_key_stete_get+0x38>)
 8000bd6:	f000 f8ed 	bl	8000db4 <circ_buffer_getNumArrays>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2d9      	uxtb	r1, r3
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <at42qt1070_key_stete_get+0x3c>)
 8000be8:	7e13      	ldrb	r3, [r2, #24]
 8000bea:	f361 0341 	bfi	r3, r1, #1, #1
 8000bee:	7613      	strb	r3, [r2, #24]



	return *key_number;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000eb2 	.word	0x20000eb2
 8000c00:	20000e98 	.word	0x20000e98

08000c04 <at42qt1070_key_event_type_handler>:

static at42qt1070_event_e at42qt1070_key_event_type_handler(bool current_change_pin_state)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	static at42qt1070_event_e key_event_type = SENSOR_KEY_IDLE;

	static uint32_t long_pressed_timer = 0;

	if(SENSOR_CHANGE_PIN_LOW == current_change_pin_state &&
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f083 0301 	eor.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00d      	beq.n	8000c36 <at42qt1070_key_event_type_handler+0x32>
	   SENSOR_KEY_IDLE == key_event_type)
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
	if(SENSOR_CHANGE_PIN_LOW == current_change_pin_state &&
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <at42qt1070_key_event_type_handler+0x32>
	{
		key_event_type = SENSOR_KEY_PRESSED;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
		//Update timer for SENSOR_KEY_LONG_PRESSED event detection.
		long_pressed_timer = at42qt1070_handler.get_tick();
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <at42qt1070_key_event_type_handler+0x9c>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4798      	blx	r3
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a1c      	ldr	r2, [pc, #112]	; (8000ca4 <at42qt1070_key_event_type_handler+0xa0>)
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	e02b      	b.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>

	}
	else if(SENSOR_CHANGE_PIN_HIGH == current_change_pin_state &&
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <at42qt1070_key_event_type_handler+0x48>
			SENSOR_KEY_PRESSED == key_event_type)
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
	else if(SENSOR_CHANGE_PIN_HIGH == current_change_pin_state &&
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d103      	bne.n	8000c4c <at42qt1070_key_event_type_handler+0x48>
	{
		key_event_type = SENSOR_KEY_RELEASE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e020      	b.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>
	}
	else if(SENSOR_CHANGE_PIN_HIGH == current_change_pin_state &&
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d007      	beq.n	8000c62 <at42qt1070_key_event_type_handler+0x5e>
			SENSOR_KEY_RELEASE == key_event_type)
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
	else if(SENSOR_CHANGE_PIN_HIGH == current_change_pin_state &&
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d103      	bne.n	8000c62 <at42qt1070_key_event_type_handler+0x5e>
	{
		key_event_type = SENSOR_KEY_IDLE;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e015      	b.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>
	}
	else if(SENSOR_CHANGE_PIN_LOW == current_change_pin_state &&
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	f083 0301 	eor.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00f      	beq.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>
			SENSOR_KEY_PRESSED == key_event_type)
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
	else if(SENSOR_CHANGE_PIN_LOW == current_change_pin_state &&
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d10b      	bne.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>
	{
		//check the spent time since SENSOR_KEY_PRESSED event is first detected.
		if(at42qt1070_handler.get_tick() - long_pressed_timer > AT42QT1070_LONG_PRESSED_PERIOD)
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <at42qt1070_key_event_type_handler+0x9c>)
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	4798      	blx	r3
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <at42qt1070_key_event_type_handler+0xa0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2bc8      	cmp	r3, #200	; 0xc8
 8000c86:	d902      	bls.n	8000c8e <at42qt1070_key_event_type_handler+0x8a>
		{
			key_event_type = SENSOR_KEY_LONG_PRESSED;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	701a      	strb	r2, [r3, #0]
		}

	}
	return key_event_type;
 8000c8e:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <at42qt1070_key_event_type_handler+0x98>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000f68 	.word	0x20000f68
 8000ca0:	20000e98 	.word	0x20000e98
 8000ca4:	20000f6c 	.word	0x20000f6c

08000ca8 <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000cbc:	1c5a      	adds	r2, r3, #1
 8000cbe:	4b20      	ldr	r3, [pc, #128]	; (8000d40 <circ_buffer_enqueue+0x98>)
 8000cc0:	fb83 1302 	smull	r1, r3, r3, r2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	1119      	asrs	r1, r3, #4
 8000cc8:	17d3      	asrs	r3, r2, #31
 8000cca:	1ac9      	subs	r1, r1, r3
 8000ccc:	460b      	mov	r3, r1
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	1ad1      	subs	r1, r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d02b      	beq.n	8000d38 <circ_buffer_enqueue+0x90>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 f910 	bl	8005f1c <memcpy>
	cb->elementSizes[cb->end] = size;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000d02:	461a      	mov	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4413      	add	r3, r2
 8000d08:	79fa      	ldrb	r2, [r7, #7]
 8000d0a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8000d14:	1c5a      	adds	r2, r3, #1
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <circ_buffer_enqueue+0x98>)
 8000d18:	fb83 1302 	smull	r1, r3, r3, r2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	1119      	asrs	r1, r3, #4
 8000d20:	17d3      	asrs	r3, r2, #31
 8000d22:	1ac9      	subs	r1, r1, r3
 8000d24:	460b      	mov	r3, r1
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	1ad1      	subs	r1, r2, r3
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8000d36:	e000      	b.n	8000d3a <circ_buffer_enqueue+0x92>
		return;
 8000d38:	bf00      	nop
}
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	88888889 	.word	0x88888889

08000d44 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000d54:	461a      	mov	r2, r3
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	4413      	add	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
	if (size)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d009      	beq.n	8000d7c <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000d6e:	461a      	mov	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4413      	add	r3, r2
 8000d74:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <circ_buffer_dequeue+0x6c>)
 8000d86:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	1119      	asrs	r1, r3, #4
 8000d8e:	17d3      	asrs	r3, r2, #31
 8000d90:	1ac9      	subs	r1, r1, r3
 8000d92:	460b      	mov	r3, r1
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	1a5b      	subs	r3, r3, r1
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	return element;
 8000da4:	68fb      	ldr	r3, [r7, #12]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	88888889 	.word	0x88888889

08000db4 <circ_buffer_getNumArrays>:
 * @param 	cb		:	 Pointer to the circular buffer
 *
 * @return 	Size 	:	of the next block of data to read, or 0 if the buffer is empty
 */
uint8_t circ_buffer_getNumArrays(circ_buffer_t *cb)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	if (cb->end >= cb->start)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d308      	bcc.n	8000dde <circ_buffer_getNumArrays+0x2a>
	{
		return cb->end - cb->start;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	e009      	b.n	8000df2 <circ_buffer_getNumArrays+0x3e>
	}
	return BUFFER_SIZE - cb->start + cb->end;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 2097 	ldrb.w	r2, [r3, #151]	; 0x97
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	331e      	adds	r3, #30
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f7ff fe54 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e2a:	f005 f853 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff fb95 	bl	800055c <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
  ldr   r0, =_estack
 8000e34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e40:	08006084 	.word	0x08006084
  ldr r2, =_sbss
 8000e44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e48:	200015b4 	.word	0x200015b4

08000e4c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f8de 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e60:	f002 fdde 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <HAL_Init+0x3c>)
 8000e68:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f7ff fd7a 	bl	8000964 <HAL_InitTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d002      	beq.n	8000e7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	e001      	b.n	8000e80 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7c:	f7ff fcfd 	bl	800087a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000000 	.word	0x20000000

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000f70 	.word	0x20000f70

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000f70 	.word	0x20000f70

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4906      	ldr	r1, [pc, #24]	; (8000f60 <__NVIC_EnableIRQ+0x34>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff4f 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff66 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ffb4 	bl	8000fb8 <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff83 	bl	8000f64 <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff59 	bl	8000f2c <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d005      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e047      	b.n	8001136 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 020e 	bic.w	r2, r2, #14
 80010b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0201 	bic.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	f003 021c 	and.w	r2, r3, #28
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	2101      	movs	r1, #1
 80010e4:	fa01 f202 	lsl.w	r2, r1, r2
 80010e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00c      	beq.n	8001116 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800110a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001114:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	4798      	blx	r3
    }
  }
  return status;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800114e:	b2db      	uxtb	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
	...

0800115c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e140      	b.n	80013ee <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8132 	beq.w	80013e8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d005      	beq.n	800119c <HAL_GPIO_Init+0x40>
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d130      	bne.n	80011fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	2203      	movs	r2, #3
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011d2:	2201      	movs	r2, #1
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f003 0201 	and.w	r2, r3, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b03      	cmp	r3, #3
 8001208:	d017      	beq.n	800123a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d123      	bne.n	800128e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f003 0307 	and.w	r3, r3, #7
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	6939      	ldr	r1, [r7, #16]
 800128a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	2203      	movs	r2, #3
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0203 	and.w	r2, r3, #3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 808c 	beq.w	80013e8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012d0:	4a4e      	ldr	r2, [pc, #312]	; (800140c <HAL_GPIO_Init+0x2b0>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	2207      	movs	r2, #7
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012fa:	d00d      	beq.n	8001318 <HAL_GPIO_Init+0x1bc>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <HAL_GPIO_Init+0x2b4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d007      	beq.n	8001314 <HAL_GPIO_Init+0x1b8>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a43      	ldr	r2, [pc, #268]	; (8001414 <HAL_GPIO_Init+0x2b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d101      	bne.n	8001310 <HAL_GPIO_Init+0x1b4>
 800130c:	2302      	movs	r3, #2
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1be>
 8001310:	2307      	movs	r3, #7
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1be>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1be>
 8001318:	2300      	movs	r3, #0
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132a:	4938      	ldr	r1, [pc, #224]	; (800140c <HAL_GPIO_Init+0x2b0>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135c:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001392:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80013b2:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 80013bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013c0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_GPIO_Init+0x2bc>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f47f aeb7 	bne.w	800116c <HAL_GPIO_Init+0x10>
  }
}
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40010000 	.word	0x40010000
 8001410:	48000400 	.word	0x48000400
 8001414:	48000800 	.word	0x48000800
 8001418:	58000800 	.word	0x58000800

0800141c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e001      	b.n	800143e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001466:	e002      	b.n	800146e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f806 	bl	80014a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	58000800 	.word	0x58000800

080014a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e081      	b.n	80015d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff f9d0 	bl	8000888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800150c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d107      	bne.n	8001536 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e006      	b.n	8001544 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001542:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d104      	bne.n	8001556 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001554:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	6812      	ldr	r2, [r2, #0]
 8001560:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001568:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001578:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691a      	ldr	r2, [r3, #16]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69d9      	ldr	r1, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1a      	ldr	r2, [r3, #32]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	461a      	mov	r2, r3
 80015e8:	460b      	mov	r3, r1
 80015ea:	817b      	strh	r3, [r7, #10]
 80015ec:	4613      	mov	r3, r2
 80015ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	f040 80da 	bne.w	80017b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001604:	2b01      	cmp	r3, #1
 8001606:	d101      	bne.n	800160c <HAL_I2C_Master_Transmit+0x30>
 8001608:	2302      	movs	r3, #2
 800160a:	e0d3      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001614:	f7ff fc4e 	bl	8000eb4 <HAL_GetTick>
 8001618:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2319      	movs	r3, #25
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fedc 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0be      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2221      	movs	r2, #33	; 0x21
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2210      	movs	r2, #16
 8001642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	893a      	ldrh	r2, [r7, #8]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001662:	b29b      	uxth	r3, r3
 8001664:	2bff      	cmp	r3, #255	; 0xff
 8001666:	d90e      	bls.n	8001686 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	22ff      	movs	r2, #255	; 0xff
 800166c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001672:	b2da      	uxtb	r2, r3
 8001674:	8979      	ldrh	r1, [r7, #10]
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <HAL_I2C_Master_Transmit+0x1e0>)
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f001 f8c6 	bl	8002810 <I2C_TransferConfig>
 8001684:	e06c      	b.n	8001760 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	b2da      	uxtb	r2, r3
 8001696:	8979      	ldrh	r1, [r7, #10]
 8001698:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_I2C_Master_Transmit+0x1e0>)
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f001 f8b5 	bl	8002810 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80016a6:	e05b      	b.n	8001760 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	6a39      	ldr	r1, [r7, #32]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 fed9 	bl	8002464 <I2C_WaitOnTXISFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e07b      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d034      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x184>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d130      	bne.n	8001760 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fe6b 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e04d      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171c:	b29b      	uxth	r3, r3
 800171e:	2bff      	cmp	r3, #255	; 0xff
 8001720:	d90e      	bls.n	8001740 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172c:	b2da      	uxtb	r2, r3
 800172e:	8979      	ldrh	r1, [r7, #10]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f001 f869 	bl	8002810 <I2C_TransferConfig>
 800173e:	e00f      	b.n	8001760 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29a      	uxth	r2, r3
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	b2da      	uxtb	r2, r3
 8001750:	8979      	ldrh	r1, [r7, #10]
 8001752:	2300      	movs	r3, #0
 8001754:	9300      	str	r3, [sp, #0]
 8001756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f001 f858 	bl	8002810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d19e      	bne.n	80016a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6a39      	ldr	r1, [r7, #32]
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 feb8 	bl	80024e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e01a      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2220      	movs	r2, #32
 8001784:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6859      	ldr	r1, [r3, #4]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001792:	400b      	ands	r3, r1
 8001794:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017b2:	2302      	movs	r3, #2
  }
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	80002000 	.word	0x80002000
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	817b      	strh	r3, [r7, #10]
 80017d4:	4613      	mov	r3, r2
 80017d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b20      	cmp	r3, #32
 80017e2:	f040 80db 	bne.w	800199c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_I2C_Master_Receive+0x30>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e0d4      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fc:	f7ff fb5a 	bl	8000eb4 <HAL_GetTick>
 8001800:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2319      	movs	r3, #25
 8001808:	2201      	movs	r2, #1
 800180a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fde8 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e0bf      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2222      	movs	r2, #34	; 0x22
 8001822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2210      	movs	r2, #16
 800182a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184a:	b29b      	uxth	r3, r3
 800184c:	2bff      	cmp	r3, #255	; 0xff
 800184e:	d90e      	bls.n	800186e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	22ff      	movs	r2, #255	; 0xff
 8001854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	b2da      	uxtb	r2, r3
 800185c:	8979      	ldrh	r1, [r7, #10]
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 ffd2 	bl	8002810 <I2C_TransferConfig>
 800186c:	e06d      	b.n	800194a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29a      	uxth	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187c:	b2da      	uxtb	r2, r3
 800187e:	8979      	ldrh	r1, [r7, #10]
 8001880:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 ffc1 	bl	8002810 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800188e:	e05c      	b.n	800194a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fe61 	bl	800255c <I2C_WaitOnRXNEFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e07c      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018da:	b29b      	uxth	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d034      	beq.n	800194a <HAL_I2C_Master_Receive+0x186>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d130      	bne.n	800194a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2200      	movs	r2, #0
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 fd76 	bl	80023e4 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e04d      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	2bff      	cmp	r3, #255	; 0xff
 800190a:	d90e      	bls.n	800192a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	b2da      	uxtb	r2, r3
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 ff74 	bl	8002810 <I2C_TransferConfig>
 8001928:	e00f      	b.n	800194a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 ff63 	bl	8002810 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d19d      	bne.n	8001890 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	6a39      	ldr	r1, [r7, #32]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fdc3 	bl	80024e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e01a      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2220      	movs	r2, #32
 800196e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6859      	ldr	r1, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_I2C_Master_Receive+0x1e8>)
 800197c:	400b      	ands	r3, r1
 800197e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	80002400 	.word	0x80002400
 80019ac:	fe00e800 	.word	0xfe00e800

080019b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	68ba      	ldr	r2, [r7, #8]
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	4798      	blx	r3
  }
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00f      	beq.n	8001a26 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00a      	beq.n	8001a26 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a14:	f043 0201 	orr.w	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a24:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00f      	beq.n	8001a50 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00a      	beq.n	8001a50 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f043 0208 	orr.w	r2, r3, #8
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00f      	beq.n	8001a7a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0202 	orr.w	r2, r3, #2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 030b 	and.w	r3, r3, #11
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001a8a:	68f9      	ldr	r1, [r7, #12]
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fb71 	bl	8002174 <I2C_ITError>
  }
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	4613      	mov	r3, r2
 8001acc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <I2C_Slave_ISR_IT+0x24>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0e1      	b.n	8001cf6 <I2C_Slave_ISR_IT+0x1e8>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b4e:	6939      	ldr	r1, [r7, #16]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f9b5 	bl	8001ec0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d04b      	beq.n	8001bf8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d046      	beq.n	8001bf8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d128      	bne.n	8001bc6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b28      	cmp	r3, #40	; 0x28
 8001b7e:	d108      	bne.n	8001b92 <I2C_Slave_ISR_IT+0x84>
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b86:	d104      	bne.n	8001b92 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f000 fa9e 	bl	80020cc <I2C_ITListenCplt>
 8001b90:	e031      	b.n	8001bf6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b29      	cmp	r3, #41	; 0x29
 8001b9c:	d10e      	bne.n	8001bbc <I2C_Slave_ISR_IT+0xae>
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ba4:	d00a      	beq.n	8001bbc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2210      	movs	r2, #16
 8001bac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fbd7 	bl	8002362 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f926 	bl	8001e06 <I2C_ITSlaveSeqCplt>
 8001bba:	e01c      	b.n	8001bf6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001bc4:	e08f      	b.n	8001ce6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2210      	movs	r2, #16
 8001bcc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f043 0204 	orr.w	r2, r3, #4
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <I2C_Slave_ISR_IT+0xda>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be6:	d17e      	bne.n	8001ce6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bec:	4619      	mov	r1, r3
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 fac0 	bl	8002174 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001bf4:	e077      	b.n	8001ce6 <I2C_Slave_ISR_IT+0x1d8>
 8001bf6:	e076      	b.n	8001ce6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d02f      	beq.n	8001c62 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02a      	beq.n	8001c62 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d018      	beq.n	8001c48 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	1c5a      	adds	r2, r3, #1
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	3b01      	subs	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d14b      	bne.n	8001cea <I2C_Slave_ISR_IT+0x1dc>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c58:	d047      	beq.n	8001cea <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f8d3 	bl	8001e06 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c60:	e043      	b.n	8001cea <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c76:	6939      	ldr	r1, [r7, #16]
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f840 	bl	8001cfe <I2C_ITAddrCplt>
 8001c7e:	e035      	b.n	8001cec <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d030      	beq.n	8001cec <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d02b      	beq.n	8001cec <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d018      	beq.n	8001cd0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
 8001cce:	e00d      	b.n	8001cec <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd6:	d002      	beq.n	8001cde <I2C_Slave_ISR_IT+0x1d0>
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 f891 	bl	8001e06 <I2C_ITSlaveSeqCplt>
 8001ce4:	e002      	b.n	8001cec <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001ce6:	bf00      	nop
 8001ce8:	e000      	b.n	8001cec <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001cea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001d14:	2b28      	cmp	r3, #40	; 0x28
 8001d16:	d16a      	bne.n	8001dee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	0c1b      	lsrs	r3, r3, #16
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	0c1b      	lsrs	r3, r3, #16
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001d36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001d52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d138      	bne.n	8001dce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	09db      	lsrs	r3, r3, #7
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	89bb      	ldrh	r3, [r7, #12]
 8001d64:	4053      	eors	r3, r2
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f003 0306 	and.w	r3, r3, #6
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d11c      	bne.n	8001daa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001d70:	897b      	ldrh	r3, [r7, #10]
 8001d72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d13b      	bne.n	8001dfe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2208      	movs	r2, #8
 8001d92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d9c:	89ba      	ldrh	r2, [r7, #12]
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fe8b 	bl	8001abe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001da8:	e029      	b.n	8001dfe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 fd5c 	bl	8002870 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001dc0:	89ba      	ldrh	r2, [r7, #12]
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fe79 	bl	8001abe <HAL_I2C_AddrCallback>
}
 8001dcc:	e017      	b.n	8001dfe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fd4c 	bl	8002870 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001de0:	89ba      	ldrh	r2, [r7, #12]
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fe69 	bl	8001abe <HAL_I2C_AddrCallback>
}
 8001dec:	e007      	b.n	8001dfe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2208      	movs	r2, #8
 8001df4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d008      	beq.n	8001e3a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e00c      	b.n	8001e54 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e52:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b29      	cmp	r3, #41	; 0x29
 8001e5e:	d112      	bne.n	8001e86 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2228      	movs	r2, #40	; 0x28
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2221      	movs	r2, #33	; 0x21
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fcfd 	bl	8002870 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe0b 	bl	8001a9a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e84:	e017      	b.n	8001eb6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8001e90:	d111      	bne.n	8001eb6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2228      	movs	r2, #40	; 0x28
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2222      	movs	r2, #34	; 0x22
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fce4 	bl	8002870 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fdfb 	bl	8001aac <HAL_I2C_SlaveRxCpltCallback>
}
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001edc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b21      	cmp	r3, #33	; 0x21
 8001eea:	d002      	beq.n	8001ef2 <I2C_ITSlaveCplt+0x32>
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b29      	cmp	r3, #41	; 0x29
 8001ef0:	d108      	bne.n	8001f04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001ef2:	f248 0101 	movw	r1, #32769	; 0x8001
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fcba 	bl	8002870 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	631a      	str	r2, [r3, #48]	; 0x30
 8001f02:	e00d      	b.n	8001f20 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b22      	cmp	r3, #34	; 0x22
 8001f08:	d002      	beq.n	8001f10 <I2C_ITSlaveCplt+0x50>
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f0e:	d107      	bne.n	8001f20 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f10:	f248 0102 	movw	r1, #32770	; 0x8002
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 fcab 	bl	8002870 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2222      	movs	r2, #34	; 0x22
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6859      	ldr	r1, [r3, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	4b62      	ldr	r3, [pc, #392]	; (80020c4 <I2C_ITSlaveCplt+0x204>)
 8001f3c:	400b      	ands	r3, r1
 8001f3e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fa0e 	bl	8002362 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f5e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01f      	beq.n	8001fa8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f76:	e017      	b.n	8001fa8 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f90:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d020      	beq.n	8001ff4 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f023 0304 	bic.w	r3, r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f043 0204 	orr.w	r2, r3, #4
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	2b00      	cmp	r3, #0
 800201e:	d010      	beq.n	8002042 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	4619      	mov	r1, r3
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 f8a4 	bl	8002174 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b28      	cmp	r3, #40	; 0x28
 8002036:	d141      	bne.n	80020bc <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002038:	6979      	ldr	r1, [r7, #20]
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f846 	bl	80020cc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002040:	e03c      	b.n	80020bc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800204a:	d014      	beq.n	8002076 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff feda 	bl	8001e06 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <I2C_ITSlaveCplt+0x208>)
 8002056:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fd32 	bl	8001ad8 <HAL_I2C_ListenCpltCallback>
}
 8002074:	e022      	b.n	80020bc <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b22      	cmp	r3, #34	; 0x22
 8002080:	d10e      	bne.n	80020a0 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fd07 	bl	8001aac <HAL_I2C_SlaveRxCpltCallback>
}
 800209e:	e00d      	b.n	80020bc <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fcef 	bl	8001a9a <HAL_I2C_SlaveTxCpltCallback>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	fe00e800 	.word	0xfe00e800
 80020c8:	ffff0000 	.word	0xffff0000

080020cc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a25      	ldr	r2, [pc, #148]	; (8002170 <I2C_ITListenCplt+0xa4>)
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d022      	beq.n	8002148 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0204 	orr.w	r2, r3, #4
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002148:	f248 0103 	movw	r1, #32771	; 0x8003
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fb8f 	bl	8002870 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2210      	movs	r2, #16
 8002158:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fcb8 	bl	8001ad8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	ffff0000 	.word	0xffff0000

08002174 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <I2C_ITError+0x194>)
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	2b28      	cmp	r3, #40	; 0x28
 80021aa:	d005      	beq.n	80021b8 <I2C_ITError+0x44>
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b29      	cmp	r3, #41	; 0x29
 80021b0:	d002      	beq.n	80021b8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b2a      	cmp	r3, #42	; 0x2a
 80021b6:	d10b      	bne.n	80021d0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021b8:	2103      	movs	r1, #3
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fb58 	bl	8002870 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2228      	movs	r2, #40	; 0x28
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a50      	ldr	r2, [pc, #320]	; (800230c <I2C_ITError+0x198>)
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
 80021ce:	e011      	b.n	80021f4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fb4b 	bl	8002870 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b60      	cmp	r3, #96	; 0x60
 80021e4:	d003      	beq.n	80021ee <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d039      	beq.n	8002276 <I2C_ITError+0x102>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2b11      	cmp	r3, #17
 8002206:	d002      	beq.n	800220e <I2C_ITError+0x9a>
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b21      	cmp	r3, #33	; 0x21
 800220c:	d133      	bne.n	8002276 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800221c:	d107      	bne.n	800222e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800222c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff84 	bl	8001140 <HAL_DMA_GetState>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d017      	beq.n	800226e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a33      	ldr	r2, [pc, #204]	; (8002310 <I2C_ITError+0x19c>)
 8002244:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe ff15 	bl	8001082 <HAL_DMA_Abort_IT>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d04d      	beq.n	80022fa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002268:	4610      	mov	r0, r2
 800226a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800226c:	e045      	b.n	80022fa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f850 	bl	8002314 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002274:	e041      	b.n	80022fa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d039      	beq.n	80022f2 <I2C_ITError+0x17e>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2b12      	cmp	r3, #18
 8002282:	d002      	beq.n	800228a <I2C_ITError+0x116>
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b22      	cmp	r3, #34	; 0x22
 8002288:	d133      	bne.n	80022f2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002298:	d107      	bne.n	80022aa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022a8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe ff46 	bl	8001140 <HAL_DMA_GetState>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d017      	beq.n	80022ea <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	4a14      	ldr	r2, [pc, #80]	; (8002310 <I2C_ITError+0x19c>)
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fed7 	bl	8001082 <HAL_DMA_Abort_IT>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d011      	beq.n	80022fe <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022e4:	4610      	mov	r0, r2
 80022e6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022e8:	e009      	b.n	80022fe <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f812 	bl	8002314 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022f0:	e005      	b.n	80022fe <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f80e 	bl	8002314 <I2C_TreatErrorCallback>
  }
}
 80022f8:	e002      	b.n	8002300 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022fa:	bf00      	nop
 80022fc:	e000      	b.n	8002300 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80022fe:	bf00      	nop
}
 8002300:	bf00      	nop
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffff0000 	.word	0xffff0000
 800230c:	08001b0f 	.word	0x08001b0f
 8002310:	080023a9 	.word	0x080023a9

08002314 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b60      	cmp	r3, #96	; 0x60
 8002326:	d10e      	bne.n	8002346 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fbdc 	bl	8001afc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002344:	e009      	b.n	800235a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fbc8 	bl	8001aea <HAL_I2C_ErrorCallback>
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b02      	cmp	r3, #2
 8002376:	d103      	bne.n	8002380 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2200      	movs	r2, #0
 800237e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b01      	cmp	r3, #1
 800238c:	d007      	beq.n	800239e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0201 	orr.w	r2, r2, #1
 800239c:	619a      	str	r2, [r3, #24]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	2200      	movs	r2, #0
 80023c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	2200      	movs	r2, #0
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f7ff ff9c 	bl	8002314 <I2C_TreatErrorCallback>
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f4:	e022      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fc:	d01e      	beq.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023fe:	f7fe fd59 	bl	8000eb4 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d302      	bcc.n	8002414 <I2C_WaitOnFlagUntilTimeout+0x30>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d113      	bne.n	800243c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f043 0220 	orr.w	r2, r3, #32
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e00f      	b.n	800245c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	429a      	cmp	r2, r3
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	429a      	cmp	r2, r3
 8002458:	d0cd      	beq.n	80023f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002470:	e02c      	b.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8ea 	bl	8002650 <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e02a      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d01e      	beq.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7fe fd11 	bl	8000eb4 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d113      	bne.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e007      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d1cb      	bne.n	8002472 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f0:	e028      	b.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f8aa 	bl	8002650 <I2C_IsErrorOccurred>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e026      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002506:	f7fe fcd5 	bl	8000eb4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d113      	bne.n	8002544 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e007      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b20      	cmp	r3, #32
 8002550:	d1cf      	bne.n	80024f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002568:	e064      	b.n	8002634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	68b9      	ldr	r1, [r7, #8]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f86e 	bl	8002650 <I2C_IsErrorOccurred>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e062      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	2b20      	cmp	r3, #32
 800258a:	d138      	bne.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d105      	bne.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e04e      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d107      	bne.n	80025c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2204      	movs	r2, #4
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
 80025c2:	e002      	b.n	80025ca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2220      	movs	r2, #32
 80025d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80025de:	400b      	ands	r3, r1
 80025e0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e022      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7fe fc59 	bl	8000eb4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e007      	b.n	8002644 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b04      	cmp	r3, #4
 8002640:	d193      	bne.n	800256a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	fe00e800 	.word	0xfe00e800

08002650 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d068      	beq.n	800274e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2210      	movs	r2, #16
 8002682:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002684:	e049      	b.n	800271a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d045      	beq.n	800271a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fc11 	bl	8000eb4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_IsErrorOccurred+0x54>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d13a      	bne.n	800271a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c6:	d121      	bne.n	800270c <I2C_IsErrorOccurred+0xbc>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ce:	d01d      	beq.n	800270c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d01a      	beq.n	800270c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026e6:	f7fe fbe5 	bl	8000eb4 <HAL_GetTick>
 80026ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026ec:	e00e      	b.n	800270c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026ee:	f7fe fbe1 	bl	8000eb4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b19      	cmp	r3, #25
 80026fa:	d907      	bls.n	800270c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f043 0320 	orr.w	r3, r3, #32
 8002702:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800270a:	e006      	b.n	800271a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d1e9      	bne.n	80026ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b20      	cmp	r3, #32
 8002726:	d003      	beq.n	8002730 <I2C_IsErrorOccurred+0xe0>
 8002728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0aa      	beq.n	8002686 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002740:	6a3b      	ldr	r3, [r7, #32]
 8002742:	f043 0304 	orr.w	r3, r3, #4
 8002746:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002770:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	f043 0308 	orr.w	r3, r3, #8
 8002788:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002792:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80027bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01c      	beq.n	80027fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff fdcc 	bl	8002362 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <I2C_IsErrorOccurred+0x1bc>)
 80027d6:	400b      	ands	r3, r1
 80027d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	431a      	orrs	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002802:	4618      	mov	r0, r3
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	fe00e800 	.word	0xfe00e800

08002810 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	817b      	strh	r3, [r7, #10]
 800281e:	4613      	mov	r3, r2
 8002820:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002828:	7a7b      	ldrb	r3, [r7, #9]
 800282a:	041b      	lsls	r3, r3, #16
 800282c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002830:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	4313      	orrs	r3, r2
 800283a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800283e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	0d5b      	lsrs	r3, r3, #21
 800284a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <I2C_TransferConfig+0x5c>)
 8002850:	430b      	orrs	r3, r1
 8002852:	43db      	mvns	r3, r3
 8002854:	ea02 0103 	and.w	r1, r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	430a      	orrs	r2, r1
 8002860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002862:	bf00      	nop
 8002864:	371c      	adds	r7, #28
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr
 800286c:	03ff63ff 	.word	0x03ff63ff

08002870 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002880:	887b      	ldrh	r3, [r7, #2]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00f      	beq.n	80028aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002890:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800289e:	2b28      	cmp	r3, #40	; 0x28
 80028a0:	d003      	beq.n	80028aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80028a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00f      	beq.n	80028d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80028ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028c8:	2b28      	cmp	r3, #40	; 0x28
 80028ca:	d003      	beq.n	80028d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80028d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80028d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	da03      	bge.n	80028e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80028e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028e4:	887b      	ldrh	r3, [r7, #2]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d103      	bne.n	80028f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80028f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d103      	bne.n	8002900 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f043 0320 	orr.w	r3, r3, #32
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002900:	887b      	ldrh	r3, [r7, #2]
 8002902:	2b40      	cmp	r3, #64	; 0x40
 8002904:	d103      	bne.n	800290e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43da      	mvns	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	400a      	ands	r2, r1
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d138      	bne.n	80029b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800294a:	2302      	movs	r3, #2
 800294c:	e032      	b.n	80029b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0201 	bic.w	r2, r2, #1
 800296c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800297c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6819      	ldr	r1, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029b2:	2302      	movs	r3, #2
  }
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d139      	bne.n	8002a48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029de:	2302      	movs	r3, #2
 80029e0:	e033      	b.n	8002a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2224      	movs	r2, #36	; 0x24
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a03      	ldr	r2, [pc, #12]	; (8002a6c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	58000400 	.word	0x58000400

08002a70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_PWREx_GetVoltageRange+0x14>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr
 8002a84:	58000400 	.word	0x58000400

08002a88 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a98:	d101      	bne.n	8002a9e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	58000400 	.word	0x58000400

08002aac <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002abe:	6013      	str	r3, [r2, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ada:	6013      	str	r3, [r2, #0]
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af6:	d101      	bne.n	8002afc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002b06:	b480      	push	{r7}
 8002b08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6013      	str	r3, [r2, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b34:	6013      	str	r3, [r2, #0]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b50:	d101      	bne.n	8002b56 <LL_RCC_HSE_IsReady+0x18>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <LL_RCC_HSE_IsReady+0x1a>
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b72:	6013      	str	r3, [r2, #0]
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d101      	bne.n	8002bb0 <LL_RCC_HSI_IsReady+0x18>
 8002bac:	2301      	movs	r3, #1
 8002bae:	e000      	b.n	8002bb2 <LL_RCC_HSI_IsReady+0x1a>
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	604b      	str	r3, [r1, #4]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d101      	bne.n	8002bfa <LL_RCC_LSE_IsReady+0x18>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <LL_RCC_LSE_IsReady+0x1a>
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d101      	bne.n	8002c5c <LL_RCC_LSI_IsReady+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_RCC_LSI_IsReady+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	6013      	str	r3, [r2, #0]
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d101      	bne.n	8002cb4 <LL_RCC_MSI_IsReady+0x16>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <LL_RCC_MSI_IsReady+0x18>
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d101      	bne.n	8002cd4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr

08002cde <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	021b      	lsls	r3, r3, #8
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002da6:	f023 020f 	bic.w	r2, r3, #15
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	608b      	str	r3, [r1, #8]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e9e:	d101      	bne.n	8002ea4 <LL_RCC_PLL_IsReady+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_RCC_PLL_IsReady+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0303 	and.w	r3, r3, #3
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr

08002f08 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1a:	d101      	bne.n	8002f20 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3e:	d101      	bne.n	8002f44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f60:	d101      	bne.n	8002f66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f82:	d101      	bne.n	8002f88 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bc80      	pop	{r7}
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e36f      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa6:	f7ff fed8 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8002faa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fac:	f7ff ffa1 	bl	8002ef2 <LL_RCC_PLL_GetMainSource>
 8002fb0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80c4 	beq.w	8003148 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3e>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	2b0c      	cmp	r3, #12
 8002fca:	d176      	bne.n	80030ba <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d173      	bne.n	80030ba <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e353      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_OscConfig+0x68>
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffa:	e006      	b.n	800300a <HAL_RCC_OscConfig+0x76>
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003000:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800300a:	4293      	cmp	r3, r2
 800300c:	d222      	bcs.n	8003054 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fd68 	bl	8003ae8 <RCC_SetFlashLatencyFromMSIRange>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e331      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003044:	4313      	orrs	r3, r2
 8003046:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fe5d 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>
 8003052:	e021      	b.n	8003098 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800305e:	f043 0308 	orr.w	r3, r3, #8
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fe44 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	4618      	mov	r0, r3
 800308a:	f000 fd2d 	bl	8003ae8 <RCC_SetFlashLatencyFromMSIRange>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e2f6      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003098:	f000 fcc2 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 800309c:	4603      	mov	r3, r0
 800309e:	4aa7      	ldr	r2, [pc, #668]	; (800333c <HAL_RCC_OscConfig+0x3a8>)
 80030a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80030a2:	4ba7      	ldr	r3, [pc, #668]	; (8003340 <HAL_RCC_OscConfig+0x3ac>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fc5c 	bl	8000964 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d047      	beq.n	8003146 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	e2e5      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d02c      	beq.n	800311c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030c2:	f7ff fdd0 	bl	8002c66 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c6:	f7fd fef5 	bl	8000eb4 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ce:	f7fd fef1 	bl	8000eb4 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e2d2      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80030e0:	f7ff fddd 	bl	8002c9e <LL_RCC_MSI_IsReady>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f1      	beq.n	80030ce <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fdf9 	bl	8002d0c <LL_RCC_MSI_SetCalibTrimming>
 800311a:	e015      	b.n	8003148 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800311c:	f7ff fdb1 	bl	8002c82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003120:	f7fd fec8 	bl	8000eb4 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003128:	f7fd fec4 	bl	8000eb4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e2a5      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800313a:	f7ff fdb0 	bl	8002c9e <LL_RCC_MSI_IsReady>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f1      	bne.n	8003128 <HAL_RCC_OscConfig+0x194>
 8003144:	e000      	b.n	8003148 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003146:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d058      	beq.n	8003206 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b08      	cmp	r3, #8
 8003158:	d005      	beq.n	8003166 <HAL_RCC_OscConfig+0x1d2>
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2b0c      	cmp	r3, #12
 800315e:	d108      	bne.n	8003172 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d105      	bne.n	8003172 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d14b      	bne.n	8003206 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e289      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003184:	4313      	orrs	r3, r2
 8003186:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d102      	bne.n	8003198 <HAL_RCC_OscConfig+0x204>
 8003192:	f7ff fcb8 	bl	8002b06 <LL_RCC_HSE_Enable>
 8003196:	e00d      	b.n	80031b4 <HAL_RCC_OscConfig+0x220>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80031a0:	d104      	bne.n	80031ac <HAL_RCC_OscConfig+0x218>
 80031a2:	f7ff fc83 	bl	8002aac <LL_RCC_HSE_EnableTcxo>
 80031a6:	f7ff fcae 	bl	8002b06 <LL_RCC_HSE_Enable>
 80031aa:	e003      	b.n	80031b4 <HAL_RCC_OscConfig+0x220>
 80031ac:	f7ff fcb9 	bl	8002b22 <LL_RCC_HSE_Disable>
 80031b0:	f7ff fc8a 	bl	8002ac8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fd fe7a 	bl	8000eb4 <HAL_GetTick>
 80031c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fd fe76 	bl	8000eb4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e257      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80031d6:	f7ff fcb2 	bl	8002b3e <LL_RCC_HSE_IsReady>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f1      	beq.n	80031c4 <HAL_RCC_OscConfig+0x230>
 80031e0:	e011      	b.n	8003206 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e2:	f7fd fe67 	bl	8000eb4 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ea:	f7fd fe63 	bl	8000eb4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e244      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80031fc:	f7ff fc9f 	bl	8002b3e <LL_RCC_HSE_IsReady>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f1      	bne.n	80031ea <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d046      	beq.n	80032a0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d005      	beq.n	8003224 <HAL_RCC_OscConfig+0x290>
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d10e      	bne.n	800323c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e22a      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fcc0 	bl	8002bba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800323a:	e031      	b.n	80032a0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d019      	beq.n	8003278 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003244:	f7ff fc8c 	bl	8002b60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd fe34 	bl	8000eb4 <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003250:	f7fd fe30 	bl	8000eb4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e211      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003262:	f7ff fc99 	bl	8002b98 <LL_RCC_HSI_IsReady>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0f1      	beq.n	8003250 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fca2 	bl	8002bba <LL_RCC_HSI_SetCalibTrimming>
 8003276:	e013      	b.n	80032a0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003278:	f7ff fc80 	bl	8002b7c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327c:	f7fd fe1a 	bl	8000eb4 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003284:	f7fd fe16 	bl	8000eb4 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1f7      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003296:	f7ff fc7f 	bl	8002b98 <LL_RCC_HSI_IsReady>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f1      	bne.n	8003284 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d06e      	beq.n	800338a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d056      	beq.n	8003362 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032bc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d031      	beq.n	8003330 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e1d0      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d013      	beq.n	8003316 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80032ee:	f7ff fc99 	bl	8002c24 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032f2:	f7fd fddf 	bl	8000eb4 <HAL_GetTick>
 80032f6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fd fddb 	bl	8000eb4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b11      	cmp	r3, #17
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e1bc      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800330c:	f7ff fc9a 	bl	8002c44 <LL_RCC_LSI_IsReady>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f1      	bne.n	80032fa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331e:	f023 0210 	bic.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003330:	f7ff fc68 	bl	8002c04 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fd fdbe 	bl	8000eb4 <HAL_GetTick>
 8003338:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800333a:	e00c      	b.n	8003356 <HAL_RCC_OscConfig+0x3c2>
 800333c:	20000000 	.word	0x20000000
 8003340:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003344:	f7fd fdb6 	bl	8000eb4 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b11      	cmp	r3, #17
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e197      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003356:	f7ff fc75 	bl	8002c44 <LL_RCC_LSI_IsReady>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f1      	beq.n	8003344 <HAL_RCC_OscConfig+0x3b0>
 8003360:	e013      	b.n	800338a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003362:	f7ff fc5f 	bl	8002c24 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fd fda5 	bl	8000eb4 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336e:	f7fd fda1 	bl	8000eb4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b11      	cmp	r3, #17
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e182      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003380:	f7ff fc60 	bl	8002c44 <LL_RCC_LSI_IsReady>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f1      	bne.n	800336e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80d8 	beq.w	8003548 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003398:	f7ff fb76 	bl	8002a88 <LL_PWR_IsEnabledBkUpAccess>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033a2:	f7ff fb57 	bl	8002a54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a6:	f7fd fd85 	bl	8000eb4 <HAL_GetTick>
 80033aa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fd fd81 	bl	8000eb4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e162      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033c0:	f7ff fb62 	bl	8002a88 <LL_PWR_IsEnabledBkUpAccess>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f1      	beq.n	80033ae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d07b      	beq.n	80034ca <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b85      	cmp	r3, #133	; 0x85
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033ee:	f043 0304 	orr.w	r3, r3, #4
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fd5d 	bl	8000eb4 <HAL_GetTick>
 80033fa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80033fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7fd fd4f 	bl	8000eb4 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e12e      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003428:	f7ff fbdb 	bl	8002be2 <LL_RCC_LSE_IsReady>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ef      	beq.n	8003412 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b81      	cmp	r3, #129	; 0x81
 8003438:	d003      	beq.n	8003442 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	2b85      	cmp	r3, #133	; 0x85
 8003440:	d121      	bne.n	8003486 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fd fd37 	bl	8000eb4 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800345c:	e00a      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fd fd29 	bl	8000eb4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f241 3288 	movw	r2, #5000	; 0x1388
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e108      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ec      	beq.n	800345e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003484:	e060      	b.n	8003548 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fd fd15 	bl	8000eb4 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fd fd07 	bl	8000eb4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e0e6      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1ec      	bne.n	80034a2 <HAL_RCC_OscConfig+0x50e>
 80034c8:	e03e      	b.n	8003548 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ca:	f7fd fcf3 	bl	8000eb4 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fce5 	bl	8000eb4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0c4      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ec      	bne.n	80034e6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fd fcd2 	bl	8000eb4 <HAL_GetTick>
 8003510:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003526:	e00a      	b.n	800353e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003528:	f7fd fcc4 	bl	8000eb4 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f241 3288 	movw	r2, #5000	; 0x1388
 8003536:	4293      	cmp	r3, r2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0a3      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800353e:	f7ff fb50 	bl	8002be2 <LL_RCC_LSE_IsReady>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ef      	bne.n	8003528 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 8099 	beq.w	8003684 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d06c      	beq.n	8003632 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	2b02      	cmp	r3, #2
 800355e:	d14b      	bne.n	80035f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	f7ff fc86 	bl	8002e70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fca6 	bl	8000eb4 <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7fd fca2 	bl	8000eb4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b0a      	cmp	r3, #10
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e083      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800357e:	f7ff fc85 	bl	8002e8c <LL_RCC_PLL_IsReady>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1f1      	bne.n	800356c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	4b40      	ldr	r3, [pc, #256]	; (8003690 <HAL_RCC_OscConfig+0x6fc>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800359a:	4311      	orrs	r1, r2
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035a0:	0212      	lsls	r2, r2, #8
 80035a2:	4311      	orrs	r1, r2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035b4:	430a      	orrs	r2, r1
 80035b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035be:	f7ff fc49 	bl	8002e54 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fd fc6f 	bl	8000eb4 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fd fc6b 	bl	8000eb4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b0a      	cmp	r3, #10
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e04c      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80035ec:	f7ff fc4e 	bl	8002e8c <LL_RCC_PLL_IsReady>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0f1      	beq.n	80035da <HAL_RCC_OscConfig+0x646>
 80035f6:	e045      	b.n	8003684 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f8:	f7ff fc3a 	bl	8002e70 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fc5a 	bl	8000eb4 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003604:	f7fd fc56 	bl	8000eb4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b0a      	cmp	r3, #10
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e037      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003616:	f7ff fc39 	bl	8002e8c <LL_RCC_PLL_IsReady>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f1      	bne.n	8003604 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362a:	4b1a      	ldr	r3, [pc, #104]	; (8003694 <HAL_RCC_OscConfig+0x700>)
 800362c:	4013      	ands	r3, r2
 800362e:	60cb      	str	r3, [r1, #12]
 8003630:	e028      	b.n	8003684 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e023      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	429a      	cmp	r2, r3
 8003652:	d115      	bne.n	8003680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	429a      	cmp	r2, r3
 8003660:	d10e      	bne.n	8003680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	429a      	cmp	r2, r3
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3720      	adds	r7, #32
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	11c1808c 	.word	0x11c1808c
 8003694:	eefefffc 	.word	0xeefefffc

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e10f      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b89      	ldr	r3, [pc, #548]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d91b      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b86      	ldr	r3, [pc, #536]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 0207 	bic.w	r2, r3, #7
 80036c2:	4984      	ldr	r1, [pc, #528]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ca:	f7fd fbf3 	bl	8000eb4 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036d2:	f7fd fbef 	bl	8000eb4 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0f3      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e4:	4b7b      	ldr	r3, [pc, #492]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d1ef      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fb34 	bl	8002d70 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003708:	f7fd fbd4 	bl	8000eb4 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003710:	f7fd fbd0 	bl	8000eb4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0d4      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003722:	f7ff fbf1 	bl	8002f08 <LL_RCC_IsActiveFlag_HPRE>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0f1      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d016      	beq.n	8003766 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fb2a 	bl	8002d96 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003742:	f7fd fbb7 	bl	8000eb4 <HAL_GetTick>
 8003746:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800374a:	f7fd fbb3 	bl	8000eb4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e0b7      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800375c:	f7ff fbe5 	bl	8002f2a <LL_RCC_IsActiveFlag_SHDHPRE>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f1      	beq.n	800374a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff fb23 	bl	8002dc2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800377c:	f7fd fb9a 	bl	8000eb4 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003784:	f7fd fb96 	bl	8000eb4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e09a      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003796:	f7ff fbda 	bl	8002f4e <LL_RCC_IsActiveFlag_PPRE1>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f1      	beq.n	8003784 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d017      	beq.n	80037dc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fb18 	bl	8002de8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037b8:	f7fd fb7c 	bl	8000eb4 <HAL_GetTick>
 80037bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037c0:	f7fd fb78 	bl	8000eb4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e07c      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037d2:	f7ff fbcd 	bl	8002f70 <LL_RCC_IsActiveFlag_PPRE2>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f1      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d043      	beq.n	8003870 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d106      	bne.n	80037fe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80037f0:	f7ff f9a5 	bl	8002b3e <LL_RCC_HSE_IsReady>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d11e      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e066      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d106      	bne.n	8003814 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003806:	f7ff fb41 	bl	8002e8c <LL_RCC_PLL_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e05b      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800381c:	f7ff fa3f 	bl	8002c9e <LL_RCC_MSI_IsReady>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d108      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e050      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800382a:	f7ff f9b5 	bl	8002b98 <LL_RCC_HSI_IsReady>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e049      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff fa79 	bl	8002d34 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003842:	f7fd fb37 	bl	8000eb4 <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003848:	e00a      	b.n	8003860 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800384a:	f7fd fb33 	bl	8000eb4 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	; 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e035      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003860:	f7ff fa7b 	bl	8002d5a <LL_RCC_GetSysClkSource>
 8003864:	4602      	mov	r2, r0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	429a      	cmp	r2, r3
 800386e:	d1ec      	bne.n	800384a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003870:	4b18      	ldr	r3, [pc, #96]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d21b      	bcs.n	80038b6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	4913      	ldr	r1, [pc, #76]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	4313      	orrs	r3, r2
 800388c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800388e:	f7fd fb11 	bl	8000eb4 <HAL_GetTick>
 8003892:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003896:	f7fd fb0d 	bl	8000eb4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e011      	b.n	80038cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_RCC_ClockConfig+0x23c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038b6:	f000 f8b3 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 80038ba:	4603      	mov	r3, r0
 80038bc:	4a06      	ldr	r2, [pc, #24]	; (80038d8 <HAL_RCC_ClockConfig+0x240>)
 80038be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_ClockConfig+0x244>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fd f84d 	bl	8000964 <HAL_InitTick>
 80038ca:	4603      	mov	r3, r0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	58004000 	.word	0x58004000
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	f7ff fa34 	bl	8002d5a <LL_RCC_GetSysClkSource>
 80038f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	f7ff fafd 	bl	8002ef2 <LL_RCC_PLL_GetMainSource>
 80038f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x2c>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b0c      	cmp	r3, #12
 8003904:	d139      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d136      	bne.n	800397a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800390c:	f7ff f9d7 	bl	8002cbe <LL_RCC_MSI_IsEnabledRangeSelect>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d115      	bne.n	8003942 <HAL_RCC_GetSysClockFreq+0x62>
 8003916:	f7ff f9d2 	bl	8002cbe <LL_RCC_MSI_IsEnabledRangeSelect>
 800391a:	4603      	mov	r3, r0
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x4e>
 8003920:	f7ff f9dd 	bl	8002cde <LL_RCC_MSI_GetRange>
 8003924:	4603      	mov	r3, r0
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	e005      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x5a>
 800392e:	f7ff f9e1 	bl	8002cf4 <LL_RCC_MSI_GetRangeAfterStandby>
 8003932:	4603      	mov	r3, r0
 8003934:	0a1b      	lsrs	r3, r3, #8
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	4a36      	ldr	r2, [pc, #216]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x134>)
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	e014      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x8c>
 8003942:	f7ff f9bc 	bl	8002cbe <LL_RCC_MSI_IsEnabledRangeSelect>
 8003946:	4603      	mov	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d106      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x7a>
 800394c:	f7ff f9c7 	bl	8002cde <LL_RCC_MSI_GetRange>
 8003950:	4603      	mov	r3, r0
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	e005      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x86>
 800395a:	f7ff f9cb 	bl	8002cf4 <LL_RCC_MSI_GetRangeAfterStandby>
 800395e:	4603      	mov	r3, r0
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x134>)
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d115      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003978:	e012      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b04      	cmp	r3, #4
 800397e:	d102      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003980:	4b25      	ldr	r3, [pc, #148]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e00c      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d109      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800398c:	f7ff f8aa 	bl	8002ae4 <LL_RCC_HSE_IsEnabledDiv2>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d102      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x138>)
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e001      	b.n	80039a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x13c>)
 800399e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a0:	f7ff f9db 	bl	8002d5a <LL_RCC_GetSysClkSource>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	d12f      	bne.n	8003a0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80039aa:	f7ff faa2 	bl	8002ef2 <LL_RCC_PLL_GetMainSource>
 80039ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <HAL_RCC_GetSysClockFreq+0xde>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d003      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80039bc:	e00d      	b.n	80039da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80039be:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x138>)
 80039c0:	60fb      	str	r3, [r7, #12]
        break;
 80039c2:	e00d      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039c4:	f7ff f88e 	bl	8002ae4 <LL_RCC_HSE_IsEnabledDiv2>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x138>)
 80039d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80039d2:	e005      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_GetSysClockFreq+0x13c>)
 80039d6:	60fb      	str	r3, [r7, #12]
        break;
 80039d8:	e002      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	60fb      	str	r3, [r7, #12]
        break;
 80039de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80039e0:	f7ff fa65 	bl	8002eae <LL_RCC_PLL_GetN>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	fb03 f402 	mul.w	r4, r3, r2
 80039ec:	f7ff fa76 	bl	8002edc <LL_RCC_PLL_GetDivider>
 80039f0:	4603      	mov	r3, r0
 80039f2:	091b      	lsrs	r3, r3, #4
 80039f4:	3301      	adds	r3, #1
 80039f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80039fa:	f7ff fa64 	bl	8002ec6 <LL_RCC_PLL_GetR>
 80039fe:	4603      	mov	r3, r0
 8003a00:	0f5b      	lsrs	r3, r3, #29
 8003a02:	3301      	adds	r3, #1
 8003a04:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a0a:	697b      	ldr	r3, [r7, #20]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	0800602c 	.word	0x0800602c
 8003a18:	00f42400 	.word	0x00f42400
 8003a1c:	01e84800 	.word	0x01e84800

08003a20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a20:	b598      	push	{r3, r4, r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a24:	f7ff ff5c 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8003a28:	4604      	mov	r4, r0
 8003a2a:	f7ff f9f0 	bl	8002e0e <LL_RCC_GetAHBPrescaler>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	4a03      	ldr	r2, [pc, #12]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd98      	pop	{r3, r4, r7, pc}
 8003a44:	08005fcc 	.word	0x08005fcc

08003a48 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b598      	push	{r3, r4, r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003a4c:	f7ff ffe8 	bl	8003a20 <HAL_RCC_GetHCLKFreq>
 8003a50:	4604      	mov	r4, r0
 8003a52:	f7ff f9f4 	bl	8002e3e <LL_RCC_GetAPB2Prescaler>
 8003a56:	4603      	mov	r3, r0
 8003a58:	0adb      	lsrs	r3, r3, #11
 8003a5a:	4a03      	ldr	r2, [pc, #12]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd98      	pop	{r3, r4, r7, pc}
 8003a68:	0800600c 	.word	0x0800600c

08003a6c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02d      	beq.n	8003ad8 <HAL_RCC_GetClockConfig+0x6c>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d02a      	beq.n	8003ad8 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	224f      	movs	r2, #79	; 0x4f
 8003a86:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ac0:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_RCC_GetClockConfig+0x78>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0207 	and.w	r2, r3, #7
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	601a      	str	r2, [r3, #0]
  }
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	58004000 	.word	0x58004000

08003ae8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afe:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b00:	f7ff f990 	bl	8002e24 <LL_RCC_GetAHB3Prescaler>
 8003b04:	4603      	mov	r3, r0
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4a09      	ldr	r2, [pc, #36]	; (8003b44 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0c9c      	lsrs	r4, r3, #18
 8003b24:	f7fe ffa4 	bl	8002a70 <HAL_PWREx_GetVoltageRange>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f000 f80b 	bl	8003b48 <RCC_SetFlashLatency>
 8003b32:	4603      	mov	r3, r0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd90      	pop	{r4, r7, pc}
 8003b3c:	0800602c 	.word	0x0800602c
 8003b40:	08005fcc 	.word	0x08005fcc
 8003b44:	431bde83 	.word	0x431bde83

08003b48 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	; 0x38
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003b52:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <RCC_SetFlashLatency+0xf4>)
 8003b54:	f107 0320 	add.w	r3, r7, #32
 8003b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b5c:	6018      	str	r0, [r3, #0]
 8003b5e:	3304      	adds	r3, #4
 8003b60:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003b62:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <RCC_SetFlashLatency+0xf8>)
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b6c:	6018      	str	r0, [r3, #0]
 8003b6e:	3304      	adds	r3, #4
 8003b70:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003b72:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <RCC_SetFlashLatency+0xfc>)
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b88:	d11b      	bne.n	8003bc2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b8e:	e014      	b.n	8003bba <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	3338      	adds	r3, #56	; 0x38
 8003b96:	443b      	add	r3, r7
 8003b98:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d807      	bhi.n	8003bb4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3338      	adds	r3, #56	; 0x38
 8003baa:	443b      	add	r3, r7
 8003bac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bb2:	e021      	b.n	8003bf8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d9e7      	bls.n	8003b90 <RCC_SetFlashLatency+0x48>
 8003bc0:	e01a      	b.n	8003bf8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc6:	e014      	b.n	8003bf2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	3338      	adds	r3, #56	; 0x38
 8003bce:	443b      	add	r3, r7
 8003bd0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d807      	bhi.n	8003bec <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3338      	adds	r3, #56	; 0x38
 8003be2:	443b      	add	r3, r7
 8003be4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bea:	e005      	b.n	8003bf8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bee:	3301      	adds	r3, #1
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d9e7      	bls.n	8003bc8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <RCC_SetFlashLatency+0x100>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f023 0207 	bic.w	r2, r3, #7
 8003c00:	4911      	ldr	r1, [pc, #68]	; (8003c48 <RCC_SetFlashLatency+0x100>)
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	4313      	orrs	r3, r2
 8003c06:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c08:	f7fd f954 	bl	8000eb4 <HAL_GetTick>
 8003c0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c0e:	e008      	b.n	8003c22 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c10:	f7fd f950 	bl	8000eb4 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e007      	b.n	8003c32 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <RCC_SetFlashLatency+0x100>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d1ef      	bne.n	8003c10 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3738      	adds	r7, #56	; 0x38
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08005f9c 	.word	0x08005f9c
 8003c40:	08005fa4 	.word	0x08005fa4
 8003c44:	08005fac 	.word	0x08005fac
 8003c48:	58004000 	.word	0x58004000

08003c4c <LL_RCC_LSE_IsReady>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d101      	bne.n	8003c64 <LL_RCC_LSE_IsReady+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_RCC_LSE_IsReady+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bc80      	pop	{r7}
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_SetUSARTClockSource>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b083      	sub	sp, #12
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0c1b      	lsrs	r3, r3, #16
 8003c82:	43db      	mvns	r3, r3
 8003c84:	401a      	ands	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <LL_RCC_SetI2SClockSource>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cbe:	bf00      	nop
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <LL_RCC_SetLPUARTClockSource>:
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <LL_RCC_SetI2CClockSource>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	401a      	ands	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <LL_RCC_SetLPTIMClockSource>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	041b      	lsls	r3, r3, #16
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr

08003d5c <LL_RCC_SetRNGClockSource>:
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_SetADCClockSource>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <LL_RCC_SetRTCClockSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <LL_RCC_GetRTCClockSource>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_ForceBackupDomainReset>:
{
 8003df2:	b480      	push	{r7}
 8003df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e0a:	bf00      	nop
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr
	...

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003e40:	2300      	movs	r3, #0
 8003e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003e44:	2300      	movs	r3, #0
 8003e46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d058      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003e54:	f7fe fdfe 	bl	8002a54 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e58:	f7fd f82c 	bl	8000eb4 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003e5e:	e009      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fd f828 	bl	8000eb4 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d902      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	74fb      	strb	r3, [r7, #19]
        break;
 8003e72:	e006      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003e74:	4b7b      	ldr	r3, [pc, #492]	; (8004064 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d1ee      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003e82:	7cfb      	ldrb	r3, [r7, #19]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d13c      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003e88:	f7ff ffa7 	bl	8003dda <LL_RCC_GetRTCClockSource>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d00f      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ea4:	f7ff ffa5 	bl	8003df2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ea8:	f7ff ffb3 	bl	8003e12 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d014      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fc fff8 	bl	8000eb4 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fc fff4 	bl	8000eb4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d902      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	74fb      	strb	r3, [r7, #19]
            break;
 8003ede:	e004      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003ee0:	f7ff feb4 	bl	8003c4c <LL_RCC_LSE_IsReady>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff ff5b 	bl	8003db0 <LL_RCC_SetRTCClockSource>
 8003efa:	e004      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
 8003f00:	e001      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fea9 	bl	8003c6e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe9e 	bl	8003c6e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d004      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fec0 	bl	8003cc8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fee6 	bl	8003d2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d004      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fedb 	bl	8003d2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fed0 	bl	8003d2a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d004      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fea9 	bl	8003cf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d004      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fe9e 	bl	8003cf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d004      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff fe93 	bl	8003cf2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fe5e 	bl	8003c9e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fea:	d107      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fea5 	bl	8003d5c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	2b00      	cmp	r3, #0
 8004018:	d107      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004028:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d011      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fea3 	bl	8003d86 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004048:	d107      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004058:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800405a:	7cbb      	ldrb	r3, [r7, #18]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	58000400 	.word	0x58000400

08004068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e049      	b.n	800410e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f841 	bl	8004116 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 f9ce 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d001      	beq.n	8004140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e036      	b.n	80041ae <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f042 0201 	orr.w	r2, r2, #1
 8004156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <HAL_TIM_Base_Start_IT+0x90>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d004      	beq.n	800416c <HAL_TIM_Base_Start_IT+0x44>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d115      	bne.n	8004198 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	4b12      	ldr	r3, [pc, #72]	; (80041bc <HAL_TIM_Base_Start_IT+0x94>)
 8004174:	4013      	ands	r3, r2
 8004176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b06      	cmp	r3, #6
 800417c:	d015      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x82>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d011      	beq.n	80041aa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 0201 	orr.w	r2, r2, #1
 8004194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004196:	e008      	b.n	80041aa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e000      	b.n	80041ac <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	00010007 	.word	0x00010007

080041c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0202 	mvn.w	r2, #2
 80041ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f904 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f8f7 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f906 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b04      	cmp	r3, #4
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0204 	mvn.w	r2, #4
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2202      	movs	r2, #2
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f8da 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f8cd 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8dc 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b08      	cmp	r3, #8
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b08      	cmp	r3, #8
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0208 	mvn.w	r2, #8
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f8b0 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8a3 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f8b2 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b10      	cmp	r3, #16
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0210 	mvn.w	r2, #16
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2208      	movs	r2, #8
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f886 	bl	8004410 <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f879 	bl	80043fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f888 	bl	8004422 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b01      	cmp	r3, #1
 8004324:	d10e      	bne.n	8004344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b01      	cmp	r3, #1
 8004332:	d107      	bne.n	8004344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0201 	mvn.w	r2, #1
 800433c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7fc fa54 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b80      	cmp	r3, #128	; 0x80
 8004350:	d10e      	bne.n	8004370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d107      	bne.n	8004370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f8d7 	bl	800451e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800437e:	d10e      	bne.n	800439e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438a:	2b80      	cmp	r3, #128	; 0x80
 800438c:	d107      	bne.n	800439e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8c9 	bl	8004530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d10e      	bne.n	80043ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d107      	bne.n	80043ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f835 	bl	8004434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d10e      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d107      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f06f 0220 	mvn.w	r2, #32
 80043ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f88b 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
	...

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a29      	ldr	r2, [pc, #164]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_Base_SetConfig+0x20>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d108      	bne.n	800447a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a20      	ldr	r2, [pc, #128]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0x52>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1c      	ldr	r2, [pc, #112]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0b      	ldr	r2, [pc, #44]	; (8004500 <TIM_Base_SetConfig+0xb8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0xa0>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <TIM_Base_SetConfig+0xbc>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0xa0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a09      	ldr	r2, [pc, #36]	; (8004508 <TIM_Base_SetConfig+0xc0>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40014400 	.word	0x40014400
 8004508:	40014800 	.word	0x40014800

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
	...

08004544 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8004552:	2234      	movs	r2, #52	; 0x34
 8004554:	2100      	movs	r1, #0
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f001 fcb4 	bl	8005ec4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	f1a3 0208 	sub.w	r2, r3, #8
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2202      	movs	r2, #2
 8004590:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8004596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	4413      	add	r3, r2
 800459c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	3b04      	subs	r3, #4
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b4:	3b04      	subs	r3, #4
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ce:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	3304      	adds	r3, #4
 80045d8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80045da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <_tx_byte_pool_create+0x11c>)
 80045e2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045ea:	f3ef 8310 	mrs	r3, PRIMASK
 80045ee:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 80045f0:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 80045f2:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80045f4:	b672      	cpsid	i
#endif
    return(int_posture);
 80045f6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <_tx_byte_pool_create+0x120>)
 80045fe:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <_tx_byte_pool_create+0x124>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <_tx_byte_pool_create+0x128>)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	631a      	str	r2, [r3, #48]	; 0x30
 800461a:	e011      	b.n	8004640 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800461c:	4b13      	ldr	r3, [pc, #76]	; (800466c <_tx_byte_pool_create+0x128>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <_tx_byte_pool_create+0x124>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	4a08      	ldr	r2, [pc, #32]	; (8004668 <_tx_byte_pool_create+0x124>)
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3738      	adds	r7, #56	; 0x38
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	ffffeeee 	.word	0xffffeeee
 8004664:	42595445 	.word	0x42595445
 8004668:	20000fa0 	.word	0x20000fa0
 800466c:	20000f9c 	.word	0x20000f9c

08004670 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004674:	f000 fb18 	bl	8004ca8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004678:	f000 ff6e 	bl	8005558 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <_tx_initialize_high_level+0x58>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <_tx_initialize_high_level+0x5c>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <_tx_initialize_high_level+0x60>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <_tx_initialize_high_level+0x64>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004694:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <_tx_initialize_high_level+0x68>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <_tx_initialize_high_level+0x6c>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <_tx_initialize_high_level+0x70>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <_tx_initialize_high_level+0x74>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <_tx_initialize_high_level+0x78>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <_tx_initialize_high_level+0x7c>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <_tx_initialize_high_level+0x80>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <_tx_initialize_high_level+0x84>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
#endif
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000f74 	.word	0x20000f74
 80046cc:	20000f78 	.word	0x20000f78
 80046d0:	20000f7c 	.word	0x20000f7c
 80046d4:	20000f80 	.word	0x20000f80
 80046d8:	20000f84 	.word	0x20000f84
 80046dc:	20000f88 	.word	0x20000f88
 80046e0:	20000f94 	.word	0x20000f94
 80046e4:	20000f98 	.word	0x20000f98
 80046e8:	20000f9c 	.word	0x20000f9c
 80046ec:	20000fa0 	.word	0x20000fa0
 80046f0:	20000f8c 	.word	0x20000f8c
 80046f4:	20000f90 	.word	0x20000f90

080046f8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <_tx_initialize_kernel_enter+0x48>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004704:	d00c      	beq.n	8004720 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <_tx_initialize_kernel_enter+0x48>)
 8004708:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800470c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800470e:	f7fb fd37 	bl	8000180 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8004712:	f7ff ffad 	bl	8004670 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <_tx_initialize_kernel_enter+0x4c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a09      	ldr	r2, [pc, #36]	; (8004744 <_tx_initialize_kernel_enter+0x4c>)
 800471e:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <_tx_initialize_kernel_enter+0x48>)
 8004722:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004726:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <_tx_initialize_kernel_enter+0x50>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb fe33 	bl	8000398 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004732:	4b03      	ldr	r3, [pc, #12]	; (8004740 <_tx_initialize_kernel_enter+0x48>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8004738:	f7fb fd62 	bl	8000200 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800473c:	bf00      	nop
 800473e:	bd80      	pop	{r7, pc}
 8004740:	2000000c 	.word	0x2000000c
 8004744:	20001044 	.word	0x20001044
 8004748:	20000fa4 	.word	0x20000fa4

0800474c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	; 0x38
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	623b      	str	r3, [r7, #32]
    return(posture);
 800475c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800475e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004760:	b672      	cpsid	i
    return(int_posture);
 8004762:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8004764:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800476a:	4a33      	ldr	r2, [pc, #204]	; (8004838 <_tx_semaphore_cleanup+0xec>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d158      	bne.n	8004822 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d152      	bne.n	8004822 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004780:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8004782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	d04c      	beq.n	8004822 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a2b      	ldr	r2, [pc, #172]	; (800483c <_tx_semaphore_cleanup+0xf0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d147      	bne.n	8004822 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d043      	beq.n	8004822 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	1e5a      	subs	r2, r3, #1
 80047a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a8:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	2200      	movs	r2, #0
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e013      	b.n	80047e6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047d4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d102      	bne.n	80047e6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	2b06      	cmp	r3, #6
 80047ec:	d119      	bne.n	8004822 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	220d      	movs	r2, #13
 80047f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <_tx_semaphore_cleanup+0xf4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	4a10      	ldr	r2, [pc, #64]	; (8004840 <_tx_semaphore_cleanup+0xf4>)
 80047fe:	6013      	str	r3, [r2, #0]
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004802:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fbdd 	bl	8004fcc <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004812:	f3ef 8310 	mrs	r3, PRIMASK
 8004816:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004818:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800481a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800481c:	b672      	cpsid	i
    return(int_posture);
 800481e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f383 8810 	msr	PRIMASK, r3
}
 800482c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800482e:	bf00      	nop
 8004830:	3738      	adds	r7, #56	; 0x38
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	0800474d 	.word	0x0800474d
 800483c:	53454d41 	.word	0x53454d41
 8004840:	20001044 	.word	0x20001044

08004844 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	; 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8004850:	221c      	movs	r2, #28
 8004852:	2100      	movs	r1, #0
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f001 fb35 	bl	8005ec4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004866:	f3ef 8310 	mrs	r3, PRIMASK
 800486a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800486c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800486e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004870:	b672      	cpsid	i
    return(int_posture);
 8004872:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8004874:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <_tx_semaphore_create+0x98>)
 800487a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <_tx_semaphore_create+0x9c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8004884:	4a17      	ldr	r2, [pc, #92]	; (80048e4 <_tx_semaphore_create+0xa0>)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]
 8004896:	e011      	b.n	80048bc <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <_tx_semaphore_create+0xa0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a3a      	ldr	r2, [r7, #32]
 80048ba:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_tx_semaphore_create+0x9c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <_tx_semaphore_create+0x9c>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	53454d41 	.word	0x53454d41
 80048e0:	20000f78 	.word	0x20000f78
 80048e4:	20000f74 	.word	0x20000f74

080048e8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80048f6:	f3ef 8310 	mrs	r3, PRIMASK
 80048fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80048fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004900:	b672      	cpsid	i
    return(int_posture);
 8004902:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8004904:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	e068      	b.n	80049f6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d05d      	beq.n	80049e6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800492a:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <_tx_semaphore_get+0x118>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d008      	beq.n	8004944 <_tx_semaphore_get+0x5c>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f383 8810 	msr	PRIMASK, r3
}
 800493c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800493e:	230d      	movs	r3, #13
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
 8004942:	e058      	b.n	80049f6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004944:	4b2f      	ldr	r3, [pc, #188]	; (8004a04 <_tx_semaphore_get+0x11c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 800494a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494c:	4a2e      	ldr	r2, [pc, #184]	; (8004a08 <_tx_semaphore_get+0x120>)
 800494e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004970:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497c:	675a      	str	r2, [r3, #116]	; 0x74
 800497e:	e011      	b.n	80049a4 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049a2:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	2206      	movs	r2, #6
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80049b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b6:	2201      	movs	r2, #1
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <_tx_semaphore_get+0x118>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <_tx_semaphore_get+0x118>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f383 8810 	msr	PRIMASK, r3
}
 80049d4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80049d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049d8:	f000 fbf8 	bl	80051cc <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	e007      	b.n	80049f6 <_tx_semaphore_get+0x10e>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f383 8810 	msr	PRIMASK, r3
}
 80049f0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80049f2:	230d      	movs	r3, #13
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3738      	adds	r7, #56	; 0x38
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20001044 	.word	0x20001044
 8004a04:	20000fac 	.word	0x20000fac
 8004a08:	0800474d 	.word	0x0800474d

08004a0c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004a14:	f3ef 8310 	mrs	r3, PRIMASK
 8004a18:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004a1a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004a1c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004a1e:	b672      	cpsid	i
    return(int_posture);
 8004a20:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	1c5a      	adds	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f383 8810 	msr	PRIMASK, r3
}
 8004a44:	e033      	b.n	8004aae <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8004a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	60da      	str	r2, [r3, #12]
 8004a5e:	e00e      	b.n	8004a7e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a3a      	ldr	r2, [r7, #32]
 8004a6a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a70:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a82:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	2200      	movs	r2, #0
 8004a88:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <_tx_semaphore_put+0xac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3301      	adds	r3, #1
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <_tx_semaphore_put+0xac>)
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f383 8810 	msr	PRIMASK, r3
}
 8004aa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004aaa:	f000 fa8f 	bl	8004fcc <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3730      	adds	r7, #48	; 0x30
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20001044 	.word	0x20001044

08004abc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b092      	sub	sp, #72	; 0x48
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004aca:	2300      	movs	r3, #0
 8004acc:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004ace:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ad0:	21ef      	movs	r1, #239	; 0xef
 8004ad2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ad4:	f001 f9f6 	bl	8005ec4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004ad8:	22b0      	movs	r2, #176	; 0xb0
 8004ada:	2100      	movs	r1, #0
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f001 f9f1 	bl	8005ec4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004af8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004afe:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b04:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b0a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b12:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b18:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b24:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b2c:	4413      	add	r3, r2
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b34:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8004b36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d007      	beq.n	8004b4e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b4c:	e006      	b.n	8004b5c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2203      	movs	r2, #3
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a48      	ldr	r2, [pc, #288]	; (8004c88 <_tx_thread_create+0x1cc>)
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004b6e:	4947      	ldr	r1, [pc, #284]	; (8004c8c <_tx_thread_create+0x1d0>)
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7fb fb95 	bl	80002a0 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b80:	b672      	cpsid	i
    return(int_posture);
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004b84:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a41      	ldr	r2, [pc, #260]	; (8004c90 <_tx_thread_create+0x1d4>)
 8004b8a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004b8c:	4b41      	ldr	r3, [pc, #260]	; (8004c94 <_tx_thread_create+0x1d8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10b      	bne.n	8004bac <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004b94:	4a40      	ldr	r2, [pc, #256]	; (8004c98 <_tx_thread_create+0x1dc>)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004baa:	e016      	b.n	8004bda <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004bac:	4b3a      	ldr	r3, [pc, #232]	; (8004c98 <_tx_thread_create+0x1dc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004bda:	4b2e      	ldr	r3, [pc, #184]	; (8004c94 <_tx_thread_create+0x1d8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3301      	adds	r3, #1
 8004be0:	4a2c      	ldr	r2, [pc, #176]	; (8004c94 <_tx_thread_create+0x1d8>)
 8004be2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <_tx_thread_create+0x1e0>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a2c      	ldr	r2, [pc, #176]	; (8004c9c <_tx_thread_create+0x1e0>)
 8004bec:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8004bee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d129      	bne.n	8004c48 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004bf4:	f3ef 8305 	mrs	r3, IPSR
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004bfc:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <_tx_thread_create+0x1e4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004c06:	d30d      	bcc.n	8004c24 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004c08:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <_tx_thread_create+0x1e8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c20:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c22:	e001      	b.n	8004c28 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	647b      	str	r3, [r7, #68]	; 0x44
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	f383 8810 	msr	PRIMASK, r3
}
 8004c32:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f9c9 	bl	8004fcc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c44:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c46:	e01a      	b.n	8004c7e <_tx_thread_create+0x1c2>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f383 8810 	msr	PRIMASK, r3
}
 8004c52:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c54:	f3ef 8310 	mrs	r3, PRIMASK
 8004c58:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004c5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c5e:	b672      	cpsid	i
    return(int_posture);
 8004c60:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8004c64:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <_tx_thread_create+0x1e0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <_tx_thread_create+0x1e0>)
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c70:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f383 8810 	msr	PRIMASK, r3
}
 8004c78:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004c7a:	f000 f96f 	bl	8004f5c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3748      	adds	r7, #72	; 0x48
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	0800549d 	.word	0x0800549d
 8004c8c:	08004de1 	.word	0x08004de1
 8004c90:	54485244 	.word	0x54485244
 8004c94:	20000fb8 	.word	0x20000fb8
 8004c98:	20000fb4 	.word	0x20000fb4
 8004c9c:	20001044 	.word	0x20001044
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	20000fb0 	.word	0x20000fb0

08004ca8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8004cac:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <_tx_thread_initialize+0x50>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <_tx_thread_initialize+0x54>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <_tx_thread_initialize+0x58>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <_tx_thread_initialize+0x5c>)
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8004cc4:	2280      	movs	r2, #128	; 0x80
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	480f      	ldr	r0, [pc, #60]	; (8004d08 <_tx_thread_initialize+0x60>)
 8004cca:	f001 f8fb 	bl	8005ec4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <_tx_thread_initialize+0x64>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <_tx_thread_initialize+0x68>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8004cda:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <_tx_thread_initialize+0x6c>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <_tx_thread_initialize+0x70>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <_tx_thread_initialize+0x74>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 8004cee:	4a0b      	ldr	r2, [pc, #44]	; (8004d1c <_tx_thread_initialize+0x74>)
 8004cf0:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8004cf2:	bf00      	nop
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000fac 	.word	0x20000fac
 8004cfc:	20000fb0 	.word	0x20000fb0
 8004d00:	20000fbc 	.word	0x20000fbc
 8004d04:	20000fc0 	.word	0x20000fc0
 8004d08:	20000fc4 	.word	0x20000fc4
 8004d0c:	20000fb4 	.word	0x20000fb4
 8004d10:	20000fb8 	.word	0x20000fb8
 8004d14:	20001044 	.word	0x20001044
 8004d18:	20001048 	.word	0x20001048
 8004d1c:	2000104c 	.word	0x2000104c

08004d20 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d30:	61fb      	str	r3, [r7, #28]
    return(posture);
 8004d32:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8004d34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004d36:	b672      	cpsid	i
    return(int_posture);
 8004d38:	69bb      	ldr	r3, [r7, #24]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004d3a:	623b      	str	r3, [r7, #32]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d12f      	bne.n	8004da4 <_tx_thread_resume+0x84>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004d44:	f3ef 8305 	mrs	r3, IPSR
 8004d48:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004d4a:	697a      	ldr	r2, [r7, #20]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8004d4c:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <_tx_thread_resume+0xb4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8004d56:	d30d      	bcc.n	8004d74 <_tx_thread_resume+0x54>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <_tx_thread_resume+0xb8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <_tx_thread_resume+0x58>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d72:	e001      	b.n	8004d78 <_tx_thread_resume+0x58>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8004d78:	4b18      	ldr	r3, [pc, #96]	; (8004ddc <_tx_thread_resume+0xbc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <_tx_thread_resume+0xbc>)
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f91c 	bl	8004fcc <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <_tx_thread_resume+0x80>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d9e:	63da      	str	r2, [r3, #60]	; 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8004da0:	2300      	movs	r3, #0
 8004da2:	e012      	b.n	8004dca <_tx_thread_resume+0xaa>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d105      	bne.n	8004db8 <_tx_thread_resume+0x98>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8004db2:	2319      	movs	r3, #25
 8004db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db6:	e001      	b.n	8004dbc <_tx_thread_resume+0x9c>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8004db8:	2312      	movs	r3, #18
 8004dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	bf00      	nop
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3730      	adds	r7, #48	; 0x30
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000000c 	.word	0x2000000c
 8004dd8:	20000fb0 	.word	0x20000fb0
 8004ddc:	20001044 	.word	0x20001044

08004de0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <_tx_thread_shell_entry+0x70>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	617b      	str	r3, [r7, #20]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <_tx_thread_shell_entry+0x74>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <_tx_thread_shell_entry+0x74>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6978      	ldr	r0, [r7, #20]
 8004e06:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e08:	f3ef 8310 	mrs	r3, PRIMASK
 8004e0c:	60bb      	str	r3, [r7, #8]
    return(posture);
 8004e0e:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8004e10:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e12:	b672      	cpsid	i
    return(int_posture);
 8004e14:	687b      	ldr	r3, [r7, #4]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8004e16:	613b      	str	r3, [r7, #16]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2201      	movs	r2, #1
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <_tx_thread_shell_entry+0x78>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <_tx_thread_shell_entry+0x78>)
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f000 f9c3 	bl	80051cc <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004e46:	bf00      	nop
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000fac 	.word	0x20000fac
 8004e54:	20001048 	.word	0x20001048
 8004e58:	20001044 	.word	0x20001044

08004e5c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08e      	sub	sp, #56	; 0x38
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e64:	f3ef 8310 	mrs	r3, PRIMASK
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8004e6c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e6e:	b672      	cpsid	i
    return(int_posture);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004e72:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8004e74:	4b35      	ldr	r3, [pc, #212]	; (8004f4c <_tx_thread_sleep+0xf0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8004e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d108      	bne.n	8004e92 <_tx_thread_sleep+0x36>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004e8c:	2313      	movs	r3, #19
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e90:	e056      	b.n	8004f40 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004e92:	f3ef 8305 	mrs	r3, IPSR
 8004e96:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004e98:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004e9a:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <_tx_thread_sleep+0xf4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <_tx_thread_sleep+0x5a>
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004eb0:	2313      	movs	r3, #19
 8004eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8004eb4:	e044      	b.n	8004f40 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	4a26      	ldr	r2, [pc, #152]	; (8004f54 <_tx_thread_sleep+0xf8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <_tx_thread_sleep+0x74>
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8004eca:	2313      	movs	r3, #19
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8004ece:	e037      	b.n	8004f40 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d108      	bne.n	8004ee8 <_tx_thread_sleep+0x8c>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee6:	e02b      	b.n	8004f40 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004ee8:	4b1b      	ldr	r3, [pc, #108]	; (8004f58 <_tx_thread_sleep+0xfc>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d008      	beq.n	8004f02 <_tx_thread_sleep+0xa6>
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f383 8810 	msr	PRIMASK, r3
}
 8004efa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8004efc:	2313      	movs	r3, #19
 8004efe:	637b      	str	r3, [r7, #52]	; 0x34
 8004f00:	e01e      	b.n	8004f40 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8004f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f04:	2204      	movs	r2, #4
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f10:	2200      	movs	r2, #0
 8004f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <_tx_thread_sleep+0xfc>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3301      	adds	r3, #1
 8004f22:	4a0d      	ldr	r2, [pc, #52]	; (8004f58 <_tx_thread_sleep+0xfc>)
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f34:	f000 f94a 	bl	80051cc <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8004f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3738      	adds	r7, #56	; 0x38
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000fac 	.word	0x20000fac
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	200010f4 	.word	0x200010f4
 8004f58:	20001044 	.word	0x20001044

08004f5c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b089      	sub	sp, #36	; 0x24
 8004f60:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <_tx_thread_system_preempt_check+0x60>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d121      	bne.n	8004fb2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8004f6e:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <_tx_thread_system_preempt_check+0x64>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8004f74:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <_tx_thread_system_preempt_check+0x68>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d017      	beq.n	8004fb2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8004f82:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <_tx_thread_system_preempt_check+0x6c>)
 8004f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f88:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004f8a:	f3ef 8305 	mrs	r3, IPSR
 8004f8e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8004f90:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10c      	bne.n	8004fb0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	60fb      	str	r3, [r7, #12]
    return(posture);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8004f9e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8004fa0:	b662      	cpsie	i
}
 8004fa2:	bf00      	nop
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f383 8810 	msr	PRIMASK, r3
}
 8004fae:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8004fb0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8004fb2:	bf00      	nop
 8004fb4:	3724      	adds	r7, #36	; 0x24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	20001044 	.word	0x20001044
 8004fc0:	20000fac 	.word	0x20000fac
 8004fc4:	20000fb0 	.word	0x20000fb0
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b096      	sub	sp, #88	; 0x58
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8004fdc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8004fde:	b672      	cpsid	i
    return(int_posture);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8004fe2:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	334c      	adds	r3, #76	; 0x4c
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 fb8d 	bl	8005710 <_tx_timer_system_deactivate>
 8004ff6:	e002      	b.n	8004ffe <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8004ffe:	4b6c      	ldr	r3, [pc, #432]	; (80051b0 <_tx_thread_system_resume+0x1e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3b01      	subs	r3, #1
 8005004:	4a6a      	ldr	r2, [pc, #424]	; (80051b0 <_tx_thread_system_resume+0x1e4>)
 8005006:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	f040 8083 	bne.w	8005118 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8097 	beq.w	800514a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005020:	2b00      	cmp	r3, #0
 8005022:	d172      	bne.n	800510a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8005030:	4a60      	ldr	r2, [pc, #384]	; (80051b4 <_tx_thread_system_resume+0x1e8>)
 8005032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005038:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800503a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d154      	bne.n	80050ea <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8005040:	495c      	ldr	r1, [pc, #368]	; (80051b4 <_tx_thread_system_resume+0x1e8>)
 8005042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005056:	2201      	movs	r2, #1
 8005058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800505a:	fa02 f303 	lsl.w	r3, r2, r3
 800505e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005060:	4b55      	ldr	r3, [pc, #340]	; (80051b8 <_tx_thread_system_resume+0x1ec>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	4313      	orrs	r3, r2
 8005068:	4a53      	ldr	r2, [pc, #332]	; (80051b8 <_tx_thread_system_resume+0x1ec>)
 800506a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800506c:	4b53      	ldr	r3, [pc, #332]	; (80051bc <_tx_thread_system_resume+0x1f0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005072:	429a      	cmp	r2, r3
 8005074:	d269      	bcs.n	800514a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8005076:	4a51      	ldr	r2, [pc, #324]	; (80051bc <_tx_thread_system_resume+0x1f0>)
 8005078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800507a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800507c:	4b50      	ldr	r3, [pc, #320]	; (80051c0 <_tx_thread_system_resume+0x1f4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8005082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8005088:	4a4d      	ldr	r2, [pc, #308]	; (80051c0 <_tx_thread_system_resume+0x1f4>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e05c      	b.n	800514a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8005090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005094:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005096:	429a      	cmp	r2, r3
 8005098:	d257      	bcs.n	800514a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800509a:	4a49      	ldr	r2, [pc, #292]	; (80051c0 <_tx_thread_system_resume+0x1f4>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	f383 8810 	msr	PRIMASK, r3
}
 80050aa:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80050ac:	4b40      	ldr	r3, [pc, #256]	; (80051b0 <_tx_thread_system_resume+0x1e4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d174      	bne.n	80051a2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80050b8:	4b42      	ldr	r3, [pc, #264]	; (80051c4 <_tx_thread_system_resume+0x1f8>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80050c0:	f3ef 8305 	mrs	r3, IPSR
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80050cc:	f3ef 8310 	mrs	r3, PRIMASK
 80050d0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80050d4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80050d6:	b662      	cpsie	i
}
 80050d8:	bf00      	nop
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	bf00      	nop
}
 80050e6:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80050e8:	e05b      	b.n	80051a2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80050ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80050f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005106:	621a      	str	r2, [r3, #32]
 8005108:	e01f      	b.n	800514a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2203      	movs	r2, #3
 8005114:	631a      	str	r2, [r3, #48]	; 0x30
 8005116:	e018      	b.n	800514a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	2b01      	cmp	r3, #1
 800511e:	d014      	beq.n	800514a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	2b02      	cmp	r3, #2
 8005126:	d010      	beq.n	800514a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	; 0x30
 800513c:	e005      	b.n	800514a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2203      	movs	r2, #3
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800514a:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <_tx_thread_system_resume+0x1fc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005152:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	f383 8810 	msr	PRIMASK, r3
}
 800515a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800515c:	4b18      	ldr	r3, [pc, #96]	; (80051c0 <_tx_thread_system_resume+0x1f4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005162:	429a      	cmp	r2, r3
 8005164:	d020      	beq.n	80051a8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <_tx_thread_system_resume+0x1e4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800516c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11a      	bne.n	80051a8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <_tx_thread_system_resume+0x1f8>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800517a:	f3ef 8305 	mrs	r3, IPSR
 800517e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005180:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005186:	f3ef 8310 	mrs	r3, PRIMASK
 800518a:	613b      	str	r3, [r7, #16]
    return(posture);
 800518c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800518e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005190:	b662      	cpsie	i
}
 8005192:	bf00      	nop
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	bf00      	nop
}
 80051a0:	e001      	b.n	80051a6 <_tx_thread_system_resume+0x1da>
                                return;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <_tx_thread_system_resume+0x1dc>
 80051a6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80051a8:	3758      	adds	r7, #88	; 0x58
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20001044 	.word	0x20001044
 80051b4:	20000fc4 	.word	0x20000fc4
 80051b8:	20000fbc 	.word	0x20000fbc
 80051bc:	20000fc0 	.word	0x20000fc0
 80051c0:	20000fb0 	.word	0x20000fb0
 80051c4:	e000ed04 	.word	0xe000ed04
 80051c8:	20000fac 	.word	0x20000fac

080051cc <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b09e      	sub	sp, #120	; 0x78
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80051d4:	4b81      	ldr	r3, [pc, #516]	; (80053dc <_tx_thread_system_suspend+0x210>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80051da:	f3ef 8310 	mrs	r3, PRIMASK
 80051de:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 80051e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 80051e2:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80051e4:	b672      	cpsid	i
    return(int_posture);
 80051e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80051e8:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d112      	bne.n	8005218 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80051f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80051fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005204:	d004      	beq.n	8005210 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	334c      	adds	r3, #76	; 0x4c
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fa20 	bl	8005650 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	4a72      	ldr	r2, [pc, #456]	; (80053e0 <_tx_thread_system_suspend+0x214>)
 8005216:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005218:	4b72      	ldr	r3, [pc, #456]	; (80053e4 <_tx_thread_system_suspend+0x218>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3b01      	subs	r3, #1
 800521e:	4a71      	ldr	r2, [pc, #452]	; (80053e4 <_tx_thread_system_suspend+0x218>)
 8005220:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 80a6 	bne.w	8005378 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800523e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	429a      	cmp	r2, r3
 8005244:	d015      	beq.n	8005272 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800524c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800524e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005250:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8005252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005254:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005256:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005258:	4a63      	ldr	r2, [pc, #396]	; (80053e8 <_tx_thread_system_suspend+0x21c>)
 800525a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800525c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d157      	bne.n	8005316 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8005266:	4960      	ldr	r1, [pc, #384]	; (80053e8 <_tx_thread_system_suspend+0x21c>)
 8005268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800526a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800526c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005270:	e051      	b.n	8005316 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005272:	4a5d      	ldr	r2, [pc, #372]	; (80053e8 <_tx_thread_system_suspend+0x21c>)
 8005274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005276:	2100      	movs	r1, #0
 8005278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800527c:	2201      	movs	r2, #1
 800527e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005286:	4b59      	ldr	r3, [pc, #356]	; (80053ec <_tx_thread_system_suspend+0x220>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528c:	43db      	mvns	r3, r3
 800528e:	4013      	ands	r3, r2
 8005290:	4a56      	ldr	r2, [pc, #344]	; (80053ec <_tx_thread_system_suspend+0x220>)
 8005292:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8005294:	2300      	movs	r3, #0
 8005296:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005298:	4b54      	ldr	r3, [pc, #336]	; (80053ec <_tx_thread_system_suspend+0x220>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800529e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d12b      	bne.n	80052fc <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80052a4:	4b52      	ldr	r3, [pc, #328]	; (80053f0 <_tx_thread_system_suspend+0x224>)
 80052a6:	2220      	movs	r2, #32
 80052a8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80052aa:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <_tx_thread_system_suspend+0x228>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80052bc:	4b49      	ldr	r3, [pc, #292]	; (80053e4 <_tx_thread_system_suspend+0x218>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 80052c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 8081 	bne.w	80053cc <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80052ca:	4b4b      	ldr	r3, [pc, #300]	; (80053f8 <_tx_thread_system_suspend+0x22c>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80052d2:	f3ef 8305 	mrs	r3, IPSR
 80052d6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 80052d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10c      	bne.n	80052f8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80052de:	f3ef 8310 	mrs	r3, PRIMASK
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 80052e8:	b662      	cpsie	i
}
 80052ea:	bf00      	nop
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80052f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	bf00      	nop
}
 80052f8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80052fa:	e067      	b.n	80053cc <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80052fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052fe:	fa93 f3a3 	rbit	r3, r3
 8005302:	65bb      	str	r3, [r7, #88]	; 0x58
 8005304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005306:	fab3 f383 	clz	r3, r3
 800530a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800530c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800530e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005310:	4413      	add	r3, r2
 8005312:	4a37      	ldr	r2, [pc, #220]	; (80053f0 <_tx_thread_system_suspend+0x224>)
 8005314:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8005316:	4b37      	ldr	r3, [pc, #220]	; (80053f4 <_tx_thread_system_suspend+0x228>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	429a      	cmp	r2, r3
 800531e:	d12b      	bne.n	8005378 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005320:	4b33      	ldr	r3, [pc, #204]	; (80053f0 <_tx_thread_system_suspend+0x224>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <_tx_thread_system_suspend+0x21c>)
 8005326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532a:	4a32      	ldr	r2, [pc, #200]	; (80053f4 <_tx_thread_system_suspend+0x228>)
 800532c:	6013      	str	r3, [r2, #0]
 800532e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005330:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	f383 8810 	msr	PRIMASK, r3
}
 8005338:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <_tx_thread_system_suspend+0x218>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8005340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d144      	bne.n	80053d0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005346:	4b2c      	ldr	r3, [pc, #176]	; (80053f8 <_tx_thread_system_suspend+0x22c>)
 8005348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800534e:	f3ef 8305 	mrs	r3, IPSR
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800535a:	f3ef 8310 	mrs	r3, PRIMASK
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8005362:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005364:	b662      	cpsie	i
}
 8005366:	bf00      	nop
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	f383 8810 	msr	PRIMASK, r3
}
 8005372:	bf00      	nop
}
 8005374:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8005376:	e02b      	b.n	80053d0 <_tx_thread_system_suspend+0x204>
 8005378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800537a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	f383 8810 	msr	PRIMASK, r3
}
 8005382:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <_tx_thread_system_suspend+0x228>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800538a:	429a      	cmp	r2, r3
 800538c:	d022      	beq.n	80053d4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800538e:	4b15      	ldr	r3, [pc, #84]	; (80053e4 <_tx_thread_system_suspend+0x218>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8005394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005396:	2b00      	cmp	r3, #0
 8005398:	d11c      	bne.n	80053d4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800539a:	4b17      	ldr	r3, [pc, #92]	; (80053f8 <_tx_thread_system_suspend+0x22c>)
 800539c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80053a2:	f3ef 8305 	mrs	r3, IPSR
 80053a6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80053a8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10c      	bne.n	80053c8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80053ae:	f3ef 8310 	mrs	r3, PRIMASK
 80053b2:	617b      	str	r3, [r7, #20]
    return(posture);
 80053b4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 80053b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80053b8:	b662      	cpsie	i
}
 80053ba:	bf00      	nop
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	bf00      	nop
}
 80053c8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80053ca:	e003      	b.n	80053d4 <_tx_thread_system_suspend+0x208>
                return;
 80053cc:	bf00      	nop
 80053ce:	e002      	b.n	80053d6 <_tx_thread_system_suspend+0x20a>
            return;
 80053d0:	bf00      	nop
 80053d2:	e000      	b.n	80053d6 <_tx_thread_system_suspend+0x20a>
    return;
 80053d4:	bf00      	nop
}
 80053d6:	3778      	adds	r7, #120	; 0x78
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	20000fac 	.word	0x20000fac
 80053e0:	200015b0 	.word	0x200015b0
 80053e4:	20001044 	.word	0x20001044
 80053e8:	20000fc4 	.word	0x20000fc4
 80053ec:	20000fbc 	.word	0x20000fbc
 80053f0:	20000fc0 	.word	0x20000fc0
 80053f4:	20000fb0 	.word	0x20000fb0
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005402:	4b20      	ldr	r3, [pc, #128]	; (8005484 <_tx_thread_time_slice+0x88>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005408:	f3ef 8310 	mrs	r3, PRIMASK
 800540c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800540e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005410:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005412:	b672      	cpsid	i
    return(int_posture);
 8005414:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8005416:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005418:	4b1b      	ldr	r3, [pc, #108]	; (8005488 <_tx_thread_time_slice+0x8c>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d024      	beq.n	800546e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005428:	2b00      	cmp	r3, #0
 800542a:	d120      	bne.n	800546e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <_tx_thread_time_slice+0x90>)
 800543a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	429a      	cmp	r2, r3
 8005444:	d013      	beq.n	800546e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544e:	429a      	cmp	r2, r3
 8005450:	d10d      	bne.n	800546e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	6a12      	ldr	r2, [r2, #32]
 800545a:	490d      	ldr	r1, [pc, #52]	; (8005490 <_tx_thread_time_slice+0x94>)
 800545c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <_tx_thread_time_slice+0x98>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <_tx_thread_time_slice+0x94>)
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <_tx_thread_time_slice+0x9c>)
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	bc80      	pop	{r7}
 8005482:	4770      	bx	lr
 8005484:	20000fac 	.word	0x20000fac
 8005488:	20001054 	.word	0x20001054
 800548c:	200015b0 	.word	0x200015b0
 8005490:	20000fc4 	.word	0x20000fc4
 8005494:	20000fc0 	.word	0x20000fc0
 8005498:	20000fb0 	.word	0x20000fb0

0800549c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08a      	sub	sp, #40	; 0x28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	617b      	str	r3, [r7, #20]
    return(posture);
 80054ae:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80054b0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80054b2:	b672      	cpsid	i
    return(int_posture);
 80054b4:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80054b6:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d10e      	bne.n	80054de <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <_tx_thread_timeout+0x74>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3301      	adds	r3, #1
 80054c6:	4a12      	ldr	r2, [pc, #72]	; (8005510 <_tx_thread_timeout+0x74>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f383 8810 	msr	PRIMASK, r3
}
 80054d4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80054d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80054d8:	f7ff fd78 	bl	8004fcc <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80054dc:	e013      	b.n	8005506 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e2:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f383 8810 	msr	PRIMASK, r3
}
 80054f6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	69b9      	ldr	r1, [r7, #24]
 8005502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005504:	4798      	blx	r3
}
 8005506:	bf00      	nop
 8005508:	3728      	adds	r7, #40	; 0x28
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20001044 	.word	0x20001044

08005514 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800551a:	f3ef 8310 	mrs	r3, PRIMASK
 800551e:	607b      	str	r3, [r7, #4]
    return(posture);
 8005520:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005522:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005524:	b672      	cpsid	i
    return(int_posture);
 8005526:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005528:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <_tx_timer_expiration_process+0x3c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	4a07      	ldr	r2, [pc, #28]	; (8005550 <_tx_timer_expiration_process+0x3c>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005540:	4804      	ldr	r0, [pc, #16]	; (8005554 <_tx_timer_expiration_process+0x40>)
 8005542:	f7ff fd43 	bl	8004fcc <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005546:	bf00      	nop
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	20001044 	.word	0x20001044
 8005554:	200010f4 	.word	0x200010f4

08005558 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b089      	sub	sp, #36	; 0x24
 800555c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800555e:	4b28      	ldr	r3, [pc, #160]	; (8005600 <_tx_timer_initialize+0xa8>)
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005564:	4b27      	ldr	r3, [pc, #156]	; (8005604 <_tx_timer_initialize+0xac>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800556a:	4b27      	ldr	r3, [pc, #156]	; (8005608 <_tx_timer_initialize+0xb0>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005570:	4b26      	ldr	r3, [pc, #152]	; (800560c <_tx_timer_initialize+0xb4>)
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <_tx_timer_initialize+0xb8>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800557c:	2280      	movs	r2, #128	; 0x80
 800557e:	2100      	movs	r1, #0
 8005580:	4824      	ldr	r0, [pc, #144]	; (8005614 <_tx_timer_initialize+0xbc>)
 8005582:	f000 fc9f 	bl	8005ec4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005586:	4b24      	ldr	r3, [pc, #144]	; (8005618 <_tx_timer_initialize+0xc0>)
 8005588:	4a22      	ldr	r2, [pc, #136]	; (8005614 <_tx_timer_initialize+0xbc>)
 800558a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800558c:	4b23      	ldr	r3, [pc, #140]	; (800561c <_tx_timer_initialize+0xc4>)
 800558e:	4a21      	ldr	r2, [pc, #132]	; (8005614 <_tx_timer_initialize+0xbc>)
 8005590:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <_tx_timer_initialize+0xc8>)
 8005594:	4a23      	ldr	r2, [pc, #140]	; (8005624 <_tx_timer_initialize+0xcc>)
 8005596:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005598:	4b21      	ldr	r3, [pc, #132]	; (8005620 <_tx_timer_initialize+0xc8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3304      	adds	r3, #4
 800559e:	4a20      	ldr	r2, [pc, #128]	; (8005620 <_tx_timer_initialize+0xc8>)
 80055a0:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80055a2:	4b21      	ldr	r3, [pc, #132]	; (8005628 <_tx_timer_initialize+0xd0>)
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <_tx_timer_initialize+0xd4>)
 80055a6:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80055a8:	4b21      	ldr	r3, [pc, #132]	; (8005630 <_tx_timer_initialize+0xd8>)
 80055aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ae:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80055b0:	4b20      	ldr	r3, [pc, #128]	; (8005634 <_tx_timer_initialize+0xdc>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80055b6:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <_tx_timer_initialize+0xd0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <_tx_timer_initialize+0xd8>)
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	491d      	ldr	r1, [pc, #116]	; (8005634 <_tx_timer_initialize+0xdc>)
 80055c0:	6809      	ldr	r1, [r1, #0]
 80055c2:	481c      	ldr	r0, [pc, #112]	; (8005634 <_tx_timer_initialize+0xdc>)
 80055c4:	6800      	ldr	r0, [r0, #0]
 80055c6:	2400      	movs	r4, #0
 80055c8:	9405      	str	r4, [sp, #20]
 80055ca:	2400      	movs	r4, #0
 80055cc:	9404      	str	r4, [sp, #16]
 80055ce:	9003      	str	r0, [sp, #12]
 80055d0:	9102      	str	r1, [sp, #8]
 80055d2:	9201      	str	r2, [sp, #4]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	4b18      	ldr	r3, [pc, #96]	; (8005638 <_tx_timer_initialize+0xe0>)
 80055d8:	4a18      	ldr	r2, [pc, #96]	; (800563c <_tx_timer_initialize+0xe4>)
 80055da:	4919      	ldr	r1, [pc, #100]	; (8005640 <_tx_timer_initialize+0xe8>)
 80055dc:	4819      	ldr	r0, [pc, #100]	; (8005644 <_tx_timer_initialize+0xec>)
 80055de:	f7ff fa6d 	bl	8004abc <_tx_thread_create>
 80055e2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e5      	bne.n	80055b6 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80055ea:	4b17      	ldr	r3, [pc, #92]	; (8005648 <_tx_timer_initialize+0xf0>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <_tx_timer_initialize+0xf4>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	bf00      	nop
 8005600:	20001050 	.word	0x20001050
 8005604:	200015b0 	.word	0x200015b0
 8005608:	20001054 	.word	0x20001054
 800560c:	200010e4 	.word	0x200010e4
 8005610:	200010f0 	.word	0x200010f0
 8005614:	20001058 	.word	0x20001058
 8005618:	200010d8 	.word	0x200010d8
 800561c:	200010e0 	.word	0x200010e0
 8005620:	200010dc 	.word	0x200010dc
 8005624:	200010d4 	.word	0x200010d4
 8005628:	200011a4 	.word	0x200011a4
 800562c:	200011b0 	.word	0x200011b0
 8005630:	200011a8 	.word	0x200011a8
 8005634:	200011ac 	.word	0x200011ac
 8005638:	4154494d 	.word	0x4154494d
 800563c:	0800577d 	.word	0x0800577d
 8005640:	08005fb8 	.word	0x08005fb8
 8005644:	200010f4 	.word	0x200010f4
 8005648:	200010e8 	.word	0x200010e8
 800564c:	200010ec 	.word	0x200010ec

08005650 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005650:	b480      	push	{r7}
 8005652:	b089      	sub	sp, #36	; 0x24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d04a      	beq.n	80056fa <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d046      	beq.n	80056fa <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d142      	bne.n	80056fa <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b20      	cmp	r3, #32
 8005678:	d902      	bls.n	8005680 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800567a:	231f      	movs	r3, #31
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	e002      	b.n	8005686 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	3b01      	subs	r3, #1
 8005684:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005686:	4b1f      	ldr	r3, [pc, #124]	; (8005704 <_tx_timer_system_activate+0xb4>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005692:	4b1d      	ldr	r3, [pc, #116]	; (8005708 <_tx_timer_system_activate+0xb8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	429a      	cmp	r2, r3
 800569a:	d30b      	bcc.n	80056b4 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800569c:	4b1a      	ldr	r3, [pc, #104]	; (8005708 <_tx_timer_system_activate+0xb8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	109b      	asrs	r3, r3, #2
 80056a6:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80056a8:	4b18      	ldr	r3, [pc, #96]	; (800570c <_tx_timer_system_activate+0xbc>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e011      	b.n	80056f4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80056fa:	bf00      	nop
 80056fc:	3724      	adds	r7, #36	; 0x24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr
 8005704:	200010e0 	.word	0x200010e0
 8005708:	200010dc 	.word	0x200010dc
 800570c:	200010d8 	.word	0x200010d8

08005710 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005710:	b480      	push	{r7}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d026      	beq.n	8005772 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d108      	bne.n	8005744 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	429a      	cmp	r2, r3
 800573a:	d117      	bne.n	800576c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	e013      	b.n	800576c <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	429a      	cmp	r2, r3
 800575e:	d105      	bne.n	800576c <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	619a      	str	r2, [r3, #24]
    }
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	bc80      	pop	{r7}
 800577a:	4770      	bx	lr

0800577c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b098      	sub	sp, #96	; 0x60
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005784:	2300      	movs	r3, #0
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a73      	ldr	r2, [pc, #460]	; (8005958 <_tx_timer_thread_entry+0x1dc>)
 800578c:	4293      	cmp	r3, r2
 800578e:	f040 80de 	bne.w	800594e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005792:	f3ef 8310 	mrs	r3, PRIMASK
 8005796:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800579c:	b672      	cpsid	i
    return(int_posture);
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80057a0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80057a2:	4b6e      	ldr	r3, [pc, #440]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f107 020c 	add.w	r2, r7, #12
 80057b6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80057b8:	4b68      	ldr	r3, [pc, #416]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80057c0:	4b66      	ldr	r3, [pc, #408]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4a65      	ldr	r2, [pc, #404]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057c8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80057ca:	4b64      	ldr	r3, [pc, #400]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b64      	ldr	r3, [pc, #400]	; (8005960 <_tx_timer_thread_entry+0x1e4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d103      	bne.n	80057de <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 80057d6:	4b63      	ldr	r3, [pc, #396]	; (8005964 <_tx_timer_thread_entry+0x1e8>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a60      	ldr	r2, [pc, #384]	; (800595c <_tx_timer_thread_entry+0x1e0>)
 80057dc:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 80057de:	4b62      	ldr	r3, [pc, #392]	; (8005968 <_tx_timer_thread_entry+0x1ec>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057f0:	f3ef 8310 	mrs	r3, PRIMASK
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80057fa:	b672      	cpsid	i
    return(int_posture);
 80057fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80057fe:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005800:	e07f      	b.n	8005902 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005814:	429a      	cmp	r2, r3
 8005816:	d102      	bne.n	800581e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	e00e      	b.n	800583c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800581e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005826:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005828:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800582e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005832:	f107 020c 	add.w	r2, r7, #12
 8005836:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800583c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b20      	cmp	r3, #32
 8005842:	d911      	bls.n	8005868 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005850:	2300      	movs	r3, #0
 8005852:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005856:	f107 0208 	add.w	r2, r7, #8
 800585a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800585c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800585e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005860:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	e01a      	b.n	800589e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800587c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005886:	f107 0208 	add.w	r2, r7, #8
 800588a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005890:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	60bb      	str	r3, [r7, #8]
 8005896:	e002      	b.n	800589e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	2200      	movs	r2, #0
 800589c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800589e:	4a33      	ldr	r2, [pc, #204]	; (800596c <_tx_timer_thread_entry+0x1f0>)
 80058a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	f383 8810 	msr	PRIMASK, r3
}
 80058ae:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80058b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80058b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80058ba:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058bc:	f3ef 8310 	mrs	r3, PRIMASK
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80058c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80058c6:	b672      	cpsid	i
    return(int_posture);
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80058ca:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80058cc:	4b27      	ldr	r3, [pc, #156]	; (800596c <_tx_timer_thread_entry+0x1f0>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d105      	bne.n	80058e6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 80058da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058dc:	2200      	movs	r2, #0
 80058de:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 80058e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80058e2:	f7ff feb5 	bl	8005650 <_tx_timer_system_activate>
 80058e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058e8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f383 8810 	msr	PRIMASK, r3
}
 80058f0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058f2:	f3ef 8310 	mrs	r3, PRIMASK
 80058f6:	623b      	str	r3, [r7, #32]
    return(posture);
 80058f8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80058fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80058fc:	b672      	cpsid	i
    return(int_posture);
 80058fe:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005900:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f47f af7c 	bne.w	8005802 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800590a:	4b17      	ldr	r3, [pc, #92]	; (8005968 <_tx_timer_thread_entry+0x1ec>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d116      	bne.n	8005940 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <_tx_timer_thread_entry+0x1f4>)
 8005914:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005918:	2203      	movs	r2, #3
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800591c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800591e:	2201      	movs	r2, #1
 8005920:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005922:	4b14      	ldr	r3, [pc, #80]	; (8005974 <_tx_timer_thread_entry+0x1f8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3301      	adds	r3, #1
 8005928:	4a12      	ldr	r2, [pc, #72]	; (8005974 <_tx_timer_thread_entry+0x1f8>)
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800592e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005938:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800593a:	f7ff fc47 	bl	80051cc <_tx_thread_system_suspend>
 800593e:	e728      	b.n	8005792 <_tx_timer_thread_entry+0x16>
 8005940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005942:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f383 8810 	msr	PRIMASK, r3
}
 800594a:	bf00      	nop
            TX_DISABLE
 800594c:	e721      	b.n	8005792 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800594e:	bf00      	nop
 8005950:	3760      	adds	r7, #96	; 0x60
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	4154494d 	.word	0x4154494d
 800595c:	200010e0 	.word	0x200010e0
 8005960:	200010dc 	.word	0x200010dc
 8005964:	200010d8 	.word	0x200010d8
 8005968:	200010e4 	.word	0x200010e4
 800596c:	200010f0 	.word	0x200010f0
 8005970:	200010f4 	.word	0x200010f4
 8005974:	20001044 	.word	0x20001044

08005978 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b092      	sub	sp, #72	; 0x48
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005986:	2300      	movs	r3, #0
 8005988:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005990:	2302      	movs	r3, #2
 8005992:	647b      	str	r3, [r7, #68]	; 0x44
 8005994:	e075      	b.n	8005a82 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	2b34      	cmp	r3, #52	; 0x34
 800599a:	d002      	beq.n	80059a2 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800599c:	2302      	movs	r3, #2
 800599e:	647b      	str	r3, [r7, #68]	; 0x44
 80059a0:	e06f      	b.n	8005a82 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80059a2:	f3ef 8310 	mrs	r3, PRIMASK
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80059ac:	b672      	cpsid	i
    return(int_posture);
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80059b2:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <_txe_byte_pool_create+0x128>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3301      	adds	r3, #1
 80059b8:	4a39      	ldr	r2, [pc, #228]	; (8005aa0 <_txe_byte_pool_create+0x128>)
 80059ba:	6013      	str	r3, [r2, #0]
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c2:	f383 8810 	msr	PRIMASK, r3
}
 80059c6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <_txe_byte_pool_create+0x12c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	643b      	str	r3, [r7, #64]	; 0x40
 80059d2:	e009      	b.n	80059e8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d00b      	beq.n	80059f4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80059dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80059e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e4:	3301      	adds	r3, #1
 80059e6:	643b      	str	r3, [r7, #64]	; 0x40
 80059e8:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <_txe_byte_pool_create+0x130>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d3f0      	bcc.n	80059d4 <_txe_byte_pool_create+0x5c>
 80059f2:	e000      	b.n	80059f6 <_txe_byte_pool_create+0x7e>
                break;
 80059f4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80059f6:	f3ef 8310 	mrs	r3, PRIMASK
 80059fa:	623b      	str	r3, [r7, #32]
    return(posture);
 80059fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80059fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a00:	b672      	cpsid	i
    return(int_posture);
 8005a02:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005a04:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005a06:	4b26      	ldr	r3, [pc, #152]	; (8005aa0 <_txe_byte_pool_create+0x128>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	4a24      	ldr	r2, [pc, #144]	; (8005aa0 <_txe_byte_pool_create+0x128>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f383 8810 	msr	PRIMASK, r3
}
 8005a1a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005a1c:	f7ff fa9e 	bl	8004f5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d102      	bne.n	8005a2e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2c:	e029      	b.n	8005a82 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d102      	bne.n	8005a3a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005a34:	2303      	movs	r3, #3
 8005a36:	647b      	str	r3, [r7, #68]	; 0x44
 8005a38:	e023      	b.n	8005a82 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b63      	cmp	r3, #99	; 0x63
 8005a3e:	d802      	bhi.n	8005a46 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005a40:	2305      	movs	r3, #5
 8005a42:	647b      	str	r3, [r7, #68]	; 0x44
 8005a44:	e01d      	b.n	8005a82 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005a46:	4b19      	ldr	r3, [pc, #100]	; (8005aac <_txe_byte_pool_create+0x134>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4e:	4a18      	ldr	r2, [pc, #96]	; (8005ab0 <_txe_byte_pool_create+0x138>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d101      	bne.n	8005a58 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005a54:	2313      	movs	r3, #19
 8005a56:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005a58:	f3ef 8305 	mrs	r3, IPSR
 8005a5c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005a5e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005a60:	4b14      	ldr	r3, [pc, #80]	; (8005ab4 <_txe_byte_pool_create+0x13c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005a6a:	f3ef 8305 	mrs	r3, IPSR
 8005a6e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005a70:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <_txe_byte_pool_create+0x13c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005a7c:	d201      	bcs.n	8005a82 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005a7e:	2313      	movs	r3, #19
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7fe fd58 	bl	8004544 <_tx_byte_pool_create>
 8005a94:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3748      	adds	r7, #72	; 0x48
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	20001044 	.word	0x20001044
 8005aa4:	20000f9c 	.word	0x20000f9c
 8005aa8:	20000fa0 	.word	0x20000fa0
 8005aac:	20000fac 	.word	0x20000fac
 8005ab0:	200010f4 	.word	0x200010f4
 8005ab4:	2000000c 	.word	0x2000000c

08005ab8 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b092      	sub	sp, #72	; 0x48
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005ad0:	230c      	movs	r3, #12
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ad4:	e054      	b.n	8005b80 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b1c      	cmp	r3, #28
 8005ada:	d002      	beq.n	8005ae2 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005adc:	230c      	movs	r3, #12
 8005ade:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae0:	e04e      	b.n	8005b80 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005aea:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005aec:	b672      	cpsid	i
    return(int_posture);
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005af0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005af2:	4b36      	ldr	r3, [pc, #216]	; (8005bcc <_txe_semaphore_create+0x114>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	4a34      	ldr	r2, [pc, #208]	; (8005bcc <_txe_semaphore_create+0x114>)
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	f383 8810 	msr	PRIMASK, r3
}
 8005b06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8005b08:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <_txe_semaphore_create+0x118>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8005b0e:	2300      	movs	r3, #0
 8005b10:	643b      	str	r3, [r7, #64]	; 0x40
 8005b12:	e009      	b.n	8005b28 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d00b      	beq.n	8005b34 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8005b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b24:	3301      	adds	r3, #1
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
 8005b28:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <_txe_semaphore_create+0x11c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3f0      	bcc.n	8005b14 <_txe_semaphore_create+0x5c>
 8005b32:	e000      	b.n	8005b36 <_txe_semaphore_create+0x7e>
                break;
 8005b34:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b36:	f3ef 8310 	mrs	r3, PRIMASK
 8005b3a:	623b      	str	r3, [r7, #32]
    return(posture);
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005b3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b40:	b672      	cpsid	i
    return(int_posture);
 8005b42:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005b44:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005b46:	4b21      	ldr	r3, [pc, #132]	; (8005bcc <_txe_semaphore_create+0x114>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <_txe_semaphore_create+0x114>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	f383 8810 	msr	PRIMASK, r3
}
 8005b5a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005b5c:	f7ff f9fe 	bl	8004f5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d102      	bne.n	8005b6e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8005b68:	230c      	movs	r3, #12
 8005b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005b6c:	e008      	b.n	8005b80 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <_txe_semaphore_create+0x120>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <_txe_semaphore_create+0x124>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d101      	bne.n	8005b80 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005b7c:	2313      	movs	r3, #19
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d114      	bne.n	8005bb0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b86:	f3ef 8305 	mrs	r3, IPSR
 8005b8a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005b8c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <_txe_semaphore_create+0x128>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b98:	f3ef 8305 	mrs	r3, IPSR
 8005b9c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005b9e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <_txe_semaphore_create+0x128>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005baa:	d201      	bcs.n	8005bb0 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005bac:	2313      	movs	r3, #19
 8005bae:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d105      	bne.n	8005bc2 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f7fe fe42 	bl	8004844 <_tx_semaphore_create>
 8005bc0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3748      	adds	r7, #72	; 0x48
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20001044 	.word	0x20001044
 8005bd0:	20000f74 	.word	0x20000f74
 8005bd4:	20000f78 	.word	0x20000f78
 8005bd8:	20000fac 	.word	0x20000fac
 8005bdc:	200010f4 	.word	0x200010f4
 8005be0:	2000000c 	.word	0x2000000c

08005be4 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005bf8:	230c      	movs	r3, #12
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e01f      	b.n	8005c3e <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <_txe_semaphore_get+0x74>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d002      	beq.n	8005c0e <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005c08:	230c      	movs	r3, #12
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	e017      	b.n	8005c3e <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d014      	beq.n	8005c3e <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005c14:	f3ef 8305 	mrs	r3, IPSR
 8005c18:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8005c1a:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005c1c:	4b0f      	ldr	r3, [pc, #60]	; (8005c5c <_txe_semaphore_get+0x78>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d002      	beq.n	8005c2c <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8005c26:	2304      	movs	r3, #4
 8005c28:	617b      	str	r3, [r7, #20]
 8005c2a:	e008      	b.n	8005c3e <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <_txe_semaphore_get+0x7c>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4a0b      	ldr	r2, [pc, #44]	; (8005c64 <_txe_semaphore_get+0x80>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d101      	bne.n	8005c3e <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fe fe4e 	bl	80048e8 <_tx_semaphore_get>
 8005c4c:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8005c4e:	697b      	ldr	r3, [r7, #20]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	53454d41 	.word	0x53454d41
 8005c5c:	2000000c 	.word	0x2000000c
 8005c60:	20000fac 	.word	0x20000fac
 8005c64:	200010f4 	.word	0x200010f4

08005c68 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d102      	bne.n	8005c7c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005c76:	230c      	movs	r3, #12
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	e00b      	b.n	8005c94 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a07      	ldr	r2, [pc, #28]	; (8005ca0 <_txe_semaphore_put+0x38>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d002      	beq.n	8005c8c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005c86:	230c      	movs	r3, #12
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e003      	b.n	8005c94 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fe febd 	bl	8004a0c <_tx_semaphore_put>
 8005c92:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	53454d41 	.word	0x53454d41

08005ca4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b09a      	sub	sp, #104	; 0x68
 8005ca8:	af06      	add	r7, sp, #24
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d102      	bne.n	8005cc2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005cbc:	230e      	movs	r3, #14
 8005cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cc0:	e0bb      	b.n	8005e3a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8005cc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005cc4:	2bb0      	cmp	r3, #176	; 0xb0
 8005cc6:	d002      	beq.n	8005cce <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005cc8:	230e      	movs	r3, #14
 8005cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ccc:	e0b5      	b.n	8005e3a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005cd8:	b672      	cpsid	i
    return(int_posture);
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005cdc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005cde:	4b64      	ldr	r3, [pc, #400]	; (8005e70 <_txe_thread_create+0x1cc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4a62      	ldr	r2, [pc, #392]	; (8005e70 <_txe_thread_create+0x1cc>)
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	f383 8810 	msr	PRIMASK, r3
}
 8005cf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8005cf8:	4b5e      	ldr	r3, [pc, #376]	; (8005e74 <_txe_thread_create+0x1d0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d00:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8005d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d04:	3b01      	subs	r3, #1
 8005d06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d08:	4413      	add	r3, r2
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
 8005d14:	e02b      	b.n	8005d6e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d101      	bne.n	8005d22 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d028      	beq.n	8005d7a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8005d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d308      	bcc.n	8005d44 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d203      	bcs.n	8005d44 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8005d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d308      	bcc.n	8005d60 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d203      	bcs.n	8005d60 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8005d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8005d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6e:	4b42      	ldr	r3, [pc, #264]	; (8005e78 <_txe_thread_create+0x1d4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d3ce      	bcc.n	8005d16 <_txe_thread_create+0x72>
 8005d78:	e000      	b.n	8005d7c <_txe_thread_create+0xd8>
                break;
 8005d7a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	61fb      	str	r3, [r7, #28]
    return(posture);
 8005d82:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8005d84:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d86:	b672      	cpsid	i
    return(int_posture);
 8005d88:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005d8c:	4b38      	ldr	r3, [pc, #224]	; (8005e70 <_txe_thread_create+0x1cc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <_txe_thread_create+0x1cc>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005da2:	f7ff f8db 	bl	8004f5c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d102      	bne.n	8005db4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8005dae:	230e      	movs	r3, #14
 8005db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db2:	e042      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8005db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d102      	bne.n	8005dc0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbe:	e03c      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d102      	bne.n	8005dcc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dca:	e036      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8005dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dce:	2bc7      	cmp	r3, #199	; 0xc7
 8005dd0:	d802      	bhi.n	8005dd8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8005dd2:	2305      	movs	r3, #5
 8005dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd6:	e030      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8005dd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dda:	2b1f      	cmp	r3, #31
 8005ddc:	d902      	bls.n	8005de4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8005dde:	230f      	movs	r3, #15
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005de2:	e02a      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8005de4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d902      	bls.n	8005df2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8005dec:	2318      	movs	r3, #24
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005df0:	e023      	b.n	8005e3a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d902      	bls.n	8005dfe <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8005df8:	2310      	movs	r3, #16
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	e01d      	b.n	8005e3a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <_txe_thread_create+0x1d8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <_txe_thread_create+0x1dc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005e0c:	2313      	movs	r3, #19
 8005e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e10:	f3ef 8305 	mrs	r3, IPSR
 8005e14:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005e16:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005e18:	4b1a      	ldr	r3, [pc, #104]	; (8005e84 <_txe_thread_create+0x1e0>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e22:	f3ef 8305 	mrs	r3, IPSR
 8005e26:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8005e28:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <_txe_thread_create+0x1e0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005e34:	d201      	bcs.n	8005e3a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005e36:	2313      	movs	r3, #19
 8005e38:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d112      	bne.n	8005e66 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8005e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e42:	9305      	str	r3, [sp, #20]
 8005e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e4a:	9303      	str	r3, [sp, #12]
 8005e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4e:	9302      	str	r3, [sp, #8]
 8005e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7fe fe2c 	bl	8004abc <_tx_thread_create>
 8005e64:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3750      	adds	r7, #80	; 0x50
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20001044 	.word	0x20001044
 8005e74:	20000fb4 	.word	0x20000fb4
 8005e78:	20000fb8 	.word	0x20000fb8
 8005e7c:	20000fac 	.word	0x20000fac
 8005e80:	200010f4 	.word	0x200010f4
 8005e84:	2000000c 	.word	0x2000000c

08005e88 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005e96:	230e      	movs	r3, #14
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	e00b      	b.n	8005eb4 <_txe_thread_resume+0x2c>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <_txe_thread_resume+0x38>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d002      	beq.n	8005eac <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8005ea6:	230e      	movs	r3, #14
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	e003      	b.n	8005eb4 <_txe_thread_resume+0x2c>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7fe ff37 	bl	8004d20 <_tx_thread_resume>
 8005eb2:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	54485244 	.word	0x54485244

08005ec4 <memset>:
 8005ec4:	4402      	add	r2, r0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d100      	bne.n	8005ece <memset+0xa>
 8005ecc:	4770      	bx	lr
 8005ece:	f803 1b01 	strb.w	r1, [r3], #1
 8005ed2:	e7f9      	b.n	8005ec8 <memset+0x4>

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 f826 	bl	8005f38 <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	0800607c 	.word	0x0800607c
 8005f10:	0800607c 	.word	0x0800607c
 8005f14:	0800607c 	.word	0x0800607c
 8005f18:	08006080 	.word	0x08006080

08005f1c <memcpy>:
 8005f1c:	440a      	add	r2, r1
 8005f1e:	4291      	cmp	r1, r2
 8005f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f24:	d100      	bne.n	8005f28 <memcpy+0xc>
 8005f26:	4770      	bx	lr
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f32:	4291      	cmp	r1, r2
 8005f34:	d1f9      	bne.n	8005f2a <memcpy+0xe>
 8005f36:	bd10      	pop	{r4, pc}

08005f38 <_init>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr

08005f44 <_fini>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	bf00      	nop
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr
